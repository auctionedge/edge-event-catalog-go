/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AeAssetDealSoldDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetDealSoldDetail{}

// AeAssetDealSoldDetail Vehicle sold event
type AeAssetDealSoldDetail struct {
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	Asset *CommonAmsAssetPointer `json:"asset,omitempty"`
	// Unique id for a deal
	DealId *string `json:"deal-id,omitempty"`
	// The Vehicle Identification Number(VIN) of the asset.
	Vin string `json:"vin"`
	// The stock number of the asset.
	Stock string `json:"stock"`
	Seller CommonAmsAccountPointer `json:"seller"`
	Buyer CommonAmsAccountPointer `json:"buyer"`
	// The year the vehicle was manufactured.
	Year *int32 `json:"year,omitempty"`
	// The manufacturer of the vehicle.
	Make *string `json:"make,omitempty"`
	// The model of the vehicle.
	Model *string `json:"model,omitempty"`
	// The trim of the vehicle.
	Trimline *string `json:"trimline,omitempty"`
	// The mileage of the asset being sold.
	Mileage *int32 `json:"mileage,omitempty"`
	// The type of fuel required by the asset being sold.
	FuelType *string `json:"fuel-type,omitempty"`
	// The type of sale the deal was made in.
	SaleType *string `json:"sale-type,omitempty"`
	// The lights on the asset when the deal was made.
	Lights *string `json:"lights,omitempty"`
	// The announcments on the asset when deal was made.
	Announcements *string `json:"announcements,omitempty"`
	// The sale date of the deal.
	SaleDate string `json:"sale-date"`
	// The lane the asset was in when deal made.
	Lane string `json:"lane"`
	// The lot the asset was in when deal made.
	Lot string `json:"lot"`
	// The amount the asset sold for.
	Amount float32 `json:"amount"`
	// The updated date time of the gatepass status
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
	Initiator *CommonInitiator `json:"initiator,omitempty"`
}

type _AeAssetDealSoldDetail AeAssetDealSoldDetail

// NewAeAssetDealSoldDetail instantiates a new AeAssetDealSoldDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetDealSoldDetail(auctionId string, vin string, stock string, seller CommonAmsAccountPointer, buyer CommonAmsAccountPointer, saleDate string, lane string, lot string, amount float32) *AeAssetDealSoldDetail {
	this := AeAssetDealSoldDetail{}
	this.AuctionId = auctionId
	this.Vin = vin
	this.Stock = stock
	this.Seller = seller
	this.Buyer = buyer
	this.SaleDate = saleDate
	this.Lane = lane
	this.Lot = lot
	this.Amount = amount
	return &this
}

// NewAeAssetDealSoldDetailWithDefaults instantiates a new AeAssetDealSoldDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetDealSoldDetailWithDefaults() *AeAssetDealSoldDetail {
	this := AeAssetDealSoldDetail{}
	return &this
}

// GetAuctionId returns the AuctionId field value
func (o *AeAssetDealSoldDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeAssetDealSoldDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil || IsNil(o.Asset) {
		var ret CommonAmsAssetPointer
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given CommonAmsAssetPointer and assigns it to the Asset field.
func (o *AeAssetDealSoldDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = &v
}

// GetDealId returns the DealId field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetDealId() string {
	if o == nil || IsNil(o.DealId) {
		var ret string
		return ret
	}
	return *o.DealId
}

// GetDealIdOk returns a tuple with the DealId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetDealIdOk() (*string, bool) {
	if o == nil || IsNil(o.DealId) {
		return nil, false
	}
	return o.DealId, true
}

// HasDealId returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasDealId() bool {
	if o != nil && !IsNil(o.DealId) {
		return true
	}

	return false
}

// SetDealId gets a reference to the given string and assigns it to the DealId field.
func (o *AeAssetDealSoldDetail) SetDealId(v string) {
	o.DealId = &v
}

// GetVin returns the Vin field value
func (o *AeAssetDealSoldDetail) GetVin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vin
}

// GetVinOk returns a tuple with the Vin field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetVinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vin, true
}

// SetVin sets field value
func (o *AeAssetDealSoldDetail) SetVin(v string) {
	o.Vin = v
}

// GetStock returns the Stock field value
func (o *AeAssetDealSoldDetail) GetStock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stock
}

// GetStockOk returns a tuple with the Stock field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetStockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stock, true
}

// SetStock sets field value
func (o *AeAssetDealSoldDetail) SetStock(v string) {
	o.Stock = v
}

// GetSeller returns the Seller field value
func (o *AeAssetDealSoldDetail) GetSeller() CommonAmsAccountPointer {
	if o == nil {
		var ret CommonAmsAccountPointer
		return ret
	}

	return o.Seller
}

// GetSellerOk returns a tuple with the Seller field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetSellerOk() (*CommonAmsAccountPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seller, true
}

// SetSeller sets field value
func (o *AeAssetDealSoldDetail) SetSeller(v CommonAmsAccountPointer) {
	o.Seller = v
}

// GetBuyer returns the Buyer field value
func (o *AeAssetDealSoldDetail) GetBuyer() CommonAmsAccountPointer {
	if o == nil {
		var ret CommonAmsAccountPointer
		return ret
	}

	return o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetBuyerOk() (*CommonAmsAccountPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buyer, true
}

// SetBuyer sets field value
func (o *AeAssetDealSoldDetail) SetBuyer(v CommonAmsAccountPointer) {
	o.Buyer = v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *AeAssetDealSoldDetail) SetYear(v int32) {
	o.Year = &v
}

// GetMake returns the Make field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetMake() string {
	if o == nil || IsNil(o.Make) {
		var ret string
		return ret
	}
	return *o.Make
}

// GetMakeOk returns a tuple with the Make field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetMakeOk() (*string, bool) {
	if o == nil || IsNil(o.Make) {
		return nil, false
	}
	return o.Make, true
}

// HasMake returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasMake() bool {
	if o != nil && !IsNil(o.Make) {
		return true
	}

	return false
}

// SetMake gets a reference to the given string and assigns it to the Make field.
func (o *AeAssetDealSoldDetail) SetMake(v string) {
	o.Make = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *AeAssetDealSoldDetail) SetModel(v string) {
	o.Model = &v
}

// GetTrimline returns the Trimline field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetTrimline() string {
	if o == nil || IsNil(o.Trimline) {
		var ret string
		return ret
	}
	return *o.Trimline
}

// GetTrimlineOk returns a tuple with the Trimline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetTrimlineOk() (*string, bool) {
	if o == nil || IsNil(o.Trimline) {
		return nil, false
	}
	return o.Trimline, true
}

// HasTrimline returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasTrimline() bool {
	if o != nil && !IsNil(o.Trimline) {
		return true
	}

	return false
}

// SetTrimline gets a reference to the given string and assigns it to the Trimline field.
func (o *AeAssetDealSoldDetail) SetTrimline(v string) {
	o.Trimline = &v
}

// GetMileage returns the Mileage field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetMileage() int32 {
	if o == nil || IsNil(o.Mileage) {
		var ret int32
		return ret
	}
	return *o.Mileage
}

// GetMileageOk returns a tuple with the Mileage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetMileageOk() (*int32, bool) {
	if o == nil || IsNil(o.Mileage) {
		return nil, false
	}
	return o.Mileage, true
}

// HasMileage returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasMileage() bool {
	if o != nil && !IsNil(o.Mileage) {
		return true
	}

	return false
}

// SetMileage gets a reference to the given int32 and assigns it to the Mileage field.
func (o *AeAssetDealSoldDetail) SetMileage(v int32) {
	o.Mileage = &v
}

// GetFuelType returns the FuelType field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetFuelType() string {
	if o == nil || IsNil(o.FuelType) {
		var ret string
		return ret
	}
	return *o.FuelType
}

// GetFuelTypeOk returns a tuple with the FuelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetFuelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FuelType) {
		return nil, false
	}
	return o.FuelType, true
}

// HasFuelType returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasFuelType() bool {
	if o != nil && !IsNil(o.FuelType) {
		return true
	}

	return false
}

// SetFuelType gets a reference to the given string and assigns it to the FuelType field.
func (o *AeAssetDealSoldDetail) SetFuelType(v string) {
	o.FuelType = &v
}

// GetSaleType returns the SaleType field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetSaleType() string {
	if o == nil || IsNil(o.SaleType) {
		var ret string
		return ret
	}
	return *o.SaleType
}

// GetSaleTypeOk returns a tuple with the SaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetSaleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SaleType) {
		return nil, false
	}
	return o.SaleType, true
}

// HasSaleType returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasSaleType() bool {
	if o != nil && !IsNil(o.SaleType) {
		return true
	}

	return false
}

// SetSaleType gets a reference to the given string and assigns it to the SaleType field.
func (o *AeAssetDealSoldDetail) SetSaleType(v string) {
	o.SaleType = &v
}

// GetLights returns the Lights field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetLights() string {
	if o == nil || IsNil(o.Lights) {
		var ret string
		return ret
	}
	return *o.Lights
}

// GetLightsOk returns a tuple with the Lights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetLightsOk() (*string, bool) {
	if o == nil || IsNil(o.Lights) {
		return nil, false
	}
	return o.Lights, true
}

// HasLights returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasLights() bool {
	if o != nil && !IsNil(o.Lights) {
		return true
	}

	return false
}

// SetLights gets a reference to the given string and assigns it to the Lights field.
func (o *AeAssetDealSoldDetail) SetLights(v string) {
	o.Lights = &v
}

// GetAnnouncements returns the Announcements field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetAnnouncements() string {
	if o == nil || IsNil(o.Announcements) {
		var ret string
		return ret
	}
	return *o.Announcements
}

// GetAnnouncementsOk returns a tuple with the Announcements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetAnnouncementsOk() (*string, bool) {
	if o == nil || IsNil(o.Announcements) {
		return nil, false
	}
	return o.Announcements, true
}

// HasAnnouncements returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasAnnouncements() bool {
	if o != nil && !IsNil(o.Announcements) {
		return true
	}

	return false
}

// SetAnnouncements gets a reference to the given string and assigns it to the Announcements field.
func (o *AeAssetDealSoldDetail) SetAnnouncements(v string) {
	o.Announcements = &v
}

// GetSaleDate returns the SaleDate field value
func (o *AeAssetDealSoldDetail) GetSaleDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SaleDate
}

// GetSaleDateOk returns a tuple with the SaleDate field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetSaleDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaleDate, true
}

// SetSaleDate sets field value
func (o *AeAssetDealSoldDetail) SetSaleDate(v string) {
	o.SaleDate = v
}

// GetLane returns the Lane field value
func (o *AeAssetDealSoldDetail) GetLane() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lane
}

// GetLaneOk returns a tuple with the Lane field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetLaneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lane, true
}

// SetLane sets field value
func (o *AeAssetDealSoldDetail) SetLane(v string) {
	o.Lane = v
}

// GetLot returns the Lot field value
func (o *AeAssetDealSoldDetail) GetLot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lot
}

// GetLotOk returns a tuple with the Lot field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetLotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lot, true
}

// SetLot sets field value
func (o *AeAssetDealSoldDetail) SetLot(v string) {
	o.Lot = v
}

// GetAmount returns the Amount field value
func (o *AeAssetDealSoldDetail) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AeAssetDealSoldDetail) SetAmount(v float32) {
	o.Amount = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AeAssetDealSoldDetail) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *AeAssetDealSoldDetail) GetInitiator() CommonInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret CommonInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealSoldDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *AeAssetDealSoldDetail) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given CommonInitiator and assigns it to the Initiator field.
func (o *AeAssetDealSoldDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = &v
}

func (o AeAssetDealSoldDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetDealSoldDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction-id"] = o.AuctionId
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.DealId) {
		toSerialize["deal-id"] = o.DealId
	}
	toSerialize["vin"] = o.Vin
	toSerialize["stock"] = o.Stock
	toSerialize["seller"] = o.Seller
	toSerialize["buyer"] = o.Buyer
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.Make) {
		toSerialize["make"] = o.Make
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Trimline) {
		toSerialize["trimline"] = o.Trimline
	}
	if !IsNil(o.Mileage) {
		toSerialize["mileage"] = o.Mileage
	}
	if !IsNil(o.FuelType) {
		toSerialize["fuel-type"] = o.FuelType
	}
	if !IsNil(o.SaleType) {
		toSerialize["sale-type"] = o.SaleType
	}
	if !IsNil(o.Lights) {
		toSerialize["lights"] = o.Lights
	}
	if !IsNil(o.Announcements) {
		toSerialize["announcements"] = o.Announcements
	}
	toSerialize["sale-date"] = o.SaleDate
	toSerialize["lane"] = o.Lane
	toSerialize["lot"] = o.Lot
	toSerialize["amount"] = o.Amount
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated-at"] = o.UpdatedAt
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *AeAssetDealSoldDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction-id",
		"vin",
		"stock",
		"seller",
		"buyer",
		"sale-date",
		"lane",
		"lot",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetDealSoldDetail := _AeAssetDealSoldDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetDealSoldDetail)

	if err != nil {
		return err
	}

	*o = AeAssetDealSoldDetail(varAeAssetDealSoldDetail)

	return err
}

type NullableAeAssetDealSoldDetail struct {
	value *AeAssetDealSoldDetail
	isSet bool
}

func (v NullableAeAssetDealSoldDetail) Get() *AeAssetDealSoldDetail {
	return v.value
}

func (v *NullableAeAssetDealSoldDetail) Set(val *AeAssetDealSoldDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetDealSoldDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetDealSoldDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetDealSoldDetail(val *AeAssetDealSoldDetail) *NullableAeAssetDealSoldDetail {
	return &NullableAeAssetDealSoldDetail{value: val, isSet: true}
}

func (v NullableAeAssetDealSoldDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetDealSoldDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


