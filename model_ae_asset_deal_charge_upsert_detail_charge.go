/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AeAssetDealChargeUpsertDetailCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetDealChargeUpsertDetailCharge{}

// AeAssetDealChargeUpsertDetailCharge Charge details
type AeAssetDealChargeUpsertDetailCharge struct {
	// Charge ID.
	Id string `json:"id"`
	// Charge ID Description.
	DisplayName string `json:"display-name"`
	// Type of charge.
	ChargeType string `json:"charge-type"`
	Amount CommonCurrency `json:"amount"`
}

type _AeAssetDealChargeUpsertDetailCharge AeAssetDealChargeUpsertDetailCharge

// NewAeAssetDealChargeUpsertDetailCharge instantiates a new AeAssetDealChargeUpsertDetailCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetDealChargeUpsertDetailCharge(id string, displayName string, chargeType string, amount CommonCurrency) *AeAssetDealChargeUpsertDetailCharge {
	this := AeAssetDealChargeUpsertDetailCharge{}
	this.Id = id
	this.DisplayName = displayName
	this.ChargeType = chargeType
	this.Amount = amount
	return &this
}

// NewAeAssetDealChargeUpsertDetailChargeWithDefaults instantiates a new AeAssetDealChargeUpsertDetailCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetDealChargeUpsertDetailChargeWithDefaults() *AeAssetDealChargeUpsertDetailCharge {
	this := AeAssetDealChargeUpsertDetailCharge{}
	return &this
}

// GetId returns the Id field value
func (o *AeAssetDealChargeUpsertDetailCharge) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetailCharge) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AeAssetDealChargeUpsertDetailCharge) SetId(v string) {
	o.Id = v
}

// GetDisplayName returns the DisplayName field value
func (o *AeAssetDealChargeUpsertDetailCharge) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetailCharge) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *AeAssetDealChargeUpsertDetailCharge) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetChargeType returns the ChargeType field value
func (o *AeAssetDealChargeUpsertDetailCharge) GetChargeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetailCharge) GetChargeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeType, true
}

// SetChargeType sets field value
func (o *AeAssetDealChargeUpsertDetailCharge) SetChargeType(v string) {
	o.ChargeType = v
}

// GetAmount returns the Amount field value
func (o *AeAssetDealChargeUpsertDetailCharge) GetAmount() CommonCurrency {
	if o == nil {
		var ret CommonCurrency
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetailCharge) GetAmountOk() (*CommonCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AeAssetDealChargeUpsertDetailCharge) SetAmount(v CommonCurrency) {
	o.Amount = v
}

func (o AeAssetDealChargeUpsertDetailCharge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetDealChargeUpsertDetailCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["display-name"] = o.DisplayName
	toSerialize["charge-type"] = o.ChargeType
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *AeAssetDealChargeUpsertDetailCharge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"display-name",
		"charge-type",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetDealChargeUpsertDetailCharge := _AeAssetDealChargeUpsertDetailCharge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetDealChargeUpsertDetailCharge)

	if err != nil {
		return err
	}

	*o = AeAssetDealChargeUpsertDetailCharge(varAeAssetDealChargeUpsertDetailCharge)

	return err
}

type NullableAeAssetDealChargeUpsertDetailCharge struct {
	value *AeAssetDealChargeUpsertDetailCharge
	isSet bool
}

func (v NullableAeAssetDealChargeUpsertDetailCharge) Get() *AeAssetDealChargeUpsertDetailCharge {
	return v.value
}

func (v *NullableAeAssetDealChargeUpsertDetailCharge) Set(val *AeAssetDealChargeUpsertDetailCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetDealChargeUpsertDetailCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetDealChargeUpsertDetailCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetDealChargeUpsertDetailCharge(val *AeAssetDealChargeUpsertDetailCharge) *NullableAeAssetDealChargeUpsertDetailCharge {
	return &NullableAeAssetDealChargeUpsertDetailCharge{value: val, isSet: true}
}

func (v NullableAeAssetDealChargeUpsertDetailCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetDealChargeUpsertDetailCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


