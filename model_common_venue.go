/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonVenue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonVenue{}

// CommonVenue struct for CommonVenue
type CommonVenue struct {
	// The name of this specific venue for the organization
	DisplayName string `json:"display-name"`
	// Auction Edge unique identifier for an auction.
	Organization string `json:"organization"`
	Location CommonPhysicalLocation `json:"location"`
	// The type of the venue
	VenueType string `json:"venue-type"`
}

type _CommonVenue CommonVenue

// NewCommonVenue instantiates a new CommonVenue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonVenue(displayName string, organization string, location CommonPhysicalLocation, venueType string) *CommonVenue {
	this := CommonVenue{}
	this.DisplayName = displayName
	this.Organization = organization
	this.Location = location
	this.VenueType = venueType
	return &this
}

// NewCommonVenueWithDefaults instantiates a new CommonVenue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonVenueWithDefaults() *CommonVenue {
	this := CommonVenue{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *CommonVenue) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CommonVenue) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CommonVenue) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetOrganization returns the Organization field value
func (o *CommonVenue) GetOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *CommonVenue) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *CommonVenue) SetOrganization(v string) {
	o.Organization = v
}

// GetLocation returns the Location field value
func (o *CommonVenue) GetLocation() CommonPhysicalLocation {
	if o == nil {
		var ret CommonPhysicalLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *CommonVenue) GetLocationOk() (*CommonPhysicalLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *CommonVenue) SetLocation(v CommonPhysicalLocation) {
	o.Location = v
}

// GetVenueType returns the VenueType field value
func (o *CommonVenue) GetVenueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VenueType
}

// GetVenueTypeOk returns a tuple with the VenueType field value
// and a boolean to check if the value has been set.
func (o *CommonVenue) GetVenueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VenueType, true
}

// SetVenueType sets field value
func (o *CommonVenue) SetVenueType(v string) {
	o.VenueType = v
}

func (o CommonVenue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonVenue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["display-name"] = o.DisplayName
	toSerialize["organization"] = o.Organization
	toSerialize["location"] = o.Location
	toSerialize["venue-type"] = o.VenueType
	return toSerialize, nil
}

func (o *CommonVenue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"display-name",
		"organization",
		"location",
		"venue-type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonVenue := _CommonVenue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonVenue)

	if err != nil {
		return err
	}

	*o = CommonVenue(varCommonVenue)

	return err
}

type NullableCommonVenue struct {
	value *CommonVenue
	isSet bool
}

func (v NullableCommonVenue) Get() *CommonVenue {
	return v.value
}

func (v *NullableCommonVenue) Set(val *CommonVenue) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonVenue) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonVenue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonVenue(val *CommonVenue) *NullableCommonVenue {
	return &NullableCommonVenue{value: val, isSet: true}
}

func (v NullableCommonVenue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonVenue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


