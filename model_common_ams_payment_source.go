/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// checks if the CommonAmsPaymentSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonAmsPaymentSource{}

// CommonAmsPaymentSource struct for CommonAmsPaymentSource
type CommonAmsPaymentSource struct {
	// auction unique id for payment source in AMS
	PaymentSourceId string `json:"payment-source-id"`
	// auction unique id for payment vendor in AMS
	PaymentVendorId string `json:"payment-vendor-id"`
	// The display name of the payment source.
	DisplayName string `json:"display-name"`
	AdditionalProperties map[string]interface{}
}

type _CommonAmsPaymentSource CommonAmsPaymentSource

// NewCommonAmsPaymentSource instantiates a new CommonAmsPaymentSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonAmsPaymentSource(paymentSourceId string, paymentVendorId string, displayName string) *CommonAmsPaymentSource {
	this := CommonAmsPaymentSource{}
	this.PaymentSourceId = paymentSourceId
	this.PaymentVendorId = paymentVendorId
	this.DisplayName = displayName
	return &this
}

// NewCommonAmsPaymentSourceWithDefaults instantiates a new CommonAmsPaymentSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonAmsPaymentSourceWithDefaults() *CommonAmsPaymentSource {
	this := CommonAmsPaymentSource{}
	return &this
}

// GetPaymentSourceId returns the PaymentSourceId field value
func (o *CommonAmsPaymentSource) GetPaymentSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentSourceId
}

// GetPaymentSourceIdOk returns a tuple with the PaymentSourceId field value
// and a boolean to check if the value has been set.
func (o *CommonAmsPaymentSource) GetPaymentSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentSourceId, true
}

// SetPaymentSourceId sets field value
func (o *CommonAmsPaymentSource) SetPaymentSourceId(v string) {
	o.PaymentSourceId = v
}

// GetPaymentVendorId returns the PaymentVendorId field value
func (o *CommonAmsPaymentSource) GetPaymentVendorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentVendorId
}

// GetPaymentVendorIdOk returns a tuple with the PaymentVendorId field value
// and a boolean to check if the value has been set.
func (o *CommonAmsPaymentSource) GetPaymentVendorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentVendorId, true
}

// SetPaymentVendorId sets field value
func (o *CommonAmsPaymentSource) SetPaymentVendorId(v string) {
	o.PaymentVendorId = v
}

// GetDisplayName returns the DisplayName field value
func (o *CommonAmsPaymentSource) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CommonAmsPaymentSource) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CommonAmsPaymentSource) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o CommonAmsPaymentSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonAmsPaymentSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payment-source-id"] = o.PaymentSourceId
	toSerialize["payment-vendor-id"] = o.PaymentVendorId
	toSerialize["display-name"] = o.DisplayName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonAmsPaymentSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payment-source-id",
		"payment-vendor-id",
		"display-name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonAmsPaymentSource := _CommonAmsPaymentSource{}

	err = json.Unmarshal(data, &varCommonAmsPaymentSource)

	if err != nil {
		return err
	}

	*o = CommonAmsPaymentSource(varCommonAmsPaymentSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payment-source-id")
		delete(additionalProperties, "payment-vendor-id")
		delete(additionalProperties, "display-name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonAmsPaymentSource struct {
	value *CommonAmsPaymentSource
	isSet bool
}

func (v NullableCommonAmsPaymentSource) Get() *CommonAmsPaymentSource {
	return v.value
}

func (v *NullableCommonAmsPaymentSource) Set(val *CommonAmsPaymentSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonAmsPaymentSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonAmsPaymentSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonAmsPaymentSource(val *CommonAmsPaymentSource) *NullableCommonAmsPaymentSource {
	return &NullableCommonAmsPaymentSource{value: val, isSet: true}
}

func (v NullableCommonAmsPaymentSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonAmsPaymentSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


