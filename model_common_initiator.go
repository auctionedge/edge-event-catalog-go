/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonInitiator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonInitiator{}

// CommonInitiator Common object of who initiated a request
type CommonInitiator struct {
	// Identify if the event was initiated by an application or a user
	InitiatorType string `json:"initiator-type"`
	// Identifier (or URI) of a system/service component (e.g., code module) or user (username)
	InitiatorKey string `json:"initiator-key"`
}

type _CommonInitiator CommonInitiator

// NewCommonInitiator instantiates a new CommonInitiator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonInitiator(initiatorType string, initiatorKey string) *CommonInitiator {
	this := CommonInitiator{}
	this.InitiatorType = initiatorType
	this.InitiatorKey = initiatorKey
	return &this
}

// NewCommonInitiatorWithDefaults instantiates a new CommonInitiator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonInitiatorWithDefaults() *CommonInitiator {
	this := CommonInitiator{}
	return &this
}

// GetInitiatorType returns the InitiatorType field value
func (o *CommonInitiator) GetInitiatorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitiatorType
}

// GetInitiatorTypeOk returns a tuple with the InitiatorType field value
// and a boolean to check if the value has been set.
func (o *CommonInitiator) GetInitiatorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitiatorType, true
}

// SetInitiatorType sets field value
func (o *CommonInitiator) SetInitiatorType(v string) {
	o.InitiatorType = v
}

// GetInitiatorKey returns the InitiatorKey field value
func (o *CommonInitiator) GetInitiatorKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitiatorKey
}

// GetInitiatorKeyOk returns a tuple with the InitiatorKey field value
// and a boolean to check if the value has been set.
func (o *CommonInitiator) GetInitiatorKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitiatorKey, true
}

// SetInitiatorKey sets field value
func (o *CommonInitiator) SetInitiatorKey(v string) {
	o.InitiatorKey = v
}

func (o CommonInitiator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonInitiator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["initiator-type"] = o.InitiatorType
	toSerialize["initiator-key"] = o.InitiatorKey
	return toSerialize, nil
}

func (o *CommonInitiator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"initiator-type",
		"initiator-key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonInitiator := _CommonInitiator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonInitiator)

	if err != nil {
		return err
	}

	*o = CommonInitiator(varCommonInitiator)

	return err
}

type NullableCommonInitiator struct {
	value *CommonInitiator
	isSet bool
}

func (v NullableCommonInitiator) Get() *CommonInitiator {
	return v.value
}

func (v *NullableCommonInitiator) Set(val *CommonInitiator) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonInitiator(val *CommonInitiator) *NullableCommonInitiator {
	return &NullableCommonInitiator{value: val, isSet: true}
}

func (v NullableCommonInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


