/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// checks if the DealAmsSaleListing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DealAmsSaleListing{}

// DealAmsSaleListing struct for DealAmsSaleListing
type DealAmsSaleListing struct {
	// Date on which the asset ran that the deal was created for.
	SaleDate string `json:"sale-date"`
	// The lane that the asset ran in.
	Lane string `json:"lane"`
	// The lot that the asset was attached to.
	Lot string `json:"lot"`
	AdditionalProperties map[string]interface{}
}

type _DealAmsSaleListing DealAmsSaleListing

// NewDealAmsSaleListing instantiates a new DealAmsSaleListing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDealAmsSaleListing(saleDate string, lane string, lot string) *DealAmsSaleListing {
	this := DealAmsSaleListing{}
	this.SaleDate = saleDate
	this.Lane = lane
	this.Lot = lot
	return &this
}

// NewDealAmsSaleListingWithDefaults instantiates a new DealAmsSaleListing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDealAmsSaleListingWithDefaults() *DealAmsSaleListing {
	this := DealAmsSaleListing{}
	return &this
}

// GetSaleDate returns the SaleDate field value
func (o *DealAmsSaleListing) GetSaleDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SaleDate
}

// GetSaleDateOk returns a tuple with the SaleDate field value
// and a boolean to check if the value has been set.
func (o *DealAmsSaleListing) GetSaleDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaleDate, true
}

// SetSaleDate sets field value
func (o *DealAmsSaleListing) SetSaleDate(v string) {
	o.SaleDate = v
}

// GetLane returns the Lane field value
func (o *DealAmsSaleListing) GetLane() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lane
}

// GetLaneOk returns a tuple with the Lane field value
// and a boolean to check if the value has been set.
func (o *DealAmsSaleListing) GetLaneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lane, true
}

// SetLane sets field value
func (o *DealAmsSaleListing) SetLane(v string) {
	o.Lane = v
}

// GetLot returns the Lot field value
func (o *DealAmsSaleListing) GetLot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lot
}

// GetLotOk returns a tuple with the Lot field value
// and a boolean to check if the value has been set.
func (o *DealAmsSaleListing) GetLotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lot, true
}

// SetLot sets field value
func (o *DealAmsSaleListing) SetLot(v string) {
	o.Lot = v
}

func (o DealAmsSaleListing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DealAmsSaleListing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sale-date"] = o.SaleDate
	toSerialize["lane"] = o.Lane
	toSerialize["lot"] = o.Lot

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DealAmsSaleListing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sale-date",
		"lane",
		"lot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDealAmsSaleListing := _DealAmsSaleListing{}

	err = json.Unmarshal(data, &varDealAmsSaleListing)

	if err != nil {
		return err
	}

	*o = DealAmsSaleListing(varDealAmsSaleListing)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sale-date")
		delete(additionalProperties, "lane")
		delete(additionalProperties, "lot")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDealAmsSaleListing struct {
	value *DealAmsSaleListing
	isSet bool
}

func (v NullableDealAmsSaleListing) Get() *DealAmsSaleListing {
	return v.value
}

func (v *NullableDealAmsSaleListing) Set(val *DealAmsSaleListing) {
	v.value = val
	v.isSet = true
}

func (v NullableDealAmsSaleListing) IsSet() bool {
	return v.isSet
}

func (v *NullableDealAmsSaleListing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDealAmsSaleListing(val *DealAmsSaleListing) *NullableDealAmsSaleListing {
	return &NullableDealAmsSaleListing{value: val, isSet: true}
}

func (v NullableDealAmsSaleListing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDealAmsSaleListing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


