/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// DocumentType Type of document
type DocumentType string

// List of document-type
const (
	APPROVAL_FOR_WORK_ORDERS DocumentType = "approval_for_work_orders"
	ARBITRATION DocumentType = "arbitration"
	AUTOIMS_NOTIFICATION DocumentType = "autoims_notification"
	BILL_OF_SALE DocumentType = "bill_of_sale"
	BILL_OF_SALE_AUCTION_COPY DocumentType = "bill_of_sale_auction_copy"
	BILL_OF_SALE_BUYER_COPY DocumentType = "bill_of_sale_buyer_copy"
	BILL_OF_SALE_SELLER_COPY DocumentType = "bill_of_sale_seller_copy"
	BOOKSHEET DocumentType = "booksheet"
	BPP_CLAIM DocumentType = "bpp_claim"
	BUYBACK_FORM DocumentType = "buyback_form"
	BUYER_CHECK DocumentType = "buyer_check"
	BUYER_GATE_PASS DocumentType = "buyer_gate_pass"
	BUYER_PROTECTION_PLAN DocumentType = "buyer_protection_plan"
	CONDITION_REPORT_SCANNED DocumentType = "condition_report_scanned"
	CORRESPONDANCE DocumentType = "correspondance"
	ELECTRONIC_CONDITION_REPORT DocumentType = "electronic_condition_report"
	GENERAL_MOTORS_WINDOW_STICKER DocumentType = "general_motors_window_sticker"
	GSA_FORM_97 DocumentType = "gsa_form_97"
	IF_SHEET DocumentType = "if_sheet"
	MISCELLANEOUS DocumentType = "miscellaneous"
	PICKUP_TRANSPORTATION DocumentType = "pickup_transportation"
	POST_SALE_INSPECTION DocumentType = "post_sale_inspection"
	PRE_SALE_INSPECTION DocumentType = "pre_sale_inspection"
	PRE_INSPECTION_CERTIFICATION DocumentType = "pre_inspection_certification"
	PROPERTY_LOG_SHEET DocumentType = "property_log_sheet"
	RECEIPT DocumentType = "receipt"
	REDEMPTION DocumentType = "redemption"
	REPAIR_ESTIMATES DocumentType = "repair_estimates"
	REPAIR_GATE_PASS DocumentType = "repair_gate_pass"
	REPO_CHECK_IN_TICKET DocumentType = "repo_check_in_ticket"
	SELLER_CHECK DocumentType = "seller_check"
	SELLER_GATE_PASS DocumentType = "seller_gate_pass"
	SERVICE_INVOICE DocumentType = "service_invoice"
	SOUTH_CAROLINA_PTO DocumentType = "south_carolina_pto"
	THANK_YOU_NOTE_TO_BUYER DocumentType = "thank_you_note_to_buyer"
	TITLE_SUPPORTING_DOCUMENTS DocumentType = "title_supporting_documents"
	TRACKER DocumentType = "tracker"
	UNKNOWN DocumentType = "unknown"
	VENDOR_INVOICE DocumentType = "vendor_invoice"
	WINDOW_STICKER DocumentType = "window_sticker"
	WORK_ORDER DocumentType = "work_order"
)

// All allowed values of DocumentType enum
var AllowedDocumentTypeEnumValues = []DocumentType{
	"approval_for_work_orders",
	"arbitration",
	"autoims_notification",
	"bill_of_sale",
	"bill_of_sale_auction_copy",
	"bill_of_sale_buyer_copy",
	"bill_of_sale_seller_copy",
	"booksheet",
	"bpp_claim",
	"buyback_form",
	"buyer_check",
	"buyer_gate_pass",
	"buyer_protection_plan",
	"condition_report_scanned",
	"correspondance",
	"electronic_condition_report",
	"general_motors_window_sticker",
	"gsa_form_97",
	"if_sheet",
	"miscellaneous",
	"pickup_transportation",
	"post_sale_inspection",
	"pre_sale_inspection",
	"pre_inspection_certification",
	"property_log_sheet",
	"receipt",
	"redemption",
	"repair_estimates",
	"repair_gate_pass",
	"repo_check_in_ticket",
	"seller_check",
	"seller_gate_pass",
	"service_invoice",
	"south_carolina_pto",
	"thank_you_note_to_buyer",
	"title_supporting_documents",
	"tracker",
	"unknown",
	"vendor_invoice",
	"window_sticker",
	"work_order",
}

func (v *DocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentType(value)
	for _, existing := range AllowedDocumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentType", value)
}

// NewDocumentTypeFromValue returns a pointer to a valid DocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentTypeFromValue(v string) (*DocumentType, error) {
	ev := DocumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentType: valid values are %v", v, AllowedDocumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentType) IsValid() bool {
	for _, existing := range AllowedDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to document-type value
func (v DocumentType) Ptr() *DocumentType {
	return &v
}

type NullableDocumentType struct {
	value *DocumentType
	isSet bool
}

func (v NullableDocumentType) Get() *DocumentType {
	return v.value
}

func (v *NullableDocumentType) Set(val *DocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentType(val *DocumentType) *NullableDocumentType {
	return &NullableDocumentType{value: val, isSet: true}
}

func (v NullableDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

