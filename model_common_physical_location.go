/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonPhysicalLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonPhysicalLocation{}

// CommonPhysicalLocation Properties of a location
type CommonPhysicalLocation struct {
	// Name to be displayed by human
	DisplayName *string `json:"display-name,omitempty"`
	// First line of address
	Address1 string `json:"address1"`
	// Second line of address
	Address2 *string `json:"address2,omitempty"`
	// The city that the location is in
	City string `json:"city"`
	// The state or province that the location is in
	State string `json:"state"`
	// The postal code of this location
	PostalCode string `json:"postal-code"`
	// The 4-number suffix of the postal-code
	Zip4 *string `json:"zip4,omitempty"`
	// The ISO code for the country that this location is in
	CountryIsoCode string `json:"country-iso-code"`
	// Auction Edge region that this location is in
	RegionCode *string `json:"region-code,omitempty"`
	// The time zone that the location is in
	TimeZone *string `json:"time-zone,omitempty"`
}

type _CommonPhysicalLocation CommonPhysicalLocation

// NewCommonPhysicalLocation instantiates a new CommonPhysicalLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonPhysicalLocation(address1 string, city string, state string, postalCode string, countryIsoCode string) *CommonPhysicalLocation {
	this := CommonPhysicalLocation{}
	this.Address1 = address1
	this.City = city
	this.State = state
	this.PostalCode = postalCode
	this.CountryIsoCode = countryIsoCode
	return &this
}

// NewCommonPhysicalLocationWithDefaults instantiates a new CommonPhysicalLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonPhysicalLocationWithDefaults() *CommonPhysicalLocation {
	this := CommonPhysicalLocation{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CommonPhysicalLocation) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CommonPhysicalLocation) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CommonPhysicalLocation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetAddress1 returns the Address1 field value
func (o *CommonPhysicalLocation) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *CommonPhysicalLocation) SetAddress1(v string) {
	o.Address1 = v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *CommonPhysicalLocation) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *CommonPhysicalLocation) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *CommonPhysicalLocation) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value
func (o *CommonPhysicalLocation) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *CommonPhysicalLocation) SetCity(v string) {
	o.City = v
}

// GetState returns the State field value
func (o *CommonPhysicalLocation) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CommonPhysicalLocation) SetState(v string) {
	o.State = v
}

// GetPostalCode returns the PostalCode field value
func (o *CommonPhysicalLocation) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *CommonPhysicalLocation) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetZip4 returns the Zip4 field value if set, zero value otherwise.
func (o *CommonPhysicalLocation) GetZip4() string {
	if o == nil || IsNil(o.Zip4) {
		var ret string
		return ret
	}
	return *o.Zip4
}

// GetZip4Ok returns a tuple with the Zip4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetZip4Ok() (*string, bool) {
	if o == nil || IsNil(o.Zip4) {
		return nil, false
	}
	return o.Zip4, true
}

// HasZip4 returns a boolean if a field has been set.
func (o *CommonPhysicalLocation) HasZip4() bool {
	if o != nil && !IsNil(o.Zip4) {
		return true
	}

	return false
}

// SetZip4 gets a reference to the given string and assigns it to the Zip4 field.
func (o *CommonPhysicalLocation) SetZip4(v string) {
	o.Zip4 = &v
}

// GetCountryIsoCode returns the CountryIsoCode field value
func (o *CommonPhysicalLocation) GetCountryIsoCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryIsoCode
}

// GetCountryIsoCodeOk returns a tuple with the CountryIsoCode field value
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetCountryIsoCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryIsoCode, true
}

// SetCountryIsoCode sets field value
func (o *CommonPhysicalLocation) SetCountryIsoCode(v string) {
	o.CountryIsoCode = v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *CommonPhysicalLocation) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *CommonPhysicalLocation) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *CommonPhysicalLocation) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *CommonPhysicalLocation) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPhysicalLocation) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *CommonPhysicalLocation) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *CommonPhysicalLocation) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o CommonPhysicalLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonPhysicalLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["display-name"] = o.DisplayName
	}
	toSerialize["address1"] = o.Address1
	if !IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	toSerialize["city"] = o.City
	toSerialize["state"] = o.State
	toSerialize["postal-code"] = o.PostalCode
	if !IsNil(o.Zip4) {
		toSerialize["zip4"] = o.Zip4
	}
	toSerialize["country-iso-code"] = o.CountryIsoCode
	if !IsNil(o.RegionCode) {
		toSerialize["region-code"] = o.RegionCode
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time-zone"] = o.TimeZone
	}
	return toSerialize, nil
}

func (o *CommonPhysicalLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address1",
		"city",
		"state",
		"postal-code",
		"country-iso-code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonPhysicalLocation := _CommonPhysicalLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonPhysicalLocation)

	if err != nil {
		return err
	}

	*o = CommonPhysicalLocation(varCommonPhysicalLocation)

	return err
}

type NullableCommonPhysicalLocation struct {
	value *CommonPhysicalLocation
	isSet bool
}

func (v NullableCommonPhysicalLocation) Get() *CommonPhysicalLocation {
	return v.value
}

func (v *NullableCommonPhysicalLocation) Set(val *CommonPhysicalLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonPhysicalLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonPhysicalLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonPhysicalLocation(val *CommonPhysicalLocation) *NullableCommonPhysicalLocation {
	return &NullableCommonPhysicalLocation{value: val, isSet: true}
}

func (v NullableCommonPhysicalLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonPhysicalLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


