/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
)

// checks if the CommonVehicleEngine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonVehicleEngine{}

// CommonVehicleEngine Attributes that define an engine
type CommonVehicleEngine struct {
	// The number of cylinders the engine has.
	Cylinders *float32 `json:"cylinders,omitempty"`
	// How the cylinders are arranged in an engine.
	CylinderConfiguration *string `json:"cylinder-configuration,omitempty"`
	// the total amount of air and fuel that can be drawn into the cylinders at one time.
	Displacement *string `json:"displacement,omitempty"`
	// The type of fuel the engine consumes to operate.
	FuelType *string `json:"fuel-type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonVehicleEngine CommonVehicleEngine

// NewCommonVehicleEngine instantiates a new CommonVehicleEngine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonVehicleEngine() *CommonVehicleEngine {
	this := CommonVehicleEngine{}
	return &this
}

// NewCommonVehicleEngineWithDefaults instantiates a new CommonVehicleEngine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonVehicleEngineWithDefaults() *CommonVehicleEngine {
	this := CommonVehicleEngine{}
	return &this
}

// GetCylinders returns the Cylinders field value if set, zero value otherwise.
func (o *CommonVehicleEngine) GetCylinders() float32 {
	if o == nil || IsNil(o.Cylinders) {
		var ret float32
		return ret
	}
	return *o.Cylinders
}

// GetCylindersOk returns a tuple with the Cylinders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleEngine) GetCylindersOk() (*float32, bool) {
	if o == nil || IsNil(o.Cylinders) {
		return nil, false
	}
	return o.Cylinders, true
}

// HasCylinders returns a boolean if a field has been set.
func (o *CommonVehicleEngine) HasCylinders() bool {
	if o != nil && !IsNil(o.Cylinders) {
		return true
	}

	return false
}

// SetCylinders gets a reference to the given float32 and assigns it to the Cylinders field.
func (o *CommonVehicleEngine) SetCylinders(v float32) {
	o.Cylinders = &v
}

// GetCylinderConfiguration returns the CylinderConfiguration field value if set, zero value otherwise.
func (o *CommonVehicleEngine) GetCylinderConfiguration() string {
	if o == nil || IsNil(o.CylinderConfiguration) {
		var ret string
		return ret
	}
	return *o.CylinderConfiguration
}

// GetCylinderConfigurationOk returns a tuple with the CylinderConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleEngine) GetCylinderConfigurationOk() (*string, bool) {
	if o == nil || IsNil(o.CylinderConfiguration) {
		return nil, false
	}
	return o.CylinderConfiguration, true
}

// HasCylinderConfiguration returns a boolean if a field has been set.
func (o *CommonVehicleEngine) HasCylinderConfiguration() bool {
	if o != nil && !IsNil(o.CylinderConfiguration) {
		return true
	}

	return false
}

// SetCylinderConfiguration gets a reference to the given string and assigns it to the CylinderConfiguration field.
func (o *CommonVehicleEngine) SetCylinderConfiguration(v string) {
	o.CylinderConfiguration = &v
}

// GetDisplacement returns the Displacement field value if set, zero value otherwise.
func (o *CommonVehicleEngine) GetDisplacement() string {
	if o == nil || IsNil(o.Displacement) {
		var ret string
		return ret
	}
	return *o.Displacement
}

// GetDisplacementOk returns a tuple with the Displacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleEngine) GetDisplacementOk() (*string, bool) {
	if o == nil || IsNil(o.Displacement) {
		return nil, false
	}
	return o.Displacement, true
}

// HasDisplacement returns a boolean if a field has been set.
func (o *CommonVehicleEngine) HasDisplacement() bool {
	if o != nil && !IsNil(o.Displacement) {
		return true
	}

	return false
}

// SetDisplacement gets a reference to the given string and assigns it to the Displacement field.
func (o *CommonVehicleEngine) SetDisplacement(v string) {
	o.Displacement = &v
}

// GetFuelType returns the FuelType field value if set, zero value otherwise.
func (o *CommonVehicleEngine) GetFuelType() string {
	if o == nil || IsNil(o.FuelType) {
		var ret string
		return ret
	}
	return *o.FuelType
}

// GetFuelTypeOk returns a tuple with the FuelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleEngine) GetFuelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FuelType) {
		return nil, false
	}
	return o.FuelType, true
}

// HasFuelType returns a boolean if a field has been set.
func (o *CommonVehicleEngine) HasFuelType() bool {
	if o != nil && !IsNil(o.FuelType) {
		return true
	}

	return false
}

// SetFuelType gets a reference to the given string and assigns it to the FuelType field.
func (o *CommonVehicleEngine) SetFuelType(v string) {
	o.FuelType = &v
}

func (o CommonVehicleEngine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonVehicleEngine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cylinders) {
		toSerialize["cylinders"] = o.Cylinders
	}
	if !IsNil(o.CylinderConfiguration) {
		toSerialize["cylinder-configuration"] = o.CylinderConfiguration
	}
	if !IsNil(o.Displacement) {
		toSerialize["displacement"] = o.Displacement
	}
	if !IsNil(o.FuelType) {
		toSerialize["fuel-type"] = o.FuelType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonVehicleEngine) UnmarshalJSON(data []byte) (err error) {
	varCommonVehicleEngine := _CommonVehicleEngine{}

	err = json.Unmarshal(data, &varCommonVehicleEngine)

	if err != nil {
		return err
	}

	*o = CommonVehicleEngine(varCommonVehicleEngine)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cylinders")
		delete(additionalProperties, "cylinder-configuration")
		delete(additionalProperties, "displacement")
		delete(additionalProperties, "fuel-type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonVehicleEngine struct {
	value *CommonVehicleEngine
	isSet bool
}

func (v NullableCommonVehicleEngine) Get() *CommonVehicleEngine {
	return v.value
}

func (v *NullableCommonVehicleEngine) Set(val *CommonVehicleEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonVehicleEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonVehicleEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonVehicleEngine(val *CommonVehicleEngine) *NullableCommonVehicleEngine {
	return &NullableCommonVehicleEngine{value: val, isSet: true}
}

func (v NullableCommonVehicleEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonVehicleEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


