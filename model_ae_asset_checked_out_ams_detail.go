/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AeAssetCheckedOutAmsDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetCheckedOutAmsDetail{}

// AeAssetCheckedOutAmsDetail Event that designates that an asset has been checked-out of the AMS.  Which means that the asset no longer resides at the auction and will not be checked back in under same stock number.
type AeAssetCheckedOutAmsDetail struct {
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	Asset CommonAmsAssetPointer `json:"asset"`
	// The updated date time of the deal.
	UpdatedAt time.Time `json:"updated-at"`
	// The auction personnel that checked out the vehicle
	CheckedOutBy string `json:"checked-out-by"`
	Initiator *CommonInitiator `json:"initiator,omitempty"`
}

type _AeAssetCheckedOutAmsDetail AeAssetCheckedOutAmsDetail

// NewAeAssetCheckedOutAmsDetail instantiates a new AeAssetCheckedOutAmsDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetCheckedOutAmsDetail(auctionId string, asset CommonAmsAssetPointer, updatedAt time.Time, checkedOutBy string) *AeAssetCheckedOutAmsDetail {
	this := AeAssetCheckedOutAmsDetail{}
	this.AuctionId = auctionId
	this.Asset = asset
	this.UpdatedAt = updatedAt
	this.CheckedOutBy = checkedOutBy
	return &this
}

// NewAeAssetCheckedOutAmsDetailWithDefaults instantiates a new AeAssetCheckedOutAmsDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetCheckedOutAmsDetailWithDefaults() *AeAssetCheckedOutAmsDetail {
	this := AeAssetCheckedOutAmsDetail{}
	return &this
}

// GetAuctionId returns the AuctionId field value
func (o *AeAssetCheckedOutAmsDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeAssetCheckedOutAmsDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeAssetCheckedOutAmsDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetAsset returns the Asset field value
func (o *AeAssetCheckedOutAmsDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil {
		var ret CommonAmsAssetPointer
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *AeAssetCheckedOutAmsDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *AeAssetCheckedOutAmsDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *AeAssetCheckedOutAmsDetail) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *AeAssetCheckedOutAmsDetail) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *AeAssetCheckedOutAmsDetail) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCheckedOutBy returns the CheckedOutBy field value
func (o *AeAssetCheckedOutAmsDetail) GetCheckedOutBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CheckedOutBy
}

// GetCheckedOutByOk returns a tuple with the CheckedOutBy field value
// and a boolean to check if the value has been set.
func (o *AeAssetCheckedOutAmsDetail) GetCheckedOutByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckedOutBy, true
}

// SetCheckedOutBy sets field value
func (o *AeAssetCheckedOutAmsDetail) SetCheckedOutBy(v string) {
	o.CheckedOutBy = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *AeAssetCheckedOutAmsDetail) GetInitiator() CommonInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret CommonInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetCheckedOutAmsDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *AeAssetCheckedOutAmsDetail) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given CommonInitiator and assigns it to the Initiator field.
func (o *AeAssetCheckedOutAmsDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = &v
}

func (o AeAssetCheckedOutAmsDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetCheckedOutAmsDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction-id"] = o.AuctionId
	toSerialize["asset"] = o.Asset
	toSerialize["updated-at"] = o.UpdatedAt
	toSerialize["checked-out-by"] = o.CheckedOutBy
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *AeAssetCheckedOutAmsDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction-id",
		"asset",
		"updated-at",
		"checked-out-by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetCheckedOutAmsDetail := _AeAssetCheckedOutAmsDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetCheckedOutAmsDetail)

	if err != nil {
		return err
	}

	*o = AeAssetCheckedOutAmsDetail(varAeAssetCheckedOutAmsDetail)

	return err
}

type NullableAeAssetCheckedOutAmsDetail struct {
	value *AeAssetCheckedOutAmsDetail
	isSet bool
}

func (v NullableAeAssetCheckedOutAmsDetail) Get() *AeAssetCheckedOutAmsDetail {
	return v.value
}

func (v *NullableAeAssetCheckedOutAmsDetail) Set(val *AeAssetCheckedOutAmsDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetCheckedOutAmsDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetCheckedOutAmsDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetCheckedOutAmsDetail(val *AeAssetCheckedOutAmsDetail) *NullableAeAssetCheckedOutAmsDetail {
	return &NullableAeAssetCheckedOutAmsDetail{value: val, isSet: true}
}

func (v NullableAeAssetCheckedOutAmsDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetCheckedOutAmsDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


