/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AeAssetDealOfferRejectedDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetDealOfferRejectedDetail{}

// AeAssetDealOfferRejectedDetail Event emitted by the AMS when an offer on a deal is rejected.
type AeAssetDealOfferRejectedDetail struct {
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	Asset CommonAmsAssetPointer `json:"asset"`
	// Unique id for a deal
	DealId *string `json:"deal-id,omitempty"`
	Seller CommonAmsAccountPointer `json:"seller"`
	Buyer CommonAmsAccountPointer `json:"buyer"`
	// The sale date of the deal.
	SaleDate string `json:"sale-date"`
	// The lane the asset was in when deal made.
	Lane string `json:"lane"`
	// The lot the asset was in when deal made.
	Lot string `json:"lot"`
	// The amount the asset sold for.
	Amount *float32 `json:"amount,omitempty"`
	// The updated date time of the deal.
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
	// The reason the offer was rejected
	RejectedReason string `json:"rejected-reason"`
	Initiator *CommonInitiator `json:"initiator,omitempty"`
}

type _AeAssetDealOfferRejectedDetail AeAssetDealOfferRejectedDetail

// NewAeAssetDealOfferRejectedDetail instantiates a new AeAssetDealOfferRejectedDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetDealOfferRejectedDetail(auctionId string, asset CommonAmsAssetPointer, seller CommonAmsAccountPointer, buyer CommonAmsAccountPointer, saleDate string, lane string, lot string, rejectedReason string) *AeAssetDealOfferRejectedDetail {
	this := AeAssetDealOfferRejectedDetail{}
	this.AuctionId = auctionId
	this.Asset = asset
	this.Seller = seller
	this.Buyer = buyer
	this.SaleDate = saleDate
	this.Lane = lane
	this.Lot = lot
	this.RejectedReason = rejectedReason
	return &this
}

// NewAeAssetDealOfferRejectedDetailWithDefaults instantiates a new AeAssetDealOfferRejectedDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetDealOfferRejectedDetailWithDefaults() *AeAssetDealOfferRejectedDetail {
	this := AeAssetDealOfferRejectedDetail{}
	return &this
}

// GetAuctionId returns the AuctionId field value
func (o *AeAssetDealOfferRejectedDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeAssetDealOfferRejectedDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetAsset returns the Asset field value
func (o *AeAssetDealOfferRejectedDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil {
		var ret CommonAmsAssetPointer
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *AeAssetDealOfferRejectedDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = v
}

// GetDealId returns the DealId field value if set, zero value otherwise.
func (o *AeAssetDealOfferRejectedDetail) GetDealId() string {
	if o == nil || IsNil(o.DealId) {
		var ret string
		return ret
	}
	return *o.DealId
}

// GetDealIdOk returns a tuple with the DealId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetDealIdOk() (*string, bool) {
	if o == nil || IsNil(o.DealId) {
		return nil, false
	}
	return o.DealId, true
}

// HasDealId returns a boolean if a field has been set.
func (o *AeAssetDealOfferRejectedDetail) HasDealId() bool {
	if o != nil && !IsNil(o.DealId) {
		return true
	}

	return false
}

// SetDealId gets a reference to the given string and assigns it to the DealId field.
func (o *AeAssetDealOfferRejectedDetail) SetDealId(v string) {
	o.DealId = &v
}

// GetSeller returns the Seller field value
func (o *AeAssetDealOfferRejectedDetail) GetSeller() CommonAmsAccountPointer {
	if o == nil {
		var ret CommonAmsAccountPointer
		return ret
	}

	return o.Seller
}

// GetSellerOk returns a tuple with the Seller field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetSellerOk() (*CommonAmsAccountPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seller, true
}

// SetSeller sets field value
func (o *AeAssetDealOfferRejectedDetail) SetSeller(v CommonAmsAccountPointer) {
	o.Seller = v
}

// GetBuyer returns the Buyer field value
func (o *AeAssetDealOfferRejectedDetail) GetBuyer() CommonAmsAccountPointer {
	if o == nil {
		var ret CommonAmsAccountPointer
		return ret
	}

	return o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetBuyerOk() (*CommonAmsAccountPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buyer, true
}

// SetBuyer sets field value
func (o *AeAssetDealOfferRejectedDetail) SetBuyer(v CommonAmsAccountPointer) {
	o.Buyer = v
}

// GetSaleDate returns the SaleDate field value
func (o *AeAssetDealOfferRejectedDetail) GetSaleDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SaleDate
}

// GetSaleDateOk returns a tuple with the SaleDate field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetSaleDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaleDate, true
}

// SetSaleDate sets field value
func (o *AeAssetDealOfferRejectedDetail) SetSaleDate(v string) {
	o.SaleDate = v
}

// GetLane returns the Lane field value
func (o *AeAssetDealOfferRejectedDetail) GetLane() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lane
}

// GetLaneOk returns a tuple with the Lane field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetLaneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lane, true
}

// SetLane sets field value
func (o *AeAssetDealOfferRejectedDetail) SetLane(v string) {
	o.Lane = v
}

// GetLot returns the Lot field value
func (o *AeAssetDealOfferRejectedDetail) GetLot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lot
}

// GetLotOk returns a tuple with the Lot field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetLotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lot, true
}

// SetLot sets field value
func (o *AeAssetDealOfferRejectedDetail) SetLot(v string) {
	o.Lot = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AeAssetDealOfferRejectedDetail) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AeAssetDealOfferRejectedDetail) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *AeAssetDealOfferRejectedDetail) SetAmount(v float32) {
	o.Amount = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AeAssetDealOfferRejectedDetail) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AeAssetDealOfferRejectedDetail) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AeAssetDealOfferRejectedDetail) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetRejectedReason returns the RejectedReason field value
func (o *AeAssetDealOfferRejectedDetail) GetRejectedReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RejectedReason
}

// GetRejectedReasonOk returns a tuple with the RejectedReason field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetRejectedReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectedReason, true
}

// SetRejectedReason sets field value
func (o *AeAssetDealOfferRejectedDetail) SetRejectedReason(v string) {
	o.RejectedReason = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *AeAssetDealOfferRejectedDetail) GetInitiator() CommonInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret CommonInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealOfferRejectedDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *AeAssetDealOfferRejectedDetail) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given CommonInitiator and assigns it to the Initiator field.
func (o *AeAssetDealOfferRejectedDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = &v
}

func (o AeAssetDealOfferRejectedDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetDealOfferRejectedDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction-id"] = o.AuctionId
	toSerialize["asset"] = o.Asset
	if !IsNil(o.DealId) {
		toSerialize["deal-id"] = o.DealId
	}
	toSerialize["seller"] = o.Seller
	toSerialize["buyer"] = o.Buyer
	toSerialize["sale-date"] = o.SaleDate
	toSerialize["lane"] = o.Lane
	toSerialize["lot"] = o.Lot
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated-at"] = o.UpdatedAt
	}
	toSerialize["rejected-reason"] = o.RejectedReason
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *AeAssetDealOfferRejectedDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction-id",
		"asset",
		"seller",
		"buyer",
		"sale-date",
		"lane",
		"lot",
		"rejected-reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetDealOfferRejectedDetail := _AeAssetDealOfferRejectedDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetDealOfferRejectedDetail)

	if err != nil {
		return err
	}

	*o = AeAssetDealOfferRejectedDetail(varAeAssetDealOfferRejectedDetail)

	return err
}

type NullableAeAssetDealOfferRejectedDetail struct {
	value *AeAssetDealOfferRejectedDetail
	isSet bool
}

func (v NullableAeAssetDealOfferRejectedDetail) Get() *AeAssetDealOfferRejectedDetail {
	return v.value
}

func (v *NullableAeAssetDealOfferRejectedDetail) Set(val *AeAssetDealOfferRejectedDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetDealOfferRejectedDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetDealOfferRejectedDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetDealOfferRejectedDetail(val *AeAssetDealOfferRejectedDetail) *NullableAeAssetDealOfferRejectedDetail {
	return &NullableAeAssetDealOfferRejectedDetail{value: val, isSet: true}
}

func (v NullableAeAssetDealOfferRejectedDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetDealOfferRejectedDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


