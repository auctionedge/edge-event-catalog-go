/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// CommonVehicleDrivetrain The type of drivetrain the asset has.
type CommonVehicleDrivetrain string

// List of common.vehicle.drivetrain
const (
	FWD CommonVehicleDrivetrain = "fwd"
	RWD CommonVehicleDrivetrain = "rwd"
	AWD CommonVehicleDrivetrain = "awd"
	_4WD CommonVehicleDrivetrain = "4wd"
)

// All allowed values of CommonVehicleDrivetrain enum
var AllowedCommonVehicleDrivetrainEnumValues = []CommonVehicleDrivetrain{
	"fwd",
	"rwd",
	"awd",
	"4wd",
}

func (v *CommonVehicleDrivetrain) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommonVehicleDrivetrain(value)
	for _, existing := range AllowedCommonVehicleDrivetrainEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommonVehicleDrivetrain", value)
}

// NewCommonVehicleDrivetrainFromValue returns a pointer to a valid CommonVehicleDrivetrain
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommonVehicleDrivetrainFromValue(v string) (*CommonVehicleDrivetrain, error) {
	ev := CommonVehicleDrivetrain(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommonVehicleDrivetrain: valid values are %v", v, AllowedCommonVehicleDrivetrainEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommonVehicleDrivetrain) IsValid() bool {
	for _, existing := range AllowedCommonVehicleDrivetrainEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to common.vehicle.drivetrain value
func (v CommonVehicleDrivetrain) Ptr() *CommonVehicleDrivetrain {
	return &v
}

type NullableCommonVehicleDrivetrain struct {
	value *CommonVehicleDrivetrain
	isSet bool
}

func (v NullableCommonVehicleDrivetrain) Get() *CommonVehicleDrivetrain {
	return v.value
}

func (v *NullableCommonVehicleDrivetrain) Set(val *CommonVehicleDrivetrain) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonVehicleDrivetrain) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonVehicleDrivetrain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonVehicleDrivetrain(val *CommonVehicleDrivetrain) *NullableCommonVehicleDrivetrain {
	return &NullableCommonVehicleDrivetrain{value: val, isSet: true}
}

func (v NullableCommonVehicleDrivetrain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonVehicleDrivetrain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

