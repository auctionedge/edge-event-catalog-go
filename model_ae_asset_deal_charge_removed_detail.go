/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AeAssetDealChargeRemovedDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetDealChargeRemovedDetail{}

// AeAssetDealChargeRemovedDetail Vehicle charge removed event.
type AeAssetDealChargeRemovedDetail struct {
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	Asset *CommonAmsAssetPointer `json:"asset,omitempty"`
	// Unique id for a deal
	DealId *string `json:"deal-id,omitempty"`
	// Source's unique identifier for asset
	AssetId string `json:"asset-id"`
	// Charge ID.
	ChargeId string `json:"charge-id"`
	Initiator *CommonInitiator `json:"initiator,omitempty"`
}

type _AeAssetDealChargeRemovedDetail AeAssetDealChargeRemovedDetail

// NewAeAssetDealChargeRemovedDetail instantiates a new AeAssetDealChargeRemovedDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetDealChargeRemovedDetail(auctionId string, assetId string, chargeId string) *AeAssetDealChargeRemovedDetail {
	this := AeAssetDealChargeRemovedDetail{}
	this.AuctionId = auctionId
	this.AssetId = assetId
	this.ChargeId = chargeId
	return &this
}

// NewAeAssetDealChargeRemovedDetailWithDefaults instantiates a new AeAssetDealChargeRemovedDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetDealChargeRemovedDetailWithDefaults() *AeAssetDealChargeRemovedDetail {
	this := AeAssetDealChargeRemovedDetail{}
	return &this
}

// GetAuctionId returns the AuctionId field value
func (o *AeAssetDealChargeRemovedDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeRemovedDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeAssetDealChargeRemovedDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *AeAssetDealChargeRemovedDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil || IsNil(o.Asset) {
		var ret CommonAmsAssetPointer
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeRemovedDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *AeAssetDealChargeRemovedDetail) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given CommonAmsAssetPointer and assigns it to the Asset field.
func (o *AeAssetDealChargeRemovedDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = &v
}

// GetDealId returns the DealId field value if set, zero value otherwise.
func (o *AeAssetDealChargeRemovedDetail) GetDealId() string {
	if o == nil || IsNil(o.DealId) {
		var ret string
		return ret
	}
	return *o.DealId
}

// GetDealIdOk returns a tuple with the DealId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeRemovedDetail) GetDealIdOk() (*string, bool) {
	if o == nil || IsNil(o.DealId) {
		return nil, false
	}
	return o.DealId, true
}

// HasDealId returns a boolean if a field has been set.
func (o *AeAssetDealChargeRemovedDetail) HasDealId() bool {
	if o != nil && !IsNil(o.DealId) {
		return true
	}

	return false
}

// SetDealId gets a reference to the given string and assigns it to the DealId field.
func (o *AeAssetDealChargeRemovedDetail) SetDealId(v string) {
	o.DealId = &v
}

// GetAssetId returns the AssetId field value
func (o *AeAssetDealChargeRemovedDetail) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeRemovedDetail) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AeAssetDealChargeRemovedDetail) SetAssetId(v string) {
	o.AssetId = v
}

// GetChargeId returns the ChargeId field value
func (o *AeAssetDealChargeRemovedDetail) GetChargeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeId
}

// GetChargeIdOk returns a tuple with the ChargeId field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeRemovedDetail) GetChargeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeId, true
}

// SetChargeId sets field value
func (o *AeAssetDealChargeRemovedDetail) SetChargeId(v string) {
	o.ChargeId = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *AeAssetDealChargeRemovedDetail) GetInitiator() CommonInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret CommonInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeRemovedDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *AeAssetDealChargeRemovedDetail) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given CommonInitiator and assigns it to the Initiator field.
func (o *AeAssetDealChargeRemovedDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = &v
}

func (o AeAssetDealChargeRemovedDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetDealChargeRemovedDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction-id"] = o.AuctionId
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.DealId) {
		toSerialize["deal-id"] = o.DealId
	}
	toSerialize["asset-id"] = o.AssetId
	toSerialize["charge-id"] = o.ChargeId
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *AeAssetDealChargeRemovedDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction-id",
		"asset-id",
		"charge-id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetDealChargeRemovedDetail := _AeAssetDealChargeRemovedDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetDealChargeRemovedDetail)

	if err != nil {
		return err
	}

	*o = AeAssetDealChargeRemovedDetail(varAeAssetDealChargeRemovedDetail)

	return err
}

type NullableAeAssetDealChargeRemovedDetail struct {
	value *AeAssetDealChargeRemovedDetail
	isSet bool
}

func (v NullableAeAssetDealChargeRemovedDetail) Get() *AeAssetDealChargeRemovedDetail {
	return v.value
}

func (v *NullableAeAssetDealChargeRemovedDetail) Set(val *AeAssetDealChargeRemovedDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetDealChargeRemovedDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetDealChargeRemovedDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetDealChargeRemovedDetail(val *AeAssetDealChargeRemovedDetail) *NullableAeAssetDealChargeRemovedDetail {
	return &NullableAeAssetDealChargeRemovedDetail{value: val, isSet: true}
}

func (v NullableAeAssetDealChargeRemovedDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetDealChargeRemovedDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


