/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
)

// checks if the Valuation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Valuation{}

// Valuation A valuation of the asset
type Valuation struct {
	Amount *CommonCurrency `json:"amount,omitempty"`
	// The source of the valuation
	Source *string `json:"source,omitempty"`
}

// NewValuation instantiates a new Valuation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValuation() *Valuation {
	this := Valuation{}
	return &this
}

// NewValuationWithDefaults instantiates a new Valuation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuationWithDefaults() *Valuation {
	this := Valuation{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Valuation) GetAmount() CommonCurrency {
	if o == nil || IsNil(o.Amount) {
		var ret CommonCurrency
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Valuation) GetAmountOk() (*CommonCurrency, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Valuation) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CommonCurrency and assigns it to the Amount field.
func (o *Valuation) SetAmount(v CommonCurrency) {
	o.Amount = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Valuation) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Valuation) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Valuation) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Valuation) SetSource(v string) {
	o.Source = &v
}

func (o Valuation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Valuation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableValuation struct {
	value *Valuation
	isSet bool
}

func (v NullableValuation) Get() *Valuation {
	return v.value
}

func (v *NullableValuation) Set(val *Valuation) {
	v.value = val
	v.isSet = true
}

func (v NullableValuation) IsSet() bool {
	return v.isSet
}

func (v *NullableValuation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuation(val *Valuation) *NullableValuation {
	return &NullableValuation{value: val, isSet: true}
}

func (v NullableValuation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


