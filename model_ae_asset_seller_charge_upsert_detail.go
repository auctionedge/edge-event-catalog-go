/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AeAssetSellerChargeUpsertDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetSellerChargeUpsertDetail{}

// AeAssetSellerChargeUpsertDetail An event denoting an insert or update of a charge on a seller's asset.
type AeAssetSellerChargeUpsertDetail struct {
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	Asset *CommonAmsAssetPointer `json:"asset,omitempty"`
	// Source's unique identifier for asset
	AssetId string `json:"asset-id"`
	// The Vehicle Identification Number(VIN) of the asset.
	Vin string `json:"vin"`
	// The stock number of the asset.
	Stock string `json:"stock"`
	Seller CommonAmsAccountPointer `json:"seller"`
	// Unique identifier referencing the add request event that created the charge
	AddRequestReferenceId NullableString `json:"add-request-reference-id,omitempty"`
	Charge AeAssetSellerChargeUpsertDetailCharge `json:"charge"`
	Initiator *CommonInitiator `json:"initiator,omitempty"`
}

type _AeAssetSellerChargeUpsertDetail AeAssetSellerChargeUpsertDetail

// NewAeAssetSellerChargeUpsertDetail instantiates a new AeAssetSellerChargeUpsertDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetSellerChargeUpsertDetail(auctionId string, assetId string, vin string, stock string, seller CommonAmsAccountPointer, charge AeAssetSellerChargeUpsertDetailCharge) *AeAssetSellerChargeUpsertDetail {
	this := AeAssetSellerChargeUpsertDetail{}
	this.AuctionId = auctionId
	this.AssetId = assetId
	this.Vin = vin
	this.Stock = stock
	this.Seller = seller
	this.Charge = charge
	return &this
}

// NewAeAssetSellerChargeUpsertDetailWithDefaults instantiates a new AeAssetSellerChargeUpsertDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetSellerChargeUpsertDetailWithDefaults() *AeAssetSellerChargeUpsertDetail {
	this := AeAssetSellerChargeUpsertDetail{}
	return &this
}

// GetAuctionId returns the AuctionId field value
func (o *AeAssetSellerChargeUpsertDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeAssetSellerChargeUpsertDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *AeAssetSellerChargeUpsertDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil || IsNil(o.Asset) {
		var ret CommonAmsAssetPointer
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *AeAssetSellerChargeUpsertDetail) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given CommonAmsAssetPointer and assigns it to the Asset field.
func (o *AeAssetSellerChargeUpsertDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = &v
}

// GetAssetId returns the AssetId field value
func (o *AeAssetSellerChargeUpsertDetail) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AeAssetSellerChargeUpsertDetail) SetAssetId(v string) {
	o.AssetId = v
}

// GetVin returns the Vin field value
func (o *AeAssetSellerChargeUpsertDetail) GetVin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vin
}

// GetVinOk returns a tuple with the Vin field value
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetVinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vin, true
}

// SetVin sets field value
func (o *AeAssetSellerChargeUpsertDetail) SetVin(v string) {
	o.Vin = v
}

// GetStock returns the Stock field value
func (o *AeAssetSellerChargeUpsertDetail) GetStock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stock
}

// GetStockOk returns a tuple with the Stock field value
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetStockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stock, true
}

// SetStock sets field value
func (o *AeAssetSellerChargeUpsertDetail) SetStock(v string) {
	o.Stock = v
}

// GetSeller returns the Seller field value
func (o *AeAssetSellerChargeUpsertDetail) GetSeller() CommonAmsAccountPointer {
	if o == nil {
		var ret CommonAmsAccountPointer
		return ret
	}

	return o.Seller
}

// GetSellerOk returns a tuple with the Seller field value
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetSellerOk() (*CommonAmsAccountPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seller, true
}

// SetSeller sets field value
func (o *AeAssetSellerChargeUpsertDetail) SetSeller(v CommonAmsAccountPointer) {
	o.Seller = v
}

// GetAddRequestReferenceId returns the AddRequestReferenceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AeAssetSellerChargeUpsertDetail) GetAddRequestReferenceId() string {
	if o == nil || IsNil(o.AddRequestReferenceId.Get()) {
		var ret string
		return ret
	}
	return *o.AddRequestReferenceId.Get()
}

// GetAddRequestReferenceIdOk returns a tuple with the AddRequestReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AeAssetSellerChargeUpsertDetail) GetAddRequestReferenceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddRequestReferenceId.Get(), o.AddRequestReferenceId.IsSet()
}

// HasAddRequestReferenceId returns a boolean if a field has been set.
func (o *AeAssetSellerChargeUpsertDetail) HasAddRequestReferenceId() bool {
	if o != nil && o.AddRequestReferenceId.IsSet() {
		return true
	}

	return false
}

// SetAddRequestReferenceId gets a reference to the given NullableString and assigns it to the AddRequestReferenceId field.
func (o *AeAssetSellerChargeUpsertDetail) SetAddRequestReferenceId(v string) {
	o.AddRequestReferenceId.Set(&v)
}
// SetAddRequestReferenceIdNil sets the value for AddRequestReferenceId to be an explicit nil
func (o *AeAssetSellerChargeUpsertDetail) SetAddRequestReferenceIdNil() {
	o.AddRequestReferenceId.Set(nil)
}

// UnsetAddRequestReferenceId ensures that no value is present for AddRequestReferenceId, not even an explicit nil
func (o *AeAssetSellerChargeUpsertDetail) UnsetAddRequestReferenceId() {
	o.AddRequestReferenceId.Unset()
}

// GetCharge returns the Charge field value
func (o *AeAssetSellerChargeUpsertDetail) GetCharge() AeAssetSellerChargeUpsertDetailCharge {
	if o == nil {
		var ret AeAssetSellerChargeUpsertDetailCharge
		return ret
	}

	return o.Charge
}

// GetChargeOk returns a tuple with the Charge field value
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetChargeOk() (*AeAssetSellerChargeUpsertDetailCharge, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Charge, true
}

// SetCharge sets field value
func (o *AeAssetSellerChargeUpsertDetail) SetCharge(v AeAssetSellerChargeUpsertDetailCharge) {
	o.Charge = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *AeAssetSellerChargeUpsertDetail) GetInitiator() CommonInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret CommonInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetSellerChargeUpsertDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *AeAssetSellerChargeUpsertDetail) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given CommonInitiator and assigns it to the Initiator field.
func (o *AeAssetSellerChargeUpsertDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = &v
}

func (o AeAssetSellerChargeUpsertDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetSellerChargeUpsertDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction-id"] = o.AuctionId
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	toSerialize["asset-id"] = o.AssetId
	toSerialize["vin"] = o.Vin
	toSerialize["stock"] = o.Stock
	toSerialize["seller"] = o.Seller
	if o.AddRequestReferenceId.IsSet() {
		toSerialize["add-request-reference-id"] = o.AddRequestReferenceId.Get()
	}
	toSerialize["charge"] = o.Charge
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *AeAssetSellerChargeUpsertDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction-id",
		"asset-id",
		"vin",
		"stock",
		"seller",
		"charge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetSellerChargeUpsertDetail := _AeAssetSellerChargeUpsertDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetSellerChargeUpsertDetail)

	if err != nil {
		return err
	}

	*o = AeAssetSellerChargeUpsertDetail(varAeAssetSellerChargeUpsertDetail)

	return err
}

type NullableAeAssetSellerChargeUpsertDetail struct {
	value *AeAssetSellerChargeUpsertDetail
	isSet bool
}

func (v NullableAeAssetSellerChargeUpsertDetail) Get() *AeAssetSellerChargeUpsertDetail {
	return v.value
}

func (v *NullableAeAssetSellerChargeUpsertDetail) Set(val *AeAssetSellerChargeUpsertDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetSellerChargeUpsertDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetSellerChargeUpsertDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetSellerChargeUpsertDetail(val *AeAssetSellerChargeUpsertDetail) *NullableAeAssetSellerChargeUpsertDetail {
	return &NullableAeAssetSellerChargeUpsertDetail{value: val, isSet: true}
}

func (v NullableAeAssetSellerChargeUpsertDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetSellerChargeUpsertDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


