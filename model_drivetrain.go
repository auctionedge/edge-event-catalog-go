/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// Drivetrain The type of drivetrain the asset has.
type Drivetrain string

// List of drivetrain
const (
	FWD Drivetrain = "fwd"
	RWD Drivetrain = "rwd"
	AWD Drivetrain = "awd"
	_4WD Drivetrain = "4wd"
)

// All allowed values of Drivetrain enum
var AllowedDrivetrainEnumValues = []Drivetrain{
	"fwd",
	"rwd",
	"awd",
	"4wd",
}

func (v *Drivetrain) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Drivetrain(value)
	for _, existing := range AllowedDrivetrainEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Drivetrain", value)
}

// NewDrivetrainFromValue returns a pointer to a valid Drivetrain
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDrivetrainFromValue(v string) (*Drivetrain, error) {
	ev := Drivetrain(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Drivetrain: valid values are %v", v, AllowedDrivetrainEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Drivetrain) IsValid() bool {
	for _, existing := range AllowedDrivetrainEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to drivetrain value
func (v Drivetrain) Ptr() *Drivetrain {
	return &v
}

type NullableDrivetrain struct {
	value *Drivetrain
	isSet bool
}

func (v NullableDrivetrain) Get() *Drivetrain {
	return v.value
}

func (v *NullableDrivetrain) Set(val *Drivetrain) {
	v.value = val
	v.isSet = true
}

func (v NullableDrivetrain) IsSet() bool {
	return v.isSet
}

func (v *NullableDrivetrain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrivetrain(val *Drivetrain) *NullableDrivetrain {
	return &NullableDrivetrain{value: val, isSet: true}
}

func (v NullableDrivetrain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrivetrain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

