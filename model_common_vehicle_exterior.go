/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
)

// checks if the CommonVehicleExterior type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonVehicleExterior{}

// CommonVehicleExterior Attributes defining the exterior of the asset.
type CommonVehicleExterior struct {
	// The color for the bottom half of the asset.
	BottomColor *string `json:"bottom-color,omitempty"`
	// The color for the top half of the asset.
	TopColor *string `json:"top-color,omitempty"`
	// A description of the type of roof the asset has
	RoofType *string `json:"roof-type,omitempty"`
}

// NewCommonVehicleExterior instantiates a new CommonVehicleExterior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonVehicleExterior() *CommonVehicleExterior {
	this := CommonVehicleExterior{}
	return &this
}

// NewCommonVehicleExteriorWithDefaults instantiates a new CommonVehicleExterior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonVehicleExteriorWithDefaults() *CommonVehicleExterior {
	this := CommonVehicleExterior{}
	return &this
}

// GetBottomColor returns the BottomColor field value if set, zero value otherwise.
func (o *CommonVehicleExterior) GetBottomColor() string {
	if o == nil || IsNil(o.BottomColor) {
		var ret string
		return ret
	}
	return *o.BottomColor
}

// GetBottomColorOk returns a tuple with the BottomColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleExterior) GetBottomColorOk() (*string, bool) {
	if o == nil || IsNil(o.BottomColor) {
		return nil, false
	}
	return o.BottomColor, true
}

// HasBottomColor returns a boolean if a field has been set.
func (o *CommonVehicleExterior) HasBottomColor() bool {
	if o != nil && !IsNil(o.BottomColor) {
		return true
	}

	return false
}

// SetBottomColor gets a reference to the given string and assigns it to the BottomColor field.
func (o *CommonVehicleExterior) SetBottomColor(v string) {
	o.BottomColor = &v
}

// GetTopColor returns the TopColor field value if set, zero value otherwise.
func (o *CommonVehicleExterior) GetTopColor() string {
	if o == nil || IsNil(o.TopColor) {
		var ret string
		return ret
	}
	return *o.TopColor
}

// GetTopColorOk returns a tuple with the TopColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleExterior) GetTopColorOk() (*string, bool) {
	if o == nil || IsNil(o.TopColor) {
		return nil, false
	}
	return o.TopColor, true
}

// HasTopColor returns a boolean if a field has been set.
func (o *CommonVehicleExterior) HasTopColor() bool {
	if o != nil && !IsNil(o.TopColor) {
		return true
	}

	return false
}

// SetTopColor gets a reference to the given string and assigns it to the TopColor field.
func (o *CommonVehicleExterior) SetTopColor(v string) {
	o.TopColor = &v
}

// GetRoofType returns the RoofType field value if set, zero value otherwise.
func (o *CommonVehicleExterior) GetRoofType() string {
	if o == nil || IsNil(o.RoofType) {
		var ret string
		return ret
	}
	return *o.RoofType
}

// GetRoofTypeOk returns a tuple with the RoofType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleExterior) GetRoofTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoofType) {
		return nil, false
	}
	return o.RoofType, true
}

// HasRoofType returns a boolean if a field has been set.
func (o *CommonVehicleExterior) HasRoofType() bool {
	if o != nil && !IsNil(o.RoofType) {
		return true
	}

	return false
}

// SetRoofType gets a reference to the given string and assigns it to the RoofType field.
func (o *CommonVehicleExterior) SetRoofType(v string) {
	o.RoofType = &v
}

func (o CommonVehicleExterior) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonVehicleExterior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BottomColor) {
		toSerialize["bottom-color"] = o.BottomColor
	}
	if !IsNil(o.TopColor) {
		toSerialize["top-color"] = o.TopColor
	}
	if !IsNil(o.RoofType) {
		toSerialize["roof-type"] = o.RoofType
	}
	return toSerialize, nil
}

type NullableCommonVehicleExterior struct {
	value *CommonVehicleExterior
	isSet bool
}

func (v NullableCommonVehicleExterior) Get() *CommonVehicleExterior {
	return v.value
}

func (v *NullableCommonVehicleExterior) Set(val *CommonVehicleExterior) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonVehicleExterior) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonVehicleExterior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonVehicleExterior(val *CommonVehicleExterior) *NullableCommonVehicleExterior {
	return &NullableCommonVehicleExterior{value: val, isSet: true}
}

func (v NullableCommonVehicleExterior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonVehicleExterior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


