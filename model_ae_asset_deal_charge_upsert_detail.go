/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AeAssetDealChargeUpsertDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetDealChargeUpsertDetail{}

// AeAssetDealChargeUpsertDetail Vehicle charge upsert event.
type AeAssetDealChargeUpsertDetail struct {
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	Asset *CommonAmsAssetPointer `json:"asset,omitempty"`
	// Unique id for a deal
	DealId *string `json:"deal-id,omitempty"`
	// Source's unique identifier for asset
	AssetId string `json:"asset-id"`
	// The stock number of the asset.
	Stock string `json:"stock"`
	// The Vehicle Identification Number(VIN) of the asset.
	Vin string `json:"vin"`
	Account CommonAmsAccountPointer `json:"account"`
	Initiator *CommonInitiator `json:"initiator,omitempty"`
	Charge AeAssetDealChargeUpsertDetailCharge `json:"charge"`
}

type _AeAssetDealChargeUpsertDetail AeAssetDealChargeUpsertDetail

// NewAeAssetDealChargeUpsertDetail instantiates a new AeAssetDealChargeUpsertDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetDealChargeUpsertDetail(auctionId string, assetId string, stock string, vin string, account CommonAmsAccountPointer, charge AeAssetDealChargeUpsertDetailCharge) *AeAssetDealChargeUpsertDetail {
	this := AeAssetDealChargeUpsertDetail{}
	this.AuctionId = auctionId
	this.AssetId = assetId
	this.Stock = stock
	this.Vin = vin
	this.Account = account
	this.Charge = charge
	return &this
}

// NewAeAssetDealChargeUpsertDetailWithDefaults instantiates a new AeAssetDealChargeUpsertDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetDealChargeUpsertDetailWithDefaults() *AeAssetDealChargeUpsertDetail {
	this := AeAssetDealChargeUpsertDetail{}
	return &this
}

// GetAuctionId returns the AuctionId field value
func (o *AeAssetDealChargeUpsertDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeAssetDealChargeUpsertDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *AeAssetDealChargeUpsertDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil || IsNil(o.Asset) {
		var ret CommonAmsAssetPointer
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *AeAssetDealChargeUpsertDetail) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given CommonAmsAssetPointer and assigns it to the Asset field.
func (o *AeAssetDealChargeUpsertDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = &v
}

// GetDealId returns the DealId field value if set, zero value otherwise.
func (o *AeAssetDealChargeUpsertDetail) GetDealId() string {
	if o == nil || IsNil(o.DealId) {
		var ret string
		return ret
	}
	return *o.DealId
}

// GetDealIdOk returns a tuple with the DealId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetDealIdOk() (*string, bool) {
	if o == nil || IsNil(o.DealId) {
		return nil, false
	}
	return o.DealId, true
}

// HasDealId returns a boolean if a field has been set.
func (o *AeAssetDealChargeUpsertDetail) HasDealId() bool {
	if o != nil && !IsNil(o.DealId) {
		return true
	}

	return false
}

// SetDealId gets a reference to the given string and assigns it to the DealId field.
func (o *AeAssetDealChargeUpsertDetail) SetDealId(v string) {
	o.DealId = &v
}

// GetAssetId returns the AssetId field value
func (o *AeAssetDealChargeUpsertDetail) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AeAssetDealChargeUpsertDetail) SetAssetId(v string) {
	o.AssetId = v
}

// GetStock returns the Stock field value
func (o *AeAssetDealChargeUpsertDetail) GetStock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stock
}

// GetStockOk returns a tuple with the Stock field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetStockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stock, true
}

// SetStock sets field value
func (o *AeAssetDealChargeUpsertDetail) SetStock(v string) {
	o.Stock = v
}

// GetVin returns the Vin field value
func (o *AeAssetDealChargeUpsertDetail) GetVin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vin
}

// GetVinOk returns a tuple with the Vin field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetVinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vin, true
}

// SetVin sets field value
func (o *AeAssetDealChargeUpsertDetail) SetVin(v string) {
	o.Vin = v
}

// GetAccount returns the Account field value
func (o *AeAssetDealChargeUpsertDetail) GetAccount() CommonAmsAccountPointer {
	if o == nil {
		var ret CommonAmsAccountPointer
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetAccountOk() (*CommonAmsAccountPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *AeAssetDealChargeUpsertDetail) SetAccount(v CommonAmsAccountPointer) {
	o.Account = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *AeAssetDealChargeUpsertDetail) GetInitiator() CommonInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret CommonInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *AeAssetDealChargeUpsertDetail) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given CommonInitiator and assigns it to the Initiator field.
func (o *AeAssetDealChargeUpsertDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = &v
}

// GetCharge returns the Charge field value
func (o *AeAssetDealChargeUpsertDetail) GetCharge() AeAssetDealChargeUpsertDetailCharge {
	if o == nil {
		var ret AeAssetDealChargeUpsertDetailCharge
		return ret
	}

	return o.Charge
}

// GetChargeOk returns a tuple with the Charge field value
// and a boolean to check if the value has been set.
func (o *AeAssetDealChargeUpsertDetail) GetChargeOk() (*AeAssetDealChargeUpsertDetailCharge, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Charge, true
}

// SetCharge sets field value
func (o *AeAssetDealChargeUpsertDetail) SetCharge(v AeAssetDealChargeUpsertDetailCharge) {
	o.Charge = v
}

func (o AeAssetDealChargeUpsertDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetDealChargeUpsertDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction-id"] = o.AuctionId
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.DealId) {
		toSerialize["deal-id"] = o.DealId
	}
	toSerialize["asset-id"] = o.AssetId
	toSerialize["stock"] = o.Stock
	toSerialize["vin"] = o.Vin
	toSerialize["account"] = o.Account
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	toSerialize["charge"] = o.Charge
	return toSerialize, nil
}

func (o *AeAssetDealChargeUpsertDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction-id",
		"asset-id",
		"stock",
		"vin",
		"account",
		"charge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetDealChargeUpsertDetail := _AeAssetDealChargeUpsertDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetDealChargeUpsertDetail)

	if err != nil {
		return err
	}

	*o = AeAssetDealChargeUpsertDetail(varAeAssetDealChargeUpsertDetail)

	return err
}

type NullableAeAssetDealChargeUpsertDetail struct {
	value *AeAssetDealChargeUpsertDetail
	isSet bool
}

func (v NullableAeAssetDealChargeUpsertDetail) Get() *AeAssetDealChargeUpsertDetail {
	return v.value
}

func (v *NullableAeAssetDealChargeUpsertDetail) Set(val *AeAssetDealChargeUpsertDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetDealChargeUpsertDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetDealChargeUpsertDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetDealChargeUpsertDetail(val *AeAssetDealChargeUpsertDetail) *NullableAeAssetDealChargeUpsertDetail {
	return &NullableAeAssetDealChargeUpsertDetail{value: val, isSet: true}
}

func (v NullableAeAssetDealChargeUpsertDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetDealChargeUpsertDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


