/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// checks if the AeAssetGatepassBuyerReleasableDetailAmsSaleListing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetGatepassBuyerReleasableDetailAmsSaleListing{}

// AeAssetGatepassBuyerReleasableDetailAmsSaleListing The sale listing information of the asset at time of event
type AeAssetGatepassBuyerReleasableDetailAmsSaleListing struct {
	// The date that the asset has been registered for a sale on
	SaleDate string `json:"sale-date"`
	// The lane the asset has been assigned to for the sale
	Lane string `json:"lane"`
	// The individual id of the asset within the lane
	Lot string `json:"lot"`
	// Auction announcements about the asset
	Announcements string `json:"announcements"`
	AdditionalProperties map[string]interface{}
}

type _AeAssetGatepassBuyerReleasableDetailAmsSaleListing AeAssetGatepassBuyerReleasableDetailAmsSaleListing

// NewAeAssetGatepassBuyerReleasableDetailAmsSaleListing instantiates a new AeAssetGatepassBuyerReleasableDetailAmsSaleListing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetGatepassBuyerReleasableDetailAmsSaleListing(saleDate string, lane string, lot string, announcements string) *AeAssetGatepassBuyerReleasableDetailAmsSaleListing {
	this := AeAssetGatepassBuyerReleasableDetailAmsSaleListing{}
	this.SaleDate = saleDate
	this.Lane = lane
	this.Lot = lot
	this.Announcements = announcements
	return &this
}

// NewAeAssetGatepassBuyerReleasableDetailAmsSaleListingWithDefaults instantiates a new AeAssetGatepassBuyerReleasableDetailAmsSaleListing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetGatepassBuyerReleasableDetailAmsSaleListingWithDefaults() *AeAssetGatepassBuyerReleasableDetailAmsSaleListing {
	this := AeAssetGatepassBuyerReleasableDetailAmsSaleListing{}
	return &this
}

// GetSaleDate returns the SaleDate field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetSaleDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SaleDate
}

// GetSaleDateOk returns a tuple with the SaleDate field value
// and a boolean to check if the value has been set.
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetSaleDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaleDate, true
}

// SetSaleDate sets field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) SetSaleDate(v string) {
	o.SaleDate = v
}

// GetLane returns the Lane field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetLane() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lane
}

// GetLaneOk returns a tuple with the Lane field value
// and a boolean to check if the value has been set.
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetLaneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lane, true
}

// SetLane sets field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) SetLane(v string) {
	o.Lane = v
}

// GetLot returns the Lot field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetLot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lot
}

// GetLotOk returns a tuple with the Lot field value
// and a boolean to check if the value has been set.
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetLotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lot, true
}

// SetLot sets field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) SetLot(v string) {
	o.Lot = v
}

// GetAnnouncements returns the Announcements field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetAnnouncements() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Announcements
}

// GetAnnouncementsOk returns a tuple with the Announcements field value
// and a boolean to check if the value has been set.
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) GetAnnouncementsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Announcements, true
}

// SetAnnouncements sets field value
func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) SetAnnouncements(v string) {
	o.Announcements = v
}

func (o AeAssetGatepassBuyerReleasableDetailAmsSaleListing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetGatepassBuyerReleasableDetailAmsSaleListing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sale-date"] = o.SaleDate
	toSerialize["lane"] = o.Lane
	toSerialize["lot"] = o.Lot
	toSerialize["announcements"] = o.Announcements

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sale-date",
		"lane",
		"lot",
		"announcements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetGatepassBuyerReleasableDetailAmsSaleListing := _AeAssetGatepassBuyerReleasableDetailAmsSaleListing{}

	err = json.Unmarshal(data, &varAeAssetGatepassBuyerReleasableDetailAmsSaleListing)

	if err != nil {
		return err
	}

	*o = AeAssetGatepassBuyerReleasableDetailAmsSaleListing(varAeAssetGatepassBuyerReleasableDetailAmsSaleListing)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sale-date")
		delete(additionalProperties, "lane")
		delete(additionalProperties, "lot")
		delete(additionalProperties, "announcements")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing struct {
	value *AeAssetGatepassBuyerReleasableDetailAmsSaleListing
	isSet bool
}

func (v NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing) Get() *AeAssetGatepassBuyerReleasableDetailAmsSaleListing {
	return v.value
}

func (v *NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing) Set(val *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing(val *AeAssetGatepassBuyerReleasableDetailAmsSaleListing) *NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing {
	return &NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing{value: val, isSet: true}
}

func (v NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetGatepassBuyerReleasableDetailAmsSaleListing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


