/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// LabelType The type of label the user requested
type LabelType string

// List of label-type
const (
	DEFAULT LabelType = "default"
	INVENTORY LabelType = "inventory"
	PHOTO_BOOTH LabelType = "photo-booth"
)

// All allowed values of LabelType enum
var AllowedLabelTypeEnumValues = []LabelType{
	"default",
	"inventory",
	"photo-booth",
}

func (v *LabelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LabelType(value)
	for _, existing := range AllowedLabelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LabelType", value)
}

// NewLabelTypeFromValue returns a pointer to a valid LabelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLabelTypeFromValue(v string) (*LabelType, error) {
	ev := LabelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LabelType: valid values are %v", v, AllowedLabelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LabelType) IsValid() bool {
	for _, existing := range AllowedLabelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to label-type value
func (v LabelType) Ptr() *LabelType {
	return &v
}

type NullableLabelType struct {
	value *LabelType
	isSet bool
}

func (v NullableLabelType) Get() *LabelType {
	return v.value
}

func (v *NullableLabelType) Set(val *LabelType) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelType) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelType(val *LabelType) *NullableLabelType {
	return &NullableLabelType{value: val, isSet: true}
}

func (v NullableLabelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

