/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AeAssetLabelRequestedDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeAssetLabelRequestedDetail{}

// AeAssetLabelRequestedDetail A request has been made to generate an asset label
type AeAssetLabelRequestedDetail struct {
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	// Unique identifier for the request
	RequestId string `json:"request-id"`
	Asset *CommonAmsAssetPointer `json:"asset,omitempty"`
	// Source's unique identifier for asset
	AssetId string `json:"asset-id"`
	// The stock number of the asset.
	Stock string `json:"stock"`
	// The Vehicle Identification Number(VIN) of the asset.
	Vin string `json:"vin"`
	// Number of copies of the label to generate for asset
	Quantity float32 `json:"quantity"`
	LabelType LabelType `json:"label-type"`
	Initiator *CommonInitiator `json:"initiator,omitempty"`
}

type _AeAssetLabelRequestedDetail AeAssetLabelRequestedDetail

// NewAeAssetLabelRequestedDetail instantiates a new AeAssetLabelRequestedDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeAssetLabelRequestedDetail(auctionId string, requestId string, assetId string, stock string, vin string, quantity float32, labelType LabelType) *AeAssetLabelRequestedDetail {
	this := AeAssetLabelRequestedDetail{}
	this.AuctionId = auctionId
	this.RequestId = requestId
	this.AssetId = assetId
	this.Stock = stock
	this.Vin = vin
	this.Quantity = quantity
	this.LabelType = labelType
	return &this
}

// NewAeAssetLabelRequestedDetailWithDefaults instantiates a new AeAssetLabelRequestedDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeAssetLabelRequestedDetailWithDefaults() *AeAssetLabelRequestedDetail {
	this := AeAssetLabelRequestedDetail{}
	return &this
}

// GetAuctionId returns the AuctionId field value
func (o *AeAssetLabelRequestedDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeAssetLabelRequestedDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetRequestId returns the RequestId field value
func (o *AeAssetLabelRequestedDetail) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *AeAssetLabelRequestedDetail) SetRequestId(v string) {
	o.RequestId = v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *AeAssetLabelRequestedDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil || IsNil(o.Asset) {
		var ret CommonAmsAssetPointer
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *AeAssetLabelRequestedDetail) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given CommonAmsAssetPointer and assigns it to the Asset field.
func (o *AeAssetLabelRequestedDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = &v
}

// GetAssetId returns the AssetId field value
func (o *AeAssetLabelRequestedDetail) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AeAssetLabelRequestedDetail) SetAssetId(v string) {
	o.AssetId = v
}

// GetStock returns the Stock field value
func (o *AeAssetLabelRequestedDetail) GetStock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stock
}

// GetStockOk returns a tuple with the Stock field value
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetStockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stock, true
}

// SetStock sets field value
func (o *AeAssetLabelRequestedDetail) SetStock(v string) {
	o.Stock = v
}

// GetVin returns the Vin field value
func (o *AeAssetLabelRequestedDetail) GetVin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vin
}

// GetVinOk returns a tuple with the Vin field value
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetVinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vin, true
}

// SetVin sets field value
func (o *AeAssetLabelRequestedDetail) SetVin(v string) {
	o.Vin = v
}

// GetQuantity returns the Quantity field value
func (o *AeAssetLabelRequestedDetail) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *AeAssetLabelRequestedDetail) SetQuantity(v float32) {
	o.Quantity = v
}

// GetLabelType returns the LabelType field value
func (o *AeAssetLabelRequestedDetail) GetLabelType() LabelType {
	if o == nil {
		var ret LabelType
		return ret
	}

	return o.LabelType
}

// GetLabelTypeOk returns a tuple with the LabelType field value
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetLabelTypeOk() (*LabelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelType, true
}

// SetLabelType sets field value
func (o *AeAssetLabelRequestedDetail) SetLabelType(v LabelType) {
	o.LabelType = v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *AeAssetLabelRequestedDetail) GetInitiator() CommonInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret CommonInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeAssetLabelRequestedDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *AeAssetLabelRequestedDetail) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given CommonInitiator and assigns it to the Initiator field.
func (o *AeAssetLabelRequestedDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = &v
}

func (o AeAssetLabelRequestedDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeAssetLabelRequestedDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auction-id"] = o.AuctionId
	toSerialize["request-id"] = o.RequestId
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	toSerialize["asset-id"] = o.AssetId
	toSerialize["stock"] = o.Stock
	toSerialize["vin"] = o.Vin
	toSerialize["quantity"] = o.Quantity
	toSerialize["label-type"] = o.LabelType
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	return toSerialize, nil
}

func (o *AeAssetLabelRequestedDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auction-id",
		"request-id",
		"asset-id",
		"stock",
		"vin",
		"quantity",
		"label-type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeAssetLabelRequestedDetail := _AeAssetLabelRequestedDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeAssetLabelRequestedDetail)

	if err != nil {
		return err
	}

	*o = AeAssetLabelRequestedDetail(varAeAssetLabelRequestedDetail)

	return err
}

type NullableAeAssetLabelRequestedDetail struct {
	value *AeAssetLabelRequestedDetail
	isSet bool
}

func (v NullableAeAssetLabelRequestedDetail) Get() *AeAssetLabelRequestedDetail {
	return v.value
}

func (v *NullableAeAssetLabelRequestedDetail) Set(val *AeAssetLabelRequestedDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeAssetLabelRequestedDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeAssetLabelRequestedDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeAssetLabelRequestedDetail(val *AeAssetLabelRequestedDetail) *NullableAeAssetLabelRequestedDetail {
	return &NullableAeAssetLabelRequestedDetail{value: val, isSet: true}
}

func (v NullableAeAssetLabelRequestedDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeAssetLabelRequestedDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


