/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// checks if the AeServiceOrderPlacedDetailService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeServiceOrderPlacedDetailService{}

// AeServiceOrderPlacedDetailService struct for AeServiceOrderPlacedDetailService
type AeServiceOrderPlacedDetailService struct {
	Class ServiceClassEnum `json:"class"`
	// Service code
	Code string `json:"code"`
	AdditionalProperties map[string]interface{}
}

type _AeServiceOrderPlacedDetailService AeServiceOrderPlacedDetailService

// NewAeServiceOrderPlacedDetailService instantiates a new AeServiceOrderPlacedDetailService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeServiceOrderPlacedDetailService(class ServiceClassEnum, code string) *AeServiceOrderPlacedDetailService {
	this := AeServiceOrderPlacedDetailService{}
	this.Class = class
	this.Code = code
	return &this
}

// NewAeServiceOrderPlacedDetailServiceWithDefaults instantiates a new AeServiceOrderPlacedDetailService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeServiceOrderPlacedDetailServiceWithDefaults() *AeServiceOrderPlacedDetailService {
	this := AeServiceOrderPlacedDetailService{}
	return &this
}

// GetClass returns the Class field value
func (o *AeServiceOrderPlacedDetailService) GetClass() ServiceClassEnum {
	if o == nil {
		var ret ServiceClassEnum
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *AeServiceOrderPlacedDetailService) GetClassOk() (*ServiceClassEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *AeServiceOrderPlacedDetailService) SetClass(v ServiceClassEnum) {
	o.Class = v
}

// GetCode returns the Code field value
func (o *AeServiceOrderPlacedDetailService) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AeServiceOrderPlacedDetailService) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AeServiceOrderPlacedDetailService) SetCode(v string) {
	o.Code = v
}

func (o AeServiceOrderPlacedDetailService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeServiceOrderPlacedDetailService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["class"] = o.Class
	toSerialize["code"] = o.Code

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AeServiceOrderPlacedDetailService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"class",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeServiceOrderPlacedDetailService := _AeServiceOrderPlacedDetailService{}

	err = json.Unmarshal(data, &varAeServiceOrderPlacedDetailService)

	if err != nil {
		return err
	}

	*o = AeServiceOrderPlacedDetailService(varAeServiceOrderPlacedDetailService)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "class")
		delete(additionalProperties, "code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAeServiceOrderPlacedDetailService struct {
	value *AeServiceOrderPlacedDetailService
	isSet bool
}

func (v NullableAeServiceOrderPlacedDetailService) Get() *AeServiceOrderPlacedDetailService {
	return v.value
}

func (v *NullableAeServiceOrderPlacedDetailService) Set(val *AeServiceOrderPlacedDetailService) {
	v.value = val
	v.isSet = true
}

func (v NullableAeServiceOrderPlacedDetailService) IsSet() bool {
	return v.isSet
}

func (v *NullableAeServiceOrderPlacedDetailService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeServiceOrderPlacedDetailService(val *AeServiceOrderPlacedDetailService) *NullableAeServiceOrderPlacedDetailService {
	return &NullableAeServiceOrderPlacedDetailService{value: val, isSet: true}
}

func (v NullableAeServiceOrderPlacedDetailService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeServiceOrderPlacedDetailService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


