/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AeDealUpsertedDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AeDealUpsertedDetail{}

// AeDealUpsertedDetail Deal entity
type AeDealUpsertedDetail struct {
	// Unique id for a deal
	Id string `json:"id"`
	// Auction Edge unique identifier for an auction.
	AuctionId string `json:"auction-id"`
	Asset CommonAmsAssetPointer `json:"asset"`
	// Source's unique identifier for account
	Seller string `json:"seller"`
	// The representative id an AMS account
	SellerAgent *string `json:"seller-agent,omitempty"`
	// Uniquie identifier for a sale listing.
	SaleListing string `json:"sale-listing"`
	// The time in ISO-8601 formatted at which the asset was sold
	SoldAt time.Time `json:"sold-at"`
	// Source's unique identifier for account
	Buyer string `json:"buyer"`
	// The representative id an AMS account
	BuyerAgent *string `json:"buyer-agent,omitempty"`
	Amount CommonCurrency `json:"amount"`
	// The type of sale the deal was made in.
	SoldMethod *string `json:"sold-method,omitempty"`
	// The time in ISO-8601 format in UTC timezone at which the record was generated
	UpdatedAt time.Time `json:"updated-at"`
	Initiator CommonInitiator `json:"initiator"`
}

type _AeDealUpsertedDetail AeDealUpsertedDetail

// NewAeDealUpsertedDetail instantiates a new AeDealUpsertedDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeDealUpsertedDetail(id string, auctionId string, asset CommonAmsAssetPointer, seller string, saleListing string, soldAt time.Time, buyer string, amount CommonCurrency, updatedAt time.Time, initiator CommonInitiator) *AeDealUpsertedDetail {
	this := AeDealUpsertedDetail{}
	this.Id = id
	this.AuctionId = auctionId
	this.Asset = asset
	this.Seller = seller
	this.SaleListing = saleListing
	this.SoldAt = soldAt
	this.Buyer = buyer
	this.Amount = amount
	this.UpdatedAt = updatedAt
	this.Initiator = initiator
	return &this
}

// NewAeDealUpsertedDetailWithDefaults instantiates a new AeDealUpsertedDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeDealUpsertedDetailWithDefaults() *AeDealUpsertedDetail {
	this := AeDealUpsertedDetail{}
	return &this
}

// GetId returns the Id field value
func (o *AeDealUpsertedDetail) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AeDealUpsertedDetail) SetId(v string) {
	o.Id = v
}

// GetAuctionId returns the AuctionId field value
func (o *AeDealUpsertedDetail) GetAuctionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuctionId
}

// GetAuctionIdOk returns a tuple with the AuctionId field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetAuctionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuctionId, true
}

// SetAuctionId sets field value
func (o *AeDealUpsertedDetail) SetAuctionId(v string) {
	o.AuctionId = v
}

// GetAsset returns the Asset field value
func (o *AeDealUpsertedDetail) GetAsset() CommonAmsAssetPointer {
	if o == nil {
		var ret CommonAmsAssetPointer
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetAssetOk() (*CommonAmsAssetPointer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *AeDealUpsertedDetail) SetAsset(v CommonAmsAssetPointer) {
	o.Asset = v
}

// GetSeller returns the Seller field value
func (o *AeDealUpsertedDetail) GetSeller() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Seller
}

// GetSellerOk returns a tuple with the Seller field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetSellerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seller, true
}

// SetSeller sets field value
func (o *AeDealUpsertedDetail) SetSeller(v string) {
	o.Seller = v
}

// GetSellerAgent returns the SellerAgent field value if set, zero value otherwise.
func (o *AeDealUpsertedDetail) GetSellerAgent() string {
	if o == nil || IsNil(o.SellerAgent) {
		var ret string
		return ret
	}
	return *o.SellerAgent
}

// GetSellerAgentOk returns a tuple with the SellerAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetSellerAgentOk() (*string, bool) {
	if o == nil || IsNil(o.SellerAgent) {
		return nil, false
	}
	return o.SellerAgent, true
}

// HasSellerAgent returns a boolean if a field has been set.
func (o *AeDealUpsertedDetail) HasSellerAgent() bool {
	if o != nil && !IsNil(o.SellerAgent) {
		return true
	}

	return false
}

// SetSellerAgent gets a reference to the given string and assigns it to the SellerAgent field.
func (o *AeDealUpsertedDetail) SetSellerAgent(v string) {
	o.SellerAgent = &v
}

// GetSaleListing returns the SaleListing field value
func (o *AeDealUpsertedDetail) GetSaleListing() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SaleListing
}

// GetSaleListingOk returns a tuple with the SaleListing field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetSaleListingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaleListing, true
}

// SetSaleListing sets field value
func (o *AeDealUpsertedDetail) SetSaleListing(v string) {
	o.SaleListing = v
}

// GetSoldAt returns the SoldAt field value
func (o *AeDealUpsertedDetail) GetSoldAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.SoldAt
}

// GetSoldAtOk returns a tuple with the SoldAt field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetSoldAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoldAt, true
}

// SetSoldAt sets field value
func (o *AeDealUpsertedDetail) SetSoldAt(v time.Time) {
	o.SoldAt = v
}

// GetBuyer returns the Buyer field value
func (o *AeDealUpsertedDetail) GetBuyer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetBuyerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buyer, true
}

// SetBuyer sets field value
func (o *AeDealUpsertedDetail) SetBuyer(v string) {
	o.Buyer = v
}

// GetBuyerAgent returns the BuyerAgent field value if set, zero value otherwise.
func (o *AeDealUpsertedDetail) GetBuyerAgent() string {
	if o == nil || IsNil(o.BuyerAgent) {
		var ret string
		return ret
	}
	return *o.BuyerAgent
}

// GetBuyerAgentOk returns a tuple with the BuyerAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetBuyerAgentOk() (*string, bool) {
	if o == nil || IsNil(o.BuyerAgent) {
		return nil, false
	}
	return o.BuyerAgent, true
}

// HasBuyerAgent returns a boolean if a field has been set.
func (o *AeDealUpsertedDetail) HasBuyerAgent() bool {
	if o != nil && !IsNil(o.BuyerAgent) {
		return true
	}

	return false
}

// SetBuyerAgent gets a reference to the given string and assigns it to the BuyerAgent field.
func (o *AeDealUpsertedDetail) SetBuyerAgent(v string) {
	o.BuyerAgent = &v
}

// GetAmount returns the Amount field value
func (o *AeDealUpsertedDetail) GetAmount() CommonCurrency {
	if o == nil {
		var ret CommonCurrency
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetAmountOk() (*CommonCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AeDealUpsertedDetail) SetAmount(v CommonCurrency) {
	o.Amount = v
}

// GetSoldMethod returns the SoldMethod field value if set, zero value otherwise.
func (o *AeDealUpsertedDetail) GetSoldMethod() string {
	if o == nil || IsNil(o.SoldMethod) {
		var ret string
		return ret
	}
	return *o.SoldMethod
}

// GetSoldMethodOk returns a tuple with the SoldMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetSoldMethodOk() (*string, bool) {
	if o == nil || IsNil(o.SoldMethod) {
		return nil, false
	}
	return o.SoldMethod, true
}

// HasSoldMethod returns a boolean if a field has been set.
func (o *AeDealUpsertedDetail) HasSoldMethod() bool {
	if o != nil && !IsNil(o.SoldMethod) {
		return true
	}

	return false
}

// SetSoldMethod gets a reference to the given string and assigns it to the SoldMethod field.
func (o *AeDealUpsertedDetail) SetSoldMethod(v string) {
	o.SoldMethod = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *AeDealUpsertedDetail) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *AeDealUpsertedDetail) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetInitiator returns the Initiator field value
func (o *AeDealUpsertedDetail) GetInitiator() CommonInitiator {
	if o == nil {
		var ret CommonInitiator
		return ret
	}

	return o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value
// and a boolean to check if the value has been set.
func (o *AeDealUpsertedDetail) GetInitiatorOk() (*CommonInitiator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiator, true
}

// SetInitiator sets field value
func (o *AeDealUpsertedDetail) SetInitiator(v CommonInitiator) {
	o.Initiator = v
}

func (o AeDealUpsertedDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AeDealUpsertedDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["auction-id"] = o.AuctionId
	toSerialize["asset"] = o.Asset
	toSerialize["seller"] = o.Seller
	if !IsNil(o.SellerAgent) {
		toSerialize["seller-agent"] = o.SellerAgent
	}
	toSerialize["sale-listing"] = o.SaleListing
	toSerialize["sold-at"] = o.SoldAt
	toSerialize["buyer"] = o.Buyer
	if !IsNil(o.BuyerAgent) {
		toSerialize["buyer-agent"] = o.BuyerAgent
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.SoldMethod) {
		toSerialize["sold-method"] = o.SoldMethod
	}
	toSerialize["updated-at"] = o.UpdatedAt
	toSerialize["initiator"] = o.Initiator
	return toSerialize, nil
}

func (o *AeDealUpsertedDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"auction-id",
		"asset",
		"seller",
		"sale-listing",
		"sold-at",
		"buyer",
		"amount",
		"updated-at",
		"initiator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAeDealUpsertedDetail := _AeDealUpsertedDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAeDealUpsertedDetail)

	if err != nil {
		return err
	}

	*o = AeDealUpsertedDetail(varAeDealUpsertedDetail)

	return err
}

type NullableAeDealUpsertedDetail struct {
	value *AeDealUpsertedDetail
	isSet bool
}

func (v NullableAeDealUpsertedDetail) Get() *AeDealUpsertedDetail {
	return v.value
}

func (v *NullableAeDealUpsertedDetail) Set(val *AeDealUpsertedDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAeDealUpsertedDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAeDealUpsertedDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeDealUpsertedDetail(val *AeDealUpsertedDetail) *NullableAeDealUpsertedDetail {
	return &NullableAeDealUpsertedDetail{value: val, isSet: true}
}

func (v NullableAeDealUpsertedDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeDealUpsertedDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


