/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonAssetNegotiationBaseOfferNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonAssetNegotiationBaseOfferNotification{}

// CommonAssetNegotiationBaseOfferNotification struct for CommonAssetNegotiationBaseOfferNotification
type CommonAssetNegotiationBaseOfferNotification struct {
	// whether or not a notification of the offer was requested to be sent
	Requested bool `json:"requested"`
	Methods []string `json:"methods,omitempty"`
}

type _CommonAssetNegotiationBaseOfferNotification CommonAssetNegotiationBaseOfferNotification

// NewCommonAssetNegotiationBaseOfferNotification instantiates a new CommonAssetNegotiationBaseOfferNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonAssetNegotiationBaseOfferNotification(requested bool) *CommonAssetNegotiationBaseOfferNotification {
	this := CommonAssetNegotiationBaseOfferNotification{}
	this.Requested = requested
	return &this
}

// NewCommonAssetNegotiationBaseOfferNotificationWithDefaults instantiates a new CommonAssetNegotiationBaseOfferNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonAssetNegotiationBaseOfferNotificationWithDefaults() *CommonAssetNegotiationBaseOfferNotification {
	this := CommonAssetNegotiationBaseOfferNotification{}
	return &this
}

// GetRequested returns the Requested field value
func (o *CommonAssetNegotiationBaseOfferNotification) GetRequested() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Requested
}

// GetRequestedOk returns a tuple with the Requested field value
// and a boolean to check if the value has been set.
func (o *CommonAssetNegotiationBaseOfferNotification) GetRequestedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Requested, true
}

// SetRequested sets field value
func (o *CommonAssetNegotiationBaseOfferNotification) SetRequested(v bool) {
	o.Requested = v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *CommonAssetNegotiationBaseOfferNotification) GetMethods() []string {
	if o == nil || IsNil(o.Methods) {
		var ret []string
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonAssetNegotiationBaseOfferNotification) GetMethodsOk() ([]string, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *CommonAssetNegotiationBaseOfferNotification) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []string and assigns it to the Methods field.
func (o *CommonAssetNegotiationBaseOfferNotification) SetMethods(v []string) {
	o.Methods = v
}

func (o CommonAssetNegotiationBaseOfferNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonAssetNegotiationBaseOfferNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requested"] = o.Requested
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	return toSerialize, nil
}

func (o *CommonAssetNegotiationBaseOfferNotification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"requested",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonAssetNegotiationBaseOfferNotification := _CommonAssetNegotiationBaseOfferNotification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonAssetNegotiationBaseOfferNotification)

	if err != nil {
		return err
	}

	*o = CommonAssetNegotiationBaseOfferNotification(varCommonAssetNegotiationBaseOfferNotification)

	return err
}

type NullableCommonAssetNegotiationBaseOfferNotification struct {
	value *CommonAssetNegotiationBaseOfferNotification
	isSet bool
}

func (v NullableCommonAssetNegotiationBaseOfferNotification) Get() *CommonAssetNegotiationBaseOfferNotification {
	return v.value
}

func (v *NullableCommonAssetNegotiationBaseOfferNotification) Set(val *CommonAssetNegotiationBaseOfferNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonAssetNegotiationBaseOfferNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonAssetNegotiationBaseOfferNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonAssetNegotiationBaseOfferNotification(val *CommonAssetNegotiationBaseOfferNotification) *NullableCommonAssetNegotiationBaseOfferNotification {
	return &NullableCommonAssetNegotiationBaseOfferNotification{value: val, isSet: true}
}

func (v NullableCommonAssetNegotiationBaseOfferNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonAssetNegotiationBaseOfferNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


