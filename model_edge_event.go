/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// EdgeEvent - struct for EdgeEvent
type EdgeEvent struct {
	AeAccountPaymentSourceRemovedAms *AeAccountPaymentSourceRemovedAms
	AeAccountPaymentSourceUpsertAms *AeAccountPaymentSourceUpsertAms
	AeAccountRemovedAms *AeAccountRemovedAms
	AeAccountRepresentativePayerAuthorized *AeAccountRepresentativePayerAuthorized
	AeAccountRepresentativePayerDeauthorized *AeAccountRepresentativePayerDeauthorized
	AeAccountRepresentativeRemovedAms *AeAccountRepresentativeRemovedAms
	AeAccountRepresentativeUpsertedAms *AeAccountRepresentativeUpsertedAms
	AeAccountUpsertedAms *AeAccountUpsertedAms
	AeAccountingPaymentSourceUpdated *AeAccountingPaymentSourceUpdated
	AeAdvisoryAccountAms *AeAdvisoryAccountAms
	AeAdvisoryAccountRepresentativesAms *AeAdvisoryAccountRepresentativesAms
	AeAdvisoryAssetAms *AeAdvisoryAssetAms
	AeAdvisoryRequestAccountAms *AeAdvisoryRequestAccountAms
	AeAdvisoryRequestAsset *AeAdvisoryRequestAsset
	AeAdvisoryRequestAssetSold *AeAdvisoryRequestAssetSold
	AeAmsPaymentVendorUpsert *AeAmsPaymentVendorUpsert
	AeAssetCheckedInAms *AeAssetCheckedInAms
	AeAssetCheckedOutAms *AeAssetCheckedOutAms
	AeAssetDealChargeRemoved *AeAssetDealChargeRemoved
	AeAssetDealChargeUpsert *AeAssetDealChargeUpsert
	AeAssetDealOfferAccepted *AeAssetDealOfferAccepted
	AeAssetDealOfferMade *AeAssetDealOfferMade
	AeAssetDealOfferRejected *AeAssetDealOfferRejected
	AeAssetDealPaymentApplySource *AeAssetDealPaymentApplySource
	AeAssetDealPaymentStatusChanged *AeAssetDealPaymentStatusChanged
	AeAssetDealSold *AeAssetDealSold
	AeAssetDealUnsold *AeAssetDealUnsold
	AeAssetGatepassBuyerReleasable *AeAssetGatepassBuyerReleasable
	AeAssetGatepassBuyerRevoked *AeAssetGatepassBuyerRevoked
	AeAssetGatepassCreated *AeAssetGatepassCreated
	AeAssetGatepassDelivered *AeAssetGatepassDelivered
	AeAssetGatepassSendEmail *AeAssetGatepassSendEmail
	AeAssetGatepassVoided *AeAssetGatepassVoided
	AeAssetLabelFailed *AeAssetLabelFailed
	AeAssetLabelGenerated *AeAssetLabelGenerated
	AeAssetLabelRequested *AeAssetLabelRequested
	AeAssetNegotiationNoteAdded *AeAssetNegotiationNoteAdded
	AeAssetNegotiationOfferAccepted *AeAssetNegotiationOfferAccepted
	AeAssetNegotiationOfferCountered *AeAssetNegotiationOfferCountered
	AeAssetNegotiationOfferRejected *AeAssetNegotiationOfferRejected
	AeAssetNegotiationUpserted *AeAssetNegotiationUpserted
	AeAssetNotSold *AeAssetNotSold
	AeAssetPaidStatusUpdated *AeAssetPaidStatusUpdated
	AeAssetSaleListingRemovedAms *AeAssetSaleListingRemovedAms
	AeAssetSaleListingUpsertedAms *AeAssetSaleListingUpsertedAms
	AeAssetSellerChargeAddRequestFailed *AeAssetSellerChargeAddRequestFailed
	AeAssetSellerChargeAddRequested *AeAssetSellerChargeAddRequested
	AeAssetSellerChargeAddRequestedV2 *AeAssetSellerChargeAddRequestedV2
	AeAssetSellerChargeRemoveFailed *AeAssetSellerChargeRemoveFailed
	AeAssetSellerChargeRemoveRequested *AeAssetSellerChargeRemoveRequested
	AeAssetSellerChargeRemoved *AeAssetSellerChargeRemoved
	AeAssetSellerChargeUpsert *AeAssetSellerChargeUpsert
	AeAssetSellerChargeUpsertV2 *AeAssetSellerChargeUpsertV2
	AeAssetServiceEligibilityUpdated *AeAssetServiceEligibilityUpdated
	AeAssetSoldStatusUpdated *AeAssetSoldStatusUpdated
	AeAssetUpdatedAms *AeAssetUpdatedAms
	AeDealUpserted *AeDealUpserted
	AeDocumentAssetAdded *AeDocumentAssetAdded
	AeDocumentAssetRemoved *AeDocumentAssetRemoved
	AeNotificationRequestDelivery *AeNotificationRequestDelivery
	AeServiceCancelled *AeServiceCancelled
	AeServiceCompleted *AeServiceCompleted
	AeServiceOrderPlaced *AeServiceOrderPlaced
	AeServiceOrderRejected *AeServiceOrderRejected
	AeServiceOrderUpdated *AeServiceOrderUpdated
	AeServiceOrdered *AeServiceOrdered
	AeServiceRequest *AeServiceRequest
	AeServiceWaived *AeServiceWaived
	AeUserInfoAdvisoryDataSourceUpdated *AeUserInfoAdvisoryDataSourceUpdated
}

// AeAccountPaymentSourceRemovedAmsAsEdgeEvent is a convenience function that returns AeAccountPaymentSourceRemovedAms wrapped in EdgeEvent
func AeAccountPaymentSourceRemovedAmsAsEdgeEvent(v *AeAccountPaymentSourceRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountPaymentSourceRemovedAms: v,
	}
}

// AeAccountPaymentSourceUpsertAmsAsEdgeEvent is a convenience function that returns AeAccountPaymentSourceUpsertAms wrapped in EdgeEvent
func AeAccountPaymentSourceUpsertAmsAsEdgeEvent(v *AeAccountPaymentSourceUpsertAms) EdgeEvent {
	return EdgeEvent{
		AeAccountPaymentSourceUpsertAms: v,
	}
}

// AeAccountRemovedAmsAsEdgeEvent is a convenience function that returns AeAccountRemovedAms wrapped in EdgeEvent
func AeAccountRemovedAmsAsEdgeEvent(v *AeAccountRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountRemovedAms: v,
	}
}

// AeAccountRepresentativePayerAuthorizedAsEdgeEvent is a convenience function that returns AeAccountRepresentativePayerAuthorized wrapped in EdgeEvent
func AeAccountRepresentativePayerAuthorizedAsEdgeEvent(v *AeAccountRepresentativePayerAuthorized) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativePayerAuthorized: v,
	}
}

// AeAccountRepresentativePayerDeauthorizedAsEdgeEvent is a convenience function that returns AeAccountRepresentativePayerDeauthorized wrapped in EdgeEvent
func AeAccountRepresentativePayerDeauthorizedAsEdgeEvent(v *AeAccountRepresentativePayerDeauthorized) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativePayerDeauthorized: v,
	}
}

// AeAccountRepresentativeRemovedAmsAsEdgeEvent is a convenience function that returns AeAccountRepresentativeRemovedAms wrapped in EdgeEvent
func AeAccountRepresentativeRemovedAmsAsEdgeEvent(v *AeAccountRepresentativeRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativeRemovedAms: v,
	}
}

// AeAccountRepresentativeUpsertedAmsAsEdgeEvent is a convenience function that returns AeAccountRepresentativeUpsertedAms wrapped in EdgeEvent
func AeAccountRepresentativeUpsertedAmsAsEdgeEvent(v *AeAccountRepresentativeUpsertedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativeUpsertedAms: v,
	}
}

// AeAccountUpsertedAmsAsEdgeEvent is a convenience function that returns AeAccountUpsertedAms wrapped in EdgeEvent
func AeAccountUpsertedAmsAsEdgeEvent(v *AeAccountUpsertedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountUpsertedAms: v,
	}
}

// AeAccountingPaymentSourceUpdatedAsEdgeEvent is a convenience function that returns AeAccountingPaymentSourceUpdated wrapped in EdgeEvent
func AeAccountingPaymentSourceUpdatedAsEdgeEvent(v *AeAccountingPaymentSourceUpdated) EdgeEvent {
	return EdgeEvent{
		AeAccountingPaymentSourceUpdated: v,
	}
}

// AeAdvisoryAccountAmsAsEdgeEvent is a convenience function that returns AeAdvisoryAccountAms wrapped in EdgeEvent
func AeAdvisoryAccountAmsAsEdgeEvent(v *AeAdvisoryAccountAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryAccountAms: v,
	}
}

// AeAdvisoryAccountRepresentativesAmsAsEdgeEvent is a convenience function that returns AeAdvisoryAccountRepresentativesAms wrapped in EdgeEvent
func AeAdvisoryAccountRepresentativesAmsAsEdgeEvent(v *AeAdvisoryAccountRepresentativesAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryAccountRepresentativesAms: v,
	}
}

// AeAdvisoryAssetAmsAsEdgeEvent is a convenience function that returns AeAdvisoryAssetAms wrapped in EdgeEvent
func AeAdvisoryAssetAmsAsEdgeEvent(v *AeAdvisoryAssetAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryAssetAms: v,
	}
}

// AeAdvisoryRequestAccountAmsAsEdgeEvent is a convenience function that returns AeAdvisoryRequestAccountAms wrapped in EdgeEvent
func AeAdvisoryRequestAccountAmsAsEdgeEvent(v *AeAdvisoryRequestAccountAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryRequestAccountAms: v,
	}
}

// AeAdvisoryRequestAssetAsEdgeEvent is a convenience function that returns AeAdvisoryRequestAsset wrapped in EdgeEvent
func AeAdvisoryRequestAssetAsEdgeEvent(v *AeAdvisoryRequestAsset) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryRequestAsset: v,
	}
}

// AeAdvisoryRequestAssetSoldAsEdgeEvent is a convenience function that returns AeAdvisoryRequestAssetSold wrapped in EdgeEvent
func AeAdvisoryRequestAssetSoldAsEdgeEvent(v *AeAdvisoryRequestAssetSold) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryRequestAssetSold: v,
	}
}

// AeAmsPaymentVendorUpsertAsEdgeEvent is a convenience function that returns AeAmsPaymentVendorUpsert wrapped in EdgeEvent
func AeAmsPaymentVendorUpsertAsEdgeEvent(v *AeAmsPaymentVendorUpsert) EdgeEvent {
	return EdgeEvent{
		AeAmsPaymentVendorUpsert: v,
	}
}

// AeAssetCheckedInAmsAsEdgeEvent is a convenience function that returns AeAssetCheckedInAms wrapped in EdgeEvent
func AeAssetCheckedInAmsAsEdgeEvent(v *AeAssetCheckedInAms) EdgeEvent {
	return EdgeEvent{
		AeAssetCheckedInAms: v,
	}
}

// AeAssetCheckedOutAmsAsEdgeEvent is a convenience function that returns AeAssetCheckedOutAms wrapped in EdgeEvent
func AeAssetCheckedOutAmsAsEdgeEvent(v *AeAssetCheckedOutAms) EdgeEvent {
	return EdgeEvent{
		AeAssetCheckedOutAms: v,
	}
}

// AeAssetDealChargeRemovedAsEdgeEvent is a convenience function that returns AeAssetDealChargeRemoved wrapped in EdgeEvent
func AeAssetDealChargeRemovedAsEdgeEvent(v *AeAssetDealChargeRemoved) EdgeEvent {
	return EdgeEvent{
		AeAssetDealChargeRemoved: v,
	}
}

// AeAssetDealChargeUpsertAsEdgeEvent is a convenience function that returns AeAssetDealChargeUpsert wrapped in EdgeEvent
func AeAssetDealChargeUpsertAsEdgeEvent(v *AeAssetDealChargeUpsert) EdgeEvent {
	return EdgeEvent{
		AeAssetDealChargeUpsert: v,
	}
}

// AeAssetDealOfferAcceptedAsEdgeEvent is a convenience function that returns AeAssetDealOfferAccepted wrapped in EdgeEvent
func AeAssetDealOfferAcceptedAsEdgeEvent(v *AeAssetDealOfferAccepted) EdgeEvent {
	return EdgeEvent{
		AeAssetDealOfferAccepted: v,
	}
}

// AeAssetDealOfferMadeAsEdgeEvent is a convenience function that returns AeAssetDealOfferMade wrapped in EdgeEvent
func AeAssetDealOfferMadeAsEdgeEvent(v *AeAssetDealOfferMade) EdgeEvent {
	return EdgeEvent{
		AeAssetDealOfferMade: v,
	}
}

// AeAssetDealOfferRejectedAsEdgeEvent is a convenience function that returns AeAssetDealOfferRejected wrapped in EdgeEvent
func AeAssetDealOfferRejectedAsEdgeEvent(v *AeAssetDealOfferRejected) EdgeEvent {
	return EdgeEvent{
		AeAssetDealOfferRejected: v,
	}
}

// AeAssetDealPaymentApplySourceAsEdgeEvent is a convenience function that returns AeAssetDealPaymentApplySource wrapped in EdgeEvent
func AeAssetDealPaymentApplySourceAsEdgeEvent(v *AeAssetDealPaymentApplySource) EdgeEvent {
	return EdgeEvent{
		AeAssetDealPaymentApplySource: v,
	}
}

// AeAssetDealPaymentStatusChangedAsEdgeEvent is a convenience function that returns AeAssetDealPaymentStatusChanged wrapped in EdgeEvent
func AeAssetDealPaymentStatusChangedAsEdgeEvent(v *AeAssetDealPaymentStatusChanged) EdgeEvent {
	return EdgeEvent{
		AeAssetDealPaymentStatusChanged: v,
	}
}

// AeAssetDealSoldAsEdgeEvent is a convenience function that returns AeAssetDealSold wrapped in EdgeEvent
func AeAssetDealSoldAsEdgeEvent(v *AeAssetDealSold) EdgeEvent {
	return EdgeEvent{
		AeAssetDealSold: v,
	}
}

// AeAssetDealUnsoldAsEdgeEvent is a convenience function that returns AeAssetDealUnsold wrapped in EdgeEvent
func AeAssetDealUnsoldAsEdgeEvent(v *AeAssetDealUnsold) EdgeEvent {
	return EdgeEvent{
		AeAssetDealUnsold: v,
	}
}

// AeAssetGatepassBuyerReleasableAsEdgeEvent is a convenience function that returns AeAssetGatepassBuyerReleasable wrapped in EdgeEvent
func AeAssetGatepassBuyerReleasableAsEdgeEvent(v *AeAssetGatepassBuyerReleasable) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassBuyerReleasable: v,
	}
}

// AeAssetGatepassBuyerRevokedAsEdgeEvent is a convenience function that returns AeAssetGatepassBuyerRevoked wrapped in EdgeEvent
func AeAssetGatepassBuyerRevokedAsEdgeEvent(v *AeAssetGatepassBuyerRevoked) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassBuyerRevoked: v,
	}
}

// AeAssetGatepassCreatedAsEdgeEvent is a convenience function that returns AeAssetGatepassCreated wrapped in EdgeEvent
func AeAssetGatepassCreatedAsEdgeEvent(v *AeAssetGatepassCreated) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassCreated: v,
	}
}

// AeAssetGatepassDeliveredAsEdgeEvent is a convenience function that returns AeAssetGatepassDelivered wrapped in EdgeEvent
func AeAssetGatepassDeliveredAsEdgeEvent(v *AeAssetGatepassDelivered) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassDelivered: v,
	}
}

// AeAssetGatepassSendEmailAsEdgeEvent is a convenience function that returns AeAssetGatepassSendEmail wrapped in EdgeEvent
func AeAssetGatepassSendEmailAsEdgeEvent(v *AeAssetGatepassSendEmail) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassSendEmail: v,
	}
}

// AeAssetGatepassVoidedAsEdgeEvent is a convenience function that returns AeAssetGatepassVoided wrapped in EdgeEvent
func AeAssetGatepassVoidedAsEdgeEvent(v *AeAssetGatepassVoided) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassVoided: v,
	}
}

// AeAssetLabelFailedAsEdgeEvent is a convenience function that returns AeAssetLabelFailed wrapped in EdgeEvent
func AeAssetLabelFailedAsEdgeEvent(v *AeAssetLabelFailed) EdgeEvent {
	return EdgeEvent{
		AeAssetLabelFailed: v,
	}
}

// AeAssetLabelGeneratedAsEdgeEvent is a convenience function that returns AeAssetLabelGenerated wrapped in EdgeEvent
func AeAssetLabelGeneratedAsEdgeEvent(v *AeAssetLabelGenerated) EdgeEvent {
	return EdgeEvent{
		AeAssetLabelGenerated: v,
	}
}

// AeAssetLabelRequestedAsEdgeEvent is a convenience function that returns AeAssetLabelRequested wrapped in EdgeEvent
func AeAssetLabelRequestedAsEdgeEvent(v *AeAssetLabelRequested) EdgeEvent {
	return EdgeEvent{
		AeAssetLabelRequested: v,
	}
}

// AeAssetNegotiationNoteAddedAsEdgeEvent is a convenience function that returns AeAssetNegotiationNoteAdded wrapped in EdgeEvent
func AeAssetNegotiationNoteAddedAsEdgeEvent(v *AeAssetNegotiationNoteAdded) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationNoteAdded: v,
	}
}

// AeAssetNegotiationOfferAcceptedAsEdgeEvent is a convenience function that returns AeAssetNegotiationOfferAccepted wrapped in EdgeEvent
func AeAssetNegotiationOfferAcceptedAsEdgeEvent(v *AeAssetNegotiationOfferAccepted) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationOfferAccepted: v,
	}
}

// AeAssetNegotiationOfferCounteredAsEdgeEvent is a convenience function that returns AeAssetNegotiationOfferCountered wrapped in EdgeEvent
func AeAssetNegotiationOfferCounteredAsEdgeEvent(v *AeAssetNegotiationOfferCountered) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationOfferCountered: v,
	}
}

// AeAssetNegotiationOfferRejectedAsEdgeEvent is a convenience function that returns AeAssetNegotiationOfferRejected wrapped in EdgeEvent
func AeAssetNegotiationOfferRejectedAsEdgeEvent(v *AeAssetNegotiationOfferRejected) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationOfferRejected: v,
	}
}

// AeAssetNegotiationUpsertedAsEdgeEvent is a convenience function that returns AeAssetNegotiationUpserted wrapped in EdgeEvent
func AeAssetNegotiationUpsertedAsEdgeEvent(v *AeAssetNegotiationUpserted) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationUpserted: v,
	}
}

// AeAssetNotSoldAsEdgeEvent is a convenience function that returns AeAssetNotSold wrapped in EdgeEvent
func AeAssetNotSoldAsEdgeEvent(v *AeAssetNotSold) EdgeEvent {
	return EdgeEvent{
		AeAssetNotSold: v,
	}
}

// AeAssetPaidStatusUpdatedAsEdgeEvent is a convenience function that returns AeAssetPaidStatusUpdated wrapped in EdgeEvent
func AeAssetPaidStatusUpdatedAsEdgeEvent(v *AeAssetPaidStatusUpdated) EdgeEvent {
	return EdgeEvent{
		AeAssetPaidStatusUpdated: v,
	}
}

// AeAssetSaleListingRemovedAmsAsEdgeEvent is a convenience function that returns AeAssetSaleListingRemovedAms wrapped in EdgeEvent
func AeAssetSaleListingRemovedAmsAsEdgeEvent(v *AeAssetSaleListingRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAssetSaleListingRemovedAms: v,
	}
}

// AeAssetSaleListingUpsertedAmsAsEdgeEvent is a convenience function that returns AeAssetSaleListingUpsertedAms wrapped in EdgeEvent
func AeAssetSaleListingUpsertedAmsAsEdgeEvent(v *AeAssetSaleListingUpsertedAms) EdgeEvent {
	return EdgeEvent{
		AeAssetSaleListingUpsertedAms: v,
	}
}

// AeAssetSellerChargeAddRequestFailedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeAddRequestFailed wrapped in EdgeEvent
func AeAssetSellerChargeAddRequestFailedAsEdgeEvent(v *AeAssetSellerChargeAddRequestFailed) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeAddRequestFailed: v,
	}
}

// AeAssetSellerChargeAddRequestedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeAddRequested wrapped in EdgeEvent
func AeAssetSellerChargeAddRequestedAsEdgeEvent(v *AeAssetSellerChargeAddRequested) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeAddRequested: v,
	}
}

// AeAssetSellerChargeAddRequestedV2AsEdgeEvent is a convenience function that returns AeAssetSellerChargeAddRequestedV2 wrapped in EdgeEvent
func AeAssetSellerChargeAddRequestedV2AsEdgeEvent(v *AeAssetSellerChargeAddRequestedV2) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeAddRequestedV2: v,
	}
}

// AeAssetSellerChargeRemoveFailedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeRemoveFailed wrapped in EdgeEvent
func AeAssetSellerChargeRemoveFailedAsEdgeEvent(v *AeAssetSellerChargeRemoveFailed) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeRemoveFailed: v,
	}
}

// AeAssetSellerChargeRemoveRequestedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeRemoveRequested wrapped in EdgeEvent
func AeAssetSellerChargeRemoveRequestedAsEdgeEvent(v *AeAssetSellerChargeRemoveRequested) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeRemoveRequested: v,
	}
}

// AeAssetSellerChargeRemovedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeRemoved wrapped in EdgeEvent
func AeAssetSellerChargeRemovedAsEdgeEvent(v *AeAssetSellerChargeRemoved) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeRemoved: v,
	}
}

// AeAssetSellerChargeUpsertAsEdgeEvent is a convenience function that returns AeAssetSellerChargeUpsert wrapped in EdgeEvent
func AeAssetSellerChargeUpsertAsEdgeEvent(v *AeAssetSellerChargeUpsert) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeUpsert: v,
	}
}

// AeAssetSellerChargeUpsertV2AsEdgeEvent is a convenience function that returns AeAssetSellerChargeUpsertV2 wrapped in EdgeEvent
func AeAssetSellerChargeUpsertV2AsEdgeEvent(v *AeAssetSellerChargeUpsertV2) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeUpsertV2: v,
	}
}

// AeAssetServiceEligibilityUpdatedAsEdgeEvent is a convenience function that returns AeAssetServiceEligibilityUpdated wrapped in EdgeEvent
func AeAssetServiceEligibilityUpdatedAsEdgeEvent(v *AeAssetServiceEligibilityUpdated) EdgeEvent {
	return EdgeEvent{
		AeAssetServiceEligibilityUpdated: v,
	}
}

// AeAssetSoldStatusUpdatedAsEdgeEvent is a convenience function that returns AeAssetSoldStatusUpdated wrapped in EdgeEvent
func AeAssetSoldStatusUpdatedAsEdgeEvent(v *AeAssetSoldStatusUpdated) EdgeEvent {
	return EdgeEvent{
		AeAssetSoldStatusUpdated: v,
	}
}

// AeAssetUpdatedAmsAsEdgeEvent is a convenience function that returns AeAssetUpdatedAms wrapped in EdgeEvent
func AeAssetUpdatedAmsAsEdgeEvent(v *AeAssetUpdatedAms) EdgeEvent {
	return EdgeEvent{
		AeAssetUpdatedAms: v,
	}
}

// AeDealUpsertedAsEdgeEvent is a convenience function that returns AeDealUpserted wrapped in EdgeEvent
func AeDealUpsertedAsEdgeEvent(v *AeDealUpserted) EdgeEvent {
	return EdgeEvent{
		AeDealUpserted: v,
	}
}

// AeDocumentAssetAddedAsEdgeEvent is a convenience function that returns AeDocumentAssetAdded wrapped in EdgeEvent
func AeDocumentAssetAddedAsEdgeEvent(v *AeDocumentAssetAdded) EdgeEvent {
	return EdgeEvent{
		AeDocumentAssetAdded: v,
	}
}

// AeDocumentAssetRemovedAsEdgeEvent is a convenience function that returns AeDocumentAssetRemoved wrapped in EdgeEvent
func AeDocumentAssetRemovedAsEdgeEvent(v *AeDocumentAssetRemoved) EdgeEvent {
	return EdgeEvent{
		AeDocumentAssetRemoved: v,
	}
}

// AeNotificationRequestDeliveryAsEdgeEvent is a convenience function that returns AeNotificationRequestDelivery wrapped in EdgeEvent
func AeNotificationRequestDeliveryAsEdgeEvent(v *AeNotificationRequestDelivery) EdgeEvent {
	return EdgeEvent{
		AeNotificationRequestDelivery: v,
	}
}

// AeServiceCancelledAsEdgeEvent is a convenience function that returns AeServiceCancelled wrapped in EdgeEvent
func AeServiceCancelledAsEdgeEvent(v *AeServiceCancelled) EdgeEvent {
	return EdgeEvent{
		AeServiceCancelled: v,
	}
}

// AeServiceCompletedAsEdgeEvent is a convenience function that returns AeServiceCompleted wrapped in EdgeEvent
func AeServiceCompletedAsEdgeEvent(v *AeServiceCompleted) EdgeEvent {
	return EdgeEvent{
		AeServiceCompleted: v,
	}
}

// AeServiceOrderPlacedAsEdgeEvent is a convenience function that returns AeServiceOrderPlaced wrapped in EdgeEvent
func AeServiceOrderPlacedAsEdgeEvent(v *AeServiceOrderPlaced) EdgeEvent {
	return EdgeEvent{
		AeServiceOrderPlaced: v,
	}
}

// AeServiceOrderRejectedAsEdgeEvent is a convenience function that returns AeServiceOrderRejected wrapped in EdgeEvent
func AeServiceOrderRejectedAsEdgeEvent(v *AeServiceOrderRejected) EdgeEvent {
	return EdgeEvent{
		AeServiceOrderRejected: v,
	}
}

// AeServiceOrderUpdatedAsEdgeEvent is a convenience function that returns AeServiceOrderUpdated wrapped in EdgeEvent
func AeServiceOrderUpdatedAsEdgeEvent(v *AeServiceOrderUpdated) EdgeEvent {
	return EdgeEvent{
		AeServiceOrderUpdated: v,
	}
}

// AeServiceOrderedAsEdgeEvent is a convenience function that returns AeServiceOrdered wrapped in EdgeEvent
func AeServiceOrderedAsEdgeEvent(v *AeServiceOrdered) EdgeEvent {
	return EdgeEvent{
		AeServiceOrdered: v,
	}
}

// AeServiceRequestAsEdgeEvent is a convenience function that returns AeServiceRequest wrapped in EdgeEvent
func AeServiceRequestAsEdgeEvent(v *AeServiceRequest) EdgeEvent {
	return EdgeEvent{
		AeServiceRequest: v,
	}
}

// AeServiceWaivedAsEdgeEvent is a convenience function that returns AeServiceWaived wrapped in EdgeEvent
func AeServiceWaivedAsEdgeEvent(v *AeServiceWaived) EdgeEvent {
	return EdgeEvent{
		AeServiceWaived: v,
	}
}

// AeUserInfoAdvisoryDataSourceUpdatedAsEdgeEvent is a convenience function that returns AeUserInfoAdvisoryDataSourceUpdated wrapped in EdgeEvent
func AeUserInfoAdvisoryDataSourceUpdatedAsEdgeEvent(v *AeUserInfoAdvisoryDataSourceUpdated) EdgeEvent {
	return EdgeEvent{
		AeUserInfoAdvisoryDataSourceUpdated: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EdgeEvent) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ae.account.payment-source.removed.ams'
	if jsonDict["detail-type"] == "ae.account.payment-source.removed.ams" {
		// try to unmarshal JSON data into AeAccountPaymentSourceRemovedAms
		err = json.Unmarshal(data, &dst.AeAccountPaymentSourceRemovedAms)
		if err == nil {
			return nil // data stored in dst.AeAccountPaymentSourceRemovedAms, return on the first match
		} else {
			dst.AeAccountPaymentSourceRemovedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountPaymentSourceRemovedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.account.payment-source.upsert.ams'
	if jsonDict["detail-type"] == "ae.account.payment-source.upsert.ams" {
		// try to unmarshal JSON data into AeAccountPaymentSourceUpsertAms
		err = json.Unmarshal(data, &dst.AeAccountPaymentSourceUpsertAms)
		if err == nil {
			return nil // data stored in dst.AeAccountPaymentSourceUpsertAms, return on the first match
		} else {
			dst.AeAccountPaymentSourceUpsertAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountPaymentSourceUpsertAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.account.removed.ams'
	if jsonDict["detail-type"] == "ae.account.removed.ams" {
		// try to unmarshal JSON data into AeAccountRemovedAms
		err = json.Unmarshal(data, &dst.AeAccountRemovedAms)
		if err == nil {
			return nil // data stored in dst.AeAccountRemovedAms, return on the first match
		} else {
			dst.AeAccountRemovedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountRemovedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.account.representative.payer-authorized'
	if jsonDict["detail-type"] == "ae.account.representative.payer-authorized" {
		// try to unmarshal JSON data into AeAccountRepresentativePayerAuthorized
		err = json.Unmarshal(data, &dst.AeAccountRepresentativePayerAuthorized)
		if err == nil {
			return nil // data stored in dst.AeAccountRepresentativePayerAuthorized, return on the first match
		} else {
			dst.AeAccountRepresentativePayerAuthorized = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountRepresentativePayerAuthorized: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.account.representative.payer-deauthorized'
	if jsonDict["detail-type"] == "ae.account.representative.payer-deauthorized" {
		// try to unmarshal JSON data into AeAccountRepresentativePayerDeauthorized
		err = json.Unmarshal(data, &dst.AeAccountRepresentativePayerDeauthorized)
		if err == nil {
			return nil // data stored in dst.AeAccountRepresentativePayerDeauthorized, return on the first match
		} else {
			dst.AeAccountRepresentativePayerDeauthorized = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountRepresentativePayerDeauthorized: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.account.representative.removed.ams'
	if jsonDict["detail-type"] == "ae.account.representative.removed.ams" {
		// try to unmarshal JSON data into AeAccountRepresentativeRemovedAms
		err = json.Unmarshal(data, &dst.AeAccountRepresentativeRemovedAms)
		if err == nil {
			return nil // data stored in dst.AeAccountRepresentativeRemovedAms, return on the first match
		} else {
			dst.AeAccountRepresentativeRemovedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountRepresentativeRemovedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.account.representative.upserted.ams'
	if jsonDict["detail-type"] == "ae.account.representative.upserted.ams" {
		// try to unmarshal JSON data into AeAccountRepresentativeUpsertedAms
		err = json.Unmarshal(data, &dst.AeAccountRepresentativeUpsertedAms)
		if err == nil {
			return nil // data stored in dst.AeAccountRepresentativeUpsertedAms, return on the first match
		} else {
			dst.AeAccountRepresentativeUpsertedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountRepresentativeUpsertedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.account.upserted.ams'
	if jsonDict["detail-type"] == "ae.account.upserted.ams" {
		// try to unmarshal JSON data into AeAccountUpsertedAms
		err = json.Unmarshal(data, &dst.AeAccountUpsertedAms)
		if err == nil {
			return nil // data stored in dst.AeAccountUpsertedAms, return on the first match
		} else {
			dst.AeAccountUpsertedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountUpsertedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.accounting.payment.source.updated'
	if jsonDict["detail-type"] == "ae.accounting.payment.source.updated" {
		// try to unmarshal JSON data into AeAccountingPaymentSourceUpdated
		err = json.Unmarshal(data, &dst.AeAccountingPaymentSourceUpdated)
		if err == nil {
			return nil // data stored in dst.AeAccountingPaymentSourceUpdated, return on the first match
		} else {
			dst.AeAccountingPaymentSourceUpdated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAccountingPaymentSourceUpdated: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.advisory.account.ams'
	if jsonDict["detail-type"] == "ae.advisory.account.ams" {
		// try to unmarshal JSON data into AeAdvisoryAccountAms
		err = json.Unmarshal(data, &dst.AeAdvisoryAccountAms)
		if err == nil {
			return nil // data stored in dst.AeAdvisoryAccountAms, return on the first match
		} else {
			dst.AeAdvisoryAccountAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAdvisoryAccountAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.advisory.account.representatives.ams'
	if jsonDict["detail-type"] == "ae.advisory.account.representatives.ams" {
		// try to unmarshal JSON data into AeAdvisoryAccountRepresentativesAms
		err = json.Unmarshal(data, &dst.AeAdvisoryAccountRepresentativesAms)
		if err == nil {
			return nil // data stored in dst.AeAdvisoryAccountRepresentativesAms, return on the first match
		} else {
			dst.AeAdvisoryAccountRepresentativesAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAdvisoryAccountRepresentativesAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.advisory.asset.ams'
	if jsonDict["detail-type"] == "ae.advisory.asset.ams" {
		// try to unmarshal JSON data into AeAdvisoryAssetAms
		err = json.Unmarshal(data, &dst.AeAdvisoryAssetAms)
		if err == nil {
			return nil // data stored in dst.AeAdvisoryAssetAms, return on the first match
		} else {
			dst.AeAdvisoryAssetAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAdvisoryAssetAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.advisory.request.account.ams'
	if jsonDict["detail-type"] == "ae.advisory.request.account.ams" {
		// try to unmarshal JSON data into AeAdvisoryRequestAccountAms
		err = json.Unmarshal(data, &dst.AeAdvisoryRequestAccountAms)
		if err == nil {
			return nil // data stored in dst.AeAdvisoryRequestAccountAms, return on the first match
		} else {
			dst.AeAdvisoryRequestAccountAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAdvisoryRequestAccountAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.advisory.request.asset'
	if jsonDict["detail-type"] == "ae.advisory.request.asset" {
		// try to unmarshal JSON data into AeAdvisoryRequestAsset
		err = json.Unmarshal(data, &dst.AeAdvisoryRequestAsset)
		if err == nil {
			return nil // data stored in dst.AeAdvisoryRequestAsset, return on the first match
		} else {
			dst.AeAdvisoryRequestAsset = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAdvisoryRequestAsset: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.advisory.request.asset-sold'
	if jsonDict["detail-type"] == "ae.advisory.request.asset-sold" {
		// try to unmarshal JSON data into AeAdvisoryRequestAssetSold
		err = json.Unmarshal(data, &dst.AeAdvisoryRequestAssetSold)
		if err == nil {
			return nil // data stored in dst.AeAdvisoryRequestAssetSold, return on the first match
		} else {
			dst.AeAdvisoryRequestAssetSold = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAdvisoryRequestAssetSold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.ams.payment-vendor.upsert'
	if jsonDict["detail-type"] == "ae.ams.payment-vendor.upsert" {
		// try to unmarshal JSON data into AeAmsPaymentVendorUpsert
		err = json.Unmarshal(data, &dst.AeAmsPaymentVendorUpsert)
		if err == nil {
			return nil // data stored in dst.AeAmsPaymentVendorUpsert, return on the first match
		} else {
			dst.AeAmsPaymentVendorUpsert = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAmsPaymentVendorUpsert: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.checked-in.ams'
	if jsonDict["detail-type"] == "ae.asset.checked-in.ams" {
		// try to unmarshal JSON data into AeAssetCheckedInAms
		err = json.Unmarshal(data, &dst.AeAssetCheckedInAms)
		if err == nil {
			return nil // data stored in dst.AeAssetCheckedInAms, return on the first match
		} else {
			dst.AeAssetCheckedInAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetCheckedInAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.checked-out.ams'
	if jsonDict["detail-type"] == "ae.asset.checked-out.ams" {
		// try to unmarshal JSON data into AeAssetCheckedOutAms
		err = json.Unmarshal(data, &dst.AeAssetCheckedOutAms)
		if err == nil {
			return nil // data stored in dst.AeAssetCheckedOutAms, return on the first match
		} else {
			dst.AeAssetCheckedOutAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetCheckedOutAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.charge.removed'
	if jsonDict["detail-type"] == "ae.asset.deal.charge.removed" {
		// try to unmarshal JSON data into AeAssetDealChargeRemoved
		err = json.Unmarshal(data, &dst.AeAssetDealChargeRemoved)
		if err == nil {
			return nil // data stored in dst.AeAssetDealChargeRemoved, return on the first match
		} else {
			dst.AeAssetDealChargeRemoved = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealChargeRemoved: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.charge.upsert'
	if jsonDict["detail-type"] == "ae.asset.deal.charge.upsert" {
		// try to unmarshal JSON data into AeAssetDealChargeUpsert
		err = json.Unmarshal(data, &dst.AeAssetDealChargeUpsert)
		if err == nil {
			return nil // data stored in dst.AeAssetDealChargeUpsert, return on the first match
		} else {
			dst.AeAssetDealChargeUpsert = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealChargeUpsert: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.offer.accepted'
	if jsonDict["detail-type"] == "ae.asset.deal.offer.accepted" {
		// try to unmarshal JSON data into AeAssetDealOfferAccepted
		err = json.Unmarshal(data, &dst.AeAssetDealOfferAccepted)
		if err == nil {
			return nil // data stored in dst.AeAssetDealOfferAccepted, return on the first match
		} else {
			dst.AeAssetDealOfferAccepted = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealOfferAccepted: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.offer.made'
	if jsonDict["detail-type"] == "ae.asset.deal.offer.made" {
		// try to unmarshal JSON data into AeAssetDealOfferMade
		err = json.Unmarshal(data, &dst.AeAssetDealOfferMade)
		if err == nil {
			return nil // data stored in dst.AeAssetDealOfferMade, return on the first match
		} else {
			dst.AeAssetDealOfferMade = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealOfferMade: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.offer.rejected'
	if jsonDict["detail-type"] == "ae.asset.deal.offer.rejected" {
		// try to unmarshal JSON data into AeAssetDealOfferRejected
		err = json.Unmarshal(data, &dst.AeAssetDealOfferRejected)
		if err == nil {
			return nil // data stored in dst.AeAssetDealOfferRejected, return on the first match
		} else {
			dst.AeAssetDealOfferRejected = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealOfferRejected: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.payment.apply-source'
	if jsonDict["detail-type"] == "ae.asset.deal.payment.apply-source" {
		// try to unmarshal JSON data into AeAssetDealPaymentApplySource
		err = json.Unmarshal(data, &dst.AeAssetDealPaymentApplySource)
		if err == nil {
			return nil // data stored in dst.AeAssetDealPaymentApplySource, return on the first match
		} else {
			dst.AeAssetDealPaymentApplySource = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealPaymentApplySource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.payment.status-changed'
	if jsonDict["detail-type"] == "ae.asset.deal.payment.status-changed" {
		// try to unmarshal JSON data into AeAssetDealPaymentStatusChanged
		err = json.Unmarshal(data, &dst.AeAssetDealPaymentStatusChanged)
		if err == nil {
			return nil // data stored in dst.AeAssetDealPaymentStatusChanged, return on the first match
		} else {
			dst.AeAssetDealPaymentStatusChanged = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealPaymentStatusChanged: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.sold'
	if jsonDict["detail-type"] == "ae.asset.deal.sold" {
		// try to unmarshal JSON data into AeAssetDealSold
		err = json.Unmarshal(data, &dst.AeAssetDealSold)
		if err == nil {
			return nil // data stored in dst.AeAssetDealSold, return on the first match
		} else {
			dst.AeAssetDealSold = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealSold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.deal.unsold'
	if jsonDict["detail-type"] == "ae.asset.deal.unsold" {
		// try to unmarshal JSON data into AeAssetDealUnsold
		err = json.Unmarshal(data, &dst.AeAssetDealUnsold)
		if err == nil {
			return nil // data stored in dst.AeAssetDealUnsold, return on the first match
		} else {
			dst.AeAssetDealUnsold = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetDealUnsold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.gatepass.buyer.releasable'
	if jsonDict["detail-type"] == "ae.asset.gatepass.buyer.releasable" {
		// try to unmarshal JSON data into AeAssetGatepassBuyerReleasable
		err = json.Unmarshal(data, &dst.AeAssetGatepassBuyerReleasable)
		if err == nil {
			return nil // data stored in dst.AeAssetGatepassBuyerReleasable, return on the first match
		} else {
			dst.AeAssetGatepassBuyerReleasable = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetGatepassBuyerReleasable: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.gatepass.buyer.revoked'
	if jsonDict["detail-type"] == "ae.asset.gatepass.buyer.revoked" {
		// try to unmarshal JSON data into AeAssetGatepassBuyerRevoked
		err = json.Unmarshal(data, &dst.AeAssetGatepassBuyerRevoked)
		if err == nil {
			return nil // data stored in dst.AeAssetGatepassBuyerRevoked, return on the first match
		} else {
			dst.AeAssetGatepassBuyerRevoked = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetGatepassBuyerRevoked: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.gatepass.created'
	if jsonDict["detail-type"] == "ae.asset.gatepass.created" {
		// try to unmarshal JSON data into AeAssetGatepassCreated
		err = json.Unmarshal(data, &dst.AeAssetGatepassCreated)
		if err == nil {
			return nil // data stored in dst.AeAssetGatepassCreated, return on the first match
		} else {
			dst.AeAssetGatepassCreated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetGatepassCreated: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.gatepass.delivered'
	if jsonDict["detail-type"] == "ae.asset.gatepass.delivered" {
		// try to unmarshal JSON data into AeAssetGatepassDelivered
		err = json.Unmarshal(data, &dst.AeAssetGatepassDelivered)
		if err == nil {
			return nil // data stored in dst.AeAssetGatepassDelivered, return on the first match
		} else {
			dst.AeAssetGatepassDelivered = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetGatepassDelivered: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.gatepass.send-email'
	if jsonDict["detail-type"] == "ae.asset.gatepass.send-email" {
		// try to unmarshal JSON data into AeAssetGatepassSendEmail
		err = json.Unmarshal(data, &dst.AeAssetGatepassSendEmail)
		if err == nil {
			return nil // data stored in dst.AeAssetGatepassSendEmail, return on the first match
		} else {
			dst.AeAssetGatepassSendEmail = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetGatepassSendEmail: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.gatepass.voided'
	if jsonDict["detail-type"] == "ae.asset.gatepass.voided" {
		// try to unmarshal JSON data into AeAssetGatepassVoided
		err = json.Unmarshal(data, &dst.AeAssetGatepassVoided)
		if err == nil {
			return nil // data stored in dst.AeAssetGatepassVoided, return on the first match
		} else {
			dst.AeAssetGatepassVoided = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetGatepassVoided: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.label.failed'
	if jsonDict["detail-type"] == "ae.asset.label.failed" {
		// try to unmarshal JSON data into AeAssetLabelFailed
		err = json.Unmarshal(data, &dst.AeAssetLabelFailed)
		if err == nil {
			return nil // data stored in dst.AeAssetLabelFailed, return on the first match
		} else {
			dst.AeAssetLabelFailed = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetLabelFailed: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.label.generated'
	if jsonDict["detail-type"] == "ae.asset.label.generated" {
		// try to unmarshal JSON data into AeAssetLabelGenerated
		err = json.Unmarshal(data, &dst.AeAssetLabelGenerated)
		if err == nil {
			return nil // data stored in dst.AeAssetLabelGenerated, return on the first match
		} else {
			dst.AeAssetLabelGenerated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetLabelGenerated: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.label.requested'
	if jsonDict["detail-type"] == "ae.asset.label.requested" {
		// try to unmarshal JSON data into AeAssetLabelRequested
		err = json.Unmarshal(data, &dst.AeAssetLabelRequested)
		if err == nil {
			return nil // data stored in dst.AeAssetLabelRequested, return on the first match
		} else {
			dst.AeAssetLabelRequested = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetLabelRequested: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.negotiation.note-added'
	if jsonDict["detail-type"] == "ae.asset.negotiation.note-added" {
		// try to unmarshal JSON data into AeAssetNegotiationNoteAdded
		err = json.Unmarshal(data, &dst.AeAssetNegotiationNoteAdded)
		if err == nil {
			return nil // data stored in dst.AeAssetNegotiationNoteAdded, return on the first match
		} else {
			dst.AeAssetNegotiationNoteAdded = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetNegotiationNoteAdded: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.negotiation.offer.accepted'
	if jsonDict["detail-type"] == "ae.asset.negotiation.offer.accepted" {
		// try to unmarshal JSON data into AeAssetNegotiationOfferAccepted
		err = json.Unmarshal(data, &dst.AeAssetNegotiationOfferAccepted)
		if err == nil {
			return nil // data stored in dst.AeAssetNegotiationOfferAccepted, return on the first match
		} else {
			dst.AeAssetNegotiationOfferAccepted = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetNegotiationOfferAccepted: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.negotiation.offer.countered'
	if jsonDict["detail-type"] == "ae.asset.negotiation.offer.countered" {
		// try to unmarshal JSON data into AeAssetNegotiationOfferCountered
		err = json.Unmarshal(data, &dst.AeAssetNegotiationOfferCountered)
		if err == nil {
			return nil // data stored in dst.AeAssetNegotiationOfferCountered, return on the first match
		} else {
			dst.AeAssetNegotiationOfferCountered = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetNegotiationOfferCountered: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.negotiation.offer.rejected'
	if jsonDict["detail-type"] == "ae.asset.negotiation.offer.rejected" {
		// try to unmarshal JSON data into AeAssetNegotiationOfferRejected
		err = json.Unmarshal(data, &dst.AeAssetNegotiationOfferRejected)
		if err == nil {
			return nil // data stored in dst.AeAssetNegotiationOfferRejected, return on the first match
		} else {
			dst.AeAssetNegotiationOfferRejected = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetNegotiationOfferRejected: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.negotiation.upserted'
	if jsonDict["detail-type"] == "ae.asset.negotiation.upserted" {
		// try to unmarshal JSON data into AeAssetNegotiationUpserted
		err = json.Unmarshal(data, &dst.AeAssetNegotiationUpserted)
		if err == nil {
			return nil // data stored in dst.AeAssetNegotiationUpserted, return on the first match
		} else {
			dst.AeAssetNegotiationUpserted = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetNegotiationUpserted: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.not-sold'
	if jsonDict["detail-type"] == "ae.asset.not-sold" {
		// try to unmarshal JSON data into AeAssetNotSold
		err = json.Unmarshal(data, &dst.AeAssetNotSold)
		if err == nil {
			return nil // data stored in dst.AeAssetNotSold, return on the first match
		} else {
			dst.AeAssetNotSold = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetNotSold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.paid-status-updated'
	if jsonDict["detail-type"] == "ae.asset.paid-status-updated" {
		// try to unmarshal JSON data into AeAssetPaidStatusUpdated
		err = json.Unmarshal(data, &dst.AeAssetPaidStatusUpdated)
		if err == nil {
			return nil // data stored in dst.AeAssetPaidStatusUpdated, return on the first match
		} else {
			dst.AeAssetPaidStatusUpdated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetPaidStatusUpdated: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.sale-listing.removed.ams'
	if jsonDict["detail-type"] == "ae.asset.sale-listing.removed.ams" {
		// try to unmarshal JSON data into AeAssetSaleListingRemovedAms
		err = json.Unmarshal(data, &dst.AeAssetSaleListingRemovedAms)
		if err == nil {
			return nil // data stored in dst.AeAssetSaleListingRemovedAms, return on the first match
		} else {
			dst.AeAssetSaleListingRemovedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSaleListingRemovedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.sale-listing.upserted.ams'
	if jsonDict["detail-type"] == "ae.asset.sale-listing.upserted.ams" {
		// try to unmarshal JSON data into AeAssetSaleListingUpsertedAms
		err = json.Unmarshal(data, &dst.AeAssetSaleListingUpsertedAms)
		if err == nil {
			return nil // data stored in dst.AeAssetSaleListingUpsertedAms, return on the first match
		} else {
			dst.AeAssetSaleListingUpsertedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSaleListingUpsertedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.add-request-failed'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.add-request-failed" {
		// try to unmarshal JSON data into AeAssetSellerChargeAddRequestFailed
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeAddRequestFailed)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeAddRequestFailed, return on the first match
		} else {
			dst.AeAssetSellerChargeAddRequestFailed = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeAddRequestFailed: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.add-requested'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.add-requested" {
		// try to unmarshal JSON data into AeAssetSellerChargeAddRequested
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeAddRequested)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeAddRequested, return on the first match
		} else {
			dst.AeAssetSellerChargeAddRequested = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeAddRequested: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.add-requested.v2'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.add-requested.v2" {
		// try to unmarshal JSON data into AeAssetSellerChargeAddRequestedV2
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeAddRequestedV2)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeAddRequestedV2, return on the first match
		} else {
			dst.AeAssetSellerChargeAddRequestedV2 = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeAddRequestedV2: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.remove-failed'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.remove-failed" {
		// try to unmarshal JSON data into AeAssetSellerChargeRemoveFailed
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeRemoveFailed)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeRemoveFailed, return on the first match
		} else {
			dst.AeAssetSellerChargeRemoveFailed = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeRemoveFailed: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.remove-requested'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.remove-requested" {
		// try to unmarshal JSON data into AeAssetSellerChargeRemoveRequested
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeRemoveRequested)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeRemoveRequested, return on the first match
		} else {
			dst.AeAssetSellerChargeRemoveRequested = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeRemoveRequested: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.removed'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.removed" {
		// try to unmarshal JSON data into AeAssetSellerChargeRemoved
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeRemoved)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeRemoved, return on the first match
		} else {
			dst.AeAssetSellerChargeRemoved = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeRemoved: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.upsert'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.upsert" {
		// try to unmarshal JSON data into AeAssetSellerChargeUpsert
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeUpsert)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeUpsert, return on the first match
		} else {
			dst.AeAssetSellerChargeUpsert = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeUpsert: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.seller-charge.upsert.v2'
	if jsonDict["detail-type"] == "ae.asset.seller-charge.upsert.v2" {
		// try to unmarshal JSON data into AeAssetSellerChargeUpsertV2
		err = json.Unmarshal(data, &dst.AeAssetSellerChargeUpsertV2)
		if err == nil {
			return nil // data stored in dst.AeAssetSellerChargeUpsertV2, return on the first match
		} else {
			dst.AeAssetSellerChargeUpsertV2 = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSellerChargeUpsertV2: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.service.eligibility-updated'
	if jsonDict["detail-type"] == "ae.asset.service.eligibility-updated" {
		// try to unmarshal JSON data into AeAssetServiceEligibilityUpdated
		err = json.Unmarshal(data, &dst.AeAssetServiceEligibilityUpdated)
		if err == nil {
			return nil // data stored in dst.AeAssetServiceEligibilityUpdated, return on the first match
		} else {
			dst.AeAssetServiceEligibilityUpdated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetServiceEligibilityUpdated: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.sold-status-updated'
	if jsonDict["detail-type"] == "ae.asset.sold-status-updated" {
		// try to unmarshal JSON data into AeAssetSoldStatusUpdated
		err = json.Unmarshal(data, &dst.AeAssetSoldStatusUpdated)
		if err == nil {
			return nil // data stored in dst.AeAssetSoldStatusUpdated, return on the first match
		} else {
			dst.AeAssetSoldStatusUpdated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetSoldStatusUpdated: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.asset.updated.ams'
	if jsonDict["detail-type"] == "ae.asset.updated.ams" {
		// try to unmarshal JSON data into AeAssetUpdatedAms
		err = json.Unmarshal(data, &dst.AeAssetUpdatedAms)
		if err == nil {
			return nil // data stored in dst.AeAssetUpdatedAms, return on the first match
		} else {
			dst.AeAssetUpdatedAms = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeAssetUpdatedAms: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.deal.upserted'
	if jsonDict["detail-type"] == "ae.deal.upserted" {
		// try to unmarshal JSON data into AeDealUpserted
		err = json.Unmarshal(data, &dst.AeDealUpserted)
		if err == nil {
			return nil // data stored in dst.AeDealUpserted, return on the first match
		} else {
			dst.AeDealUpserted = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeDealUpserted: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.document.asset.added'
	if jsonDict["detail-type"] == "ae.document.asset.added" {
		// try to unmarshal JSON data into AeDocumentAssetAdded
		err = json.Unmarshal(data, &dst.AeDocumentAssetAdded)
		if err == nil {
			return nil // data stored in dst.AeDocumentAssetAdded, return on the first match
		} else {
			dst.AeDocumentAssetAdded = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeDocumentAssetAdded: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.document.asset.removed'
	if jsonDict["detail-type"] == "ae.document.asset.removed" {
		// try to unmarshal JSON data into AeDocumentAssetRemoved
		err = json.Unmarshal(data, &dst.AeDocumentAssetRemoved)
		if err == nil {
			return nil // data stored in dst.AeDocumentAssetRemoved, return on the first match
		} else {
			dst.AeDocumentAssetRemoved = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeDocumentAssetRemoved: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.notification.request-delivery'
	if jsonDict["detail-type"] == "ae.notification.request-delivery" {
		// try to unmarshal JSON data into AeNotificationRequestDelivery
		err = json.Unmarshal(data, &dst.AeNotificationRequestDelivery)
		if err == nil {
			return nil // data stored in dst.AeNotificationRequestDelivery, return on the first match
		} else {
			dst.AeNotificationRequestDelivery = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeNotificationRequestDelivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.cancelled'
	if jsonDict["detail-type"] == "ae.service.cancelled" {
		// try to unmarshal JSON data into AeServiceCancelled
		err = json.Unmarshal(data, &dst.AeServiceCancelled)
		if err == nil {
			return nil // data stored in dst.AeServiceCancelled, return on the first match
		} else {
			dst.AeServiceCancelled = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceCancelled: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.completed'
	if jsonDict["detail-type"] == "ae.service.completed" {
		// try to unmarshal JSON data into AeServiceCompleted
		err = json.Unmarshal(data, &dst.AeServiceCompleted)
		if err == nil {
			return nil // data stored in dst.AeServiceCompleted, return on the first match
		} else {
			dst.AeServiceCompleted = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceCompleted: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.order-placed'
	if jsonDict["detail-type"] == "ae.service.order-placed" {
		// try to unmarshal JSON data into AeServiceOrderPlaced
		err = json.Unmarshal(data, &dst.AeServiceOrderPlaced)
		if err == nil {
			return nil // data stored in dst.AeServiceOrderPlaced, return on the first match
		} else {
			dst.AeServiceOrderPlaced = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceOrderPlaced: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.order-rejected'
	if jsonDict["detail-type"] == "ae.service.order-rejected" {
		// try to unmarshal JSON data into AeServiceOrderRejected
		err = json.Unmarshal(data, &dst.AeServiceOrderRejected)
		if err == nil {
			return nil // data stored in dst.AeServiceOrderRejected, return on the first match
		} else {
			dst.AeServiceOrderRejected = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceOrderRejected: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.order-updated'
	if jsonDict["detail-type"] == "ae.service.order-updated" {
		// try to unmarshal JSON data into AeServiceOrderUpdated
		err = json.Unmarshal(data, &dst.AeServiceOrderUpdated)
		if err == nil {
			return nil // data stored in dst.AeServiceOrderUpdated, return on the first match
		} else {
			dst.AeServiceOrderUpdated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceOrderUpdated: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.ordered'
	if jsonDict["detail-type"] == "ae.service.ordered" {
		// try to unmarshal JSON data into AeServiceOrdered
		err = json.Unmarshal(data, &dst.AeServiceOrdered)
		if err == nil {
			return nil // data stored in dst.AeServiceOrdered, return on the first match
		} else {
			dst.AeServiceOrdered = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceOrdered: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.request'
	if jsonDict["detail-type"] == "ae.service.request" {
		// try to unmarshal JSON data into AeServiceRequest
		err = json.Unmarshal(data, &dst.AeServiceRequest)
		if err == nil {
			return nil // data stored in dst.AeServiceRequest, return on the first match
		} else {
			dst.AeServiceRequest = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.service.waived'
	if jsonDict["detail-type"] == "ae.service.waived" {
		// try to unmarshal JSON data into AeServiceWaived
		err = json.Unmarshal(data, &dst.AeServiceWaived)
		if err == nil {
			return nil // data stored in dst.AeServiceWaived, return on the first match
		} else {
			dst.AeServiceWaived = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeServiceWaived: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ae.user-info.advisory.data-source-updated'
	if jsonDict["detail-type"] == "ae.user-info.advisory.data-source-updated" {
		// try to unmarshal JSON data into AeUserInfoAdvisoryDataSourceUpdated
		err = json.Unmarshal(data, &dst.AeUserInfoAdvisoryDataSourceUpdated)
		if err == nil {
			return nil // data stored in dst.AeUserInfoAdvisoryDataSourceUpdated, return on the first match
		} else {
			dst.AeUserInfoAdvisoryDataSourceUpdated = nil
			return fmt.Errorf("failed to unmarshal EdgeEvent as AeUserInfoAdvisoryDataSourceUpdated: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EdgeEvent) MarshalJSON() ([]byte, error) {
	if src.AeAccountPaymentSourceRemovedAms != nil {
		return json.Marshal(&src.AeAccountPaymentSourceRemovedAms)
	}

	if src.AeAccountPaymentSourceUpsertAms != nil {
		return json.Marshal(&src.AeAccountPaymentSourceUpsertAms)
	}

	if src.AeAccountRemovedAms != nil {
		return json.Marshal(&src.AeAccountRemovedAms)
	}

	if src.AeAccountRepresentativePayerAuthorized != nil {
		return json.Marshal(&src.AeAccountRepresentativePayerAuthorized)
	}

	if src.AeAccountRepresentativePayerDeauthorized != nil {
		return json.Marshal(&src.AeAccountRepresentativePayerDeauthorized)
	}

	if src.AeAccountRepresentativeRemovedAms != nil {
		return json.Marshal(&src.AeAccountRepresentativeRemovedAms)
	}

	if src.AeAccountRepresentativeUpsertedAms != nil {
		return json.Marshal(&src.AeAccountRepresentativeUpsertedAms)
	}

	if src.AeAccountUpsertedAms != nil {
		return json.Marshal(&src.AeAccountUpsertedAms)
	}

	if src.AeAccountingPaymentSourceUpdated != nil {
		return json.Marshal(&src.AeAccountingPaymentSourceUpdated)
	}

	if src.AeAdvisoryAccountAms != nil {
		return json.Marshal(&src.AeAdvisoryAccountAms)
	}

	if src.AeAdvisoryAccountRepresentativesAms != nil {
		return json.Marshal(&src.AeAdvisoryAccountRepresentativesAms)
	}

	if src.AeAdvisoryAssetAms != nil {
		return json.Marshal(&src.AeAdvisoryAssetAms)
	}

	if src.AeAdvisoryRequestAccountAms != nil {
		return json.Marshal(&src.AeAdvisoryRequestAccountAms)
	}

	if src.AeAdvisoryRequestAsset != nil {
		return json.Marshal(&src.AeAdvisoryRequestAsset)
	}

	if src.AeAdvisoryRequestAssetSold != nil {
		return json.Marshal(&src.AeAdvisoryRequestAssetSold)
	}

	if src.AeAmsPaymentVendorUpsert != nil {
		return json.Marshal(&src.AeAmsPaymentVendorUpsert)
	}

	if src.AeAssetCheckedInAms != nil {
		return json.Marshal(&src.AeAssetCheckedInAms)
	}

	if src.AeAssetCheckedOutAms != nil {
		return json.Marshal(&src.AeAssetCheckedOutAms)
	}

	if src.AeAssetDealChargeRemoved != nil {
		return json.Marshal(&src.AeAssetDealChargeRemoved)
	}

	if src.AeAssetDealChargeUpsert != nil {
		return json.Marshal(&src.AeAssetDealChargeUpsert)
	}

	if src.AeAssetDealOfferAccepted != nil {
		return json.Marshal(&src.AeAssetDealOfferAccepted)
	}

	if src.AeAssetDealOfferMade != nil {
		return json.Marshal(&src.AeAssetDealOfferMade)
	}

	if src.AeAssetDealOfferRejected != nil {
		return json.Marshal(&src.AeAssetDealOfferRejected)
	}

	if src.AeAssetDealPaymentApplySource != nil {
		return json.Marshal(&src.AeAssetDealPaymentApplySource)
	}

	if src.AeAssetDealPaymentStatusChanged != nil {
		return json.Marshal(&src.AeAssetDealPaymentStatusChanged)
	}

	if src.AeAssetDealSold != nil {
		return json.Marshal(&src.AeAssetDealSold)
	}

	if src.AeAssetDealUnsold != nil {
		return json.Marshal(&src.AeAssetDealUnsold)
	}

	if src.AeAssetGatepassBuyerReleasable != nil {
		return json.Marshal(&src.AeAssetGatepassBuyerReleasable)
	}

	if src.AeAssetGatepassBuyerRevoked != nil {
		return json.Marshal(&src.AeAssetGatepassBuyerRevoked)
	}

	if src.AeAssetGatepassCreated != nil {
		return json.Marshal(&src.AeAssetGatepassCreated)
	}

	if src.AeAssetGatepassDelivered != nil {
		return json.Marshal(&src.AeAssetGatepassDelivered)
	}

	if src.AeAssetGatepassSendEmail != nil {
		return json.Marshal(&src.AeAssetGatepassSendEmail)
	}

	if src.AeAssetGatepassVoided != nil {
		return json.Marshal(&src.AeAssetGatepassVoided)
	}

	if src.AeAssetLabelFailed != nil {
		return json.Marshal(&src.AeAssetLabelFailed)
	}

	if src.AeAssetLabelGenerated != nil {
		return json.Marshal(&src.AeAssetLabelGenerated)
	}

	if src.AeAssetLabelRequested != nil {
		return json.Marshal(&src.AeAssetLabelRequested)
	}

	if src.AeAssetNegotiationNoteAdded != nil {
		return json.Marshal(&src.AeAssetNegotiationNoteAdded)
	}

	if src.AeAssetNegotiationOfferAccepted != nil {
		return json.Marshal(&src.AeAssetNegotiationOfferAccepted)
	}

	if src.AeAssetNegotiationOfferCountered != nil {
		return json.Marshal(&src.AeAssetNegotiationOfferCountered)
	}

	if src.AeAssetNegotiationOfferRejected != nil {
		return json.Marshal(&src.AeAssetNegotiationOfferRejected)
	}

	if src.AeAssetNegotiationUpserted != nil {
		return json.Marshal(&src.AeAssetNegotiationUpserted)
	}

	if src.AeAssetNotSold != nil {
		return json.Marshal(&src.AeAssetNotSold)
	}

	if src.AeAssetPaidStatusUpdated != nil {
		return json.Marshal(&src.AeAssetPaidStatusUpdated)
	}

	if src.AeAssetSaleListingRemovedAms != nil {
		return json.Marshal(&src.AeAssetSaleListingRemovedAms)
	}

	if src.AeAssetSaleListingUpsertedAms != nil {
		return json.Marshal(&src.AeAssetSaleListingUpsertedAms)
	}

	if src.AeAssetSellerChargeAddRequestFailed != nil {
		return json.Marshal(&src.AeAssetSellerChargeAddRequestFailed)
	}

	if src.AeAssetSellerChargeAddRequested != nil {
		return json.Marshal(&src.AeAssetSellerChargeAddRequested)
	}

	if src.AeAssetSellerChargeAddRequestedV2 != nil {
		return json.Marshal(&src.AeAssetSellerChargeAddRequestedV2)
	}

	if src.AeAssetSellerChargeRemoveFailed != nil {
		return json.Marshal(&src.AeAssetSellerChargeRemoveFailed)
	}

	if src.AeAssetSellerChargeRemoveRequested != nil {
		return json.Marshal(&src.AeAssetSellerChargeRemoveRequested)
	}

	if src.AeAssetSellerChargeRemoved != nil {
		return json.Marshal(&src.AeAssetSellerChargeRemoved)
	}

	if src.AeAssetSellerChargeUpsert != nil {
		return json.Marshal(&src.AeAssetSellerChargeUpsert)
	}

	if src.AeAssetSellerChargeUpsertV2 != nil {
		return json.Marshal(&src.AeAssetSellerChargeUpsertV2)
	}

	if src.AeAssetServiceEligibilityUpdated != nil {
		return json.Marshal(&src.AeAssetServiceEligibilityUpdated)
	}

	if src.AeAssetSoldStatusUpdated != nil {
		return json.Marshal(&src.AeAssetSoldStatusUpdated)
	}

	if src.AeAssetUpdatedAms != nil {
		return json.Marshal(&src.AeAssetUpdatedAms)
	}

	if src.AeDealUpserted != nil {
		return json.Marshal(&src.AeDealUpserted)
	}

	if src.AeDocumentAssetAdded != nil {
		return json.Marshal(&src.AeDocumentAssetAdded)
	}

	if src.AeDocumentAssetRemoved != nil {
		return json.Marshal(&src.AeDocumentAssetRemoved)
	}

	if src.AeNotificationRequestDelivery != nil {
		return json.Marshal(&src.AeNotificationRequestDelivery)
	}

	if src.AeServiceCancelled != nil {
		return json.Marshal(&src.AeServiceCancelled)
	}

	if src.AeServiceCompleted != nil {
		return json.Marshal(&src.AeServiceCompleted)
	}

	if src.AeServiceOrderPlaced != nil {
		return json.Marshal(&src.AeServiceOrderPlaced)
	}

	if src.AeServiceOrderRejected != nil {
		return json.Marshal(&src.AeServiceOrderRejected)
	}

	if src.AeServiceOrderUpdated != nil {
		return json.Marshal(&src.AeServiceOrderUpdated)
	}

	if src.AeServiceOrdered != nil {
		return json.Marshal(&src.AeServiceOrdered)
	}

	if src.AeServiceRequest != nil {
		return json.Marshal(&src.AeServiceRequest)
	}

	if src.AeServiceWaived != nil {
		return json.Marshal(&src.AeServiceWaived)
	}

	if src.AeUserInfoAdvisoryDataSourceUpdated != nil {
		return json.Marshal(&src.AeUserInfoAdvisoryDataSourceUpdated)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EdgeEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AeAccountPaymentSourceRemovedAms != nil {
		return obj.AeAccountPaymentSourceRemovedAms
	}

	if obj.AeAccountPaymentSourceUpsertAms != nil {
		return obj.AeAccountPaymentSourceUpsertAms
	}

	if obj.AeAccountRemovedAms != nil {
		return obj.AeAccountRemovedAms
	}

	if obj.AeAccountRepresentativePayerAuthorized != nil {
		return obj.AeAccountRepresentativePayerAuthorized
	}

	if obj.AeAccountRepresentativePayerDeauthorized != nil {
		return obj.AeAccountRepresentativePayerDeauthorized
	}

	if obj.AeAccountRepresentativeRemovedAms != nil {
		return obj.AeAccountRepresentativeRemovedAms
	}

	if obj.AeAccountRepresentativeUpsertedAms != nil {
		return obj.AeAccountRepresentativeUpsertedAms
	}

	if obj.AeAccountUpsertedAms != nil {
		return obj.AeAccountUpsertedAms
	}

	if obj.AeAccountingPaymentSourceUpdated != nil {
		return obj.AeAccountingPaymentSourceUpdated
	}

	if obj.AeAdvisoryAccountAms != nil {
		return obj.AeAdvisoryAccountAms
	}

	if obj.AeAdvisoryAccountRepresentativesAms != nil {
		return obj.AeAdvisoryAccountRepresentativesAms
	}

	if obj.AeAdvisoryAssetAms != nil {
		return obj.AeAdvisoryAssetAms
	}

	if obj.AeAdvisoryRequestAccountAms != nil {
		return obj.AeAdvisoryRequestAccountAms
	}

	if obj.AeAdvisoryRequestAsset != nil {
		return obj.AeAdvisoryRequestAsset
	}

	if obj.AeAdvisoryRequestAssetSold != nil {
		return obj.AeAdvisoryRequestAssetSold
	}

	if obj.AeAmsPaymentVendorUpsert != nil {
		return obj.AeAmsPaymentVendorUpsert
	}

	if obj.AeAssetCheckedInAms != nil {
		return obj.AeAssetCheckedInAms
	}

	if obj.AeAssetCheckedOutAms != nil {
		return obj.AeAssetCheckedOutAms
	}

	if obj.AeAssetDealChargeRemoved != nil {
		return obj.AeAssetDealChargeRemoved
	}

	if obj.AeAssetDealChargeUpsert != nil {
		return obj.AeAssetDealChargeUpsert
	}

	if obj.AeAssetDealOfferAccepted != nil {
		return obj.AeAssetDealOfferAccepted
	}

	if obj.AeAssetDealOfferMade != nil {
		return obj.AeAssetDealOfferMade
	}

	if obj.AeAssetDealOfferRejected != nil {
		return obj.AeAssetDealOfferRejected
	}

	if obj.AeAssetDealPaymentApplySource != nil {
		return obj.AeAssetDealPaymentApplySource
	}

	if obj.AeAssetDealPaymentStatusChanged != nil {
		return obj.AeAssetDealPaymentStatusChanged
	}

	if obj.AeAssetDealSold != nil {
		return obj.AeAssetDealSold
	}

	if obj.AeAssetDealUnsold != nil {
		return obj.AeAssetDealUnsold
	}

	if obj.AeAssetGatepassBuyerReleasable != nil {
		return obj.AeAssetGatepassBuyerReleasable
	}

	if obj.AeAssetGatepassBuyerRevoked != nil {
		return obj.AeAssetGatepassBuyerRevoked
	}

	if obj.AeAssetGatepassCreated != nil {
		return obj.AeAssetGatepassCreated
	}

	if obj.AeAssetGatepassDelivered != nil {
		return obj.AeAssetGatepassDelivered
	}

	if obj.AeAssetGatepassSendEmail != nil {
		return obj.AeAssetGatepassSendEmail
	}

	if obj.AeAssetGatepassVoided != nil {
		return obj.AeAssetGatepassVoided
	}

	if obj.AeAssetLabelFailed != nil {
		return obj.AeAssetLabelFailed
	}

	if obj.AeAssetLabelGenerated != nil {
		return obj.AeAssetLabelGenerated
	}

	if obj.AeAssetLabelRequested != nil {
		return obj.AeAssetLabelRequested
	}

	if obj.AeAssetNegotiationNoteAdded != nil {
		return obj.AeAssetNegotiationNoteAdded
	}

	if obj.AeAssetNegotiationOfferAccepted != nil {
		return obj.AeAssetNegotiationOfferAccepted
	}

	if obj.AeAssetNegotiationOfferCountered != nil {
		return obj.AeAssetNegotiationOfferCountered
	}

	if obj.AeAssetNegotiationOfferRejected != nil {
		return obj.AeAssetNegotiationOfferRejected
	}

	if obj.AeAssetNegotiationUpserted != nil {
		return obj.AeAssetNegotiationUpserted
	}

	if obj.AeAssetNotSold != nil {
		return obj.AeAssetNotSold
	}

	if obj.AeAssetPaidStatusUpdated != nil {
		return obj.AeAssetPaidStatusUpdated
	}

	if obj.AeAssetSaleListingRemovedAms != nil {
		return obj.AeAssetSaleListingRemovedAms
	}

	if obj.AeAssetSaleListingUpsertedAms != nil {
		return obj.AeAssetSaleListingUpsertedAms
	}

	if obj.AeAssetSellerChargeAddRequestFailed != nil {
		return obj.AeAssetSellerChargeAddRequestFailed
	}

	if obj.AeAssetSellerChargeAddRequested != nil {
		return obj.AeAssetSellerChargeAddRequested
	}

	if obj.AeAssetSellerChargeAddRequestedV2 != nil {
		return obj.AeAssetSellerChargeAddRequestedV2
	}

	if obj.AeAssetSellerChargeRemoveFailed != nil {
		return obj.AeAssetSellerChargeRemoveFailed
	}

	if obj.AeAssetSellerChargeRemoveRequested != nil {
		return obj.AeAssetSellerChargeRemoveRequested
	}

	if obj.AeAssetSellerChargeRemoved != nil {
		return obj.AeAssetSellerChargeRemoved
	}

	if obj.AeAssetSellerChargeUpsert != nil {
		return obj.AeAssetSellerChargeUpsert
	}

	if obj.AeAssetSellerChargeUpsertV2 != nil {
		return obj.AeAssetSellerChargeUpsertV2
	}

	if obj.AeAssetServiceEligibilityUpdated != nil {
		return obj.AeAssetServiceEligibilityUpdated
	}

	if obj.AeAssetSoldStatusUpdated != nil {
		return obj.AeAssetSoldStatusUpdated
	}

	if obj.AeAssetUpdatedAms != nil {
		return obj.AeAssetUpdatedAms
	}

	if obj.AeDealUpserted != nil {
		return obj.AeDealUpserted
	}

	if obj.AeDocumentAssetAdded != nil {
		return obj.AeDocumentAssetAdded
	}

	if obj.AeDocumentAssetRemoved != nil {
		return obj.AeDocumentAssetRemoved
	}

	if obj.AeNotificationRequestDelivery != nil {
		return obj.AeNotificationRequestDelivery
	}

	if obj.AeServiceCancelled != nil {
		return obj.AeServiceCancelled
	}

	if obj.AeServiceCompleted != nil {
		return obj.AeServiceCompleted
	}

	if obj.AeServiceOrderPlaced != nil {
		return obj.AeServiceOrderPlaced
	}

	if obj.AeServiceOrderRejected != nil {
		return obj.AeServiceOrderRejected
	}

	if obj.AeServiceOrderUpdated != nil {
		return obj.AeServiceOrderUpdated
	}

	if obj.AeServiceOrdered != nil {
		return obj.AeServiceOrdered
	}

	if obj.AeServiceRequest != nil {
		return obj.AeServiceRequest
	}

	if obj.AeServiceWaived != nil {
		return obj.AeServiceWaived
	}

	if obj.AeUserInfoAdvisoryDataSourceUpdated != nil {
		return obj.AeUserInfoAdvisoryDataSourceUpdated
	}

	// all schemas are nil
	return nil
}

type NullableEdgeEvent struct {
	value *EdgeEvent
	isSet bool
}

func (v NullableEdgeEvent) Get() *EdgeEvent {
	return v.value
}

func (v *NullableEdgeEvent) Set(val *EdgeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeEvent(val *EdgeEvent) *NullableEdgeEvent {
	return &NullableEdgeEvent{value: val, isSet: true}
}

func (v NullableEdgeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


