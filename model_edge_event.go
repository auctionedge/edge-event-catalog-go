/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// EdgeEvent - struct for EdgeEvent
type EdgeEvent struct {
	AeAccountPaymentSourceRemovedAms *AeAccountPaymentSourceRemovedAms
	AeAccountPaymentSourceUpsertAms *AeAccountPaymentSourceUpsertAms
	AeAccountRemovedAms *AeAccountRemovedAms
	AeAccountRepresentativePayerAuthorized *AeAccountRepresentativePayerAuthorized
	AeAccountRepresentativePayerDeauthorized *AeAccountRepresentativePayerDeauthorized
	AeAccountRepresentativeRemovedAms *AeAccountRepresentativeRemovedAms
	AeAccountRepresentativeUpsertedAms *AeAccountRepresentativeUpsertedAms
	AeAccountUpsertedAms *AeAccountUpsertedAms
	AeAccountingPaymentSourceUpdated *AeAccountingPaymentSourceUpdated
	AeAdvisoryAccountAms *AeAdvisoryAccountAms
	AeAdvisoryAccountRepresentativesAms *AeAdvisoryAccountRepresentativesAms
	AeAdvisoryAssetAms *AeAdvisoryAssetAms
	AeAdvisoryRequestAccountAms *AeAdvisoryRequestAccountAms
	AeAdvisoryRequestAsset *AeAdvisoryRequestAsset
	AeAdvisoryRequestAssetSold *AeAdvisoryRequestAssetSold
	AeAmsPaymentVendorUpsert *AeAmsPaymentVendorUpsert
	AeAssetCheckedInAms *AeAssetCheckedInAms
	AeAssetCheckedOutAms *AeAssetCheckedOutAms
	AeAssetDealChargeRemoved *AeAssetDealChargeRemoved
	AeAssetDealChargeUpsert *AeAssetDealChargeUpsert
	AeAssetDealOfferAccepted *AeAssetDealOfferAccepted
	AeAssetDealOfferMade *AeAssetDealOfferMade
	AeAssetDealOfferRejected *AeAssetDealOfferRejected
	AeAssetDealPaymentApplySource *AeAssetDealPaymentApplySource
	AeAssetDealPaymentStatusChanged *AeAssetDealPaymentStatusChanged
	AeAssetDealSold *AeAssetDealSold
	AeAssetDealUnsold *AeAssetDealUnsold
	AeAssetGatepassBuyerReleasable *AeAssetGatepassBuyerReleasable
	AeAssetGatepassBuyerRevoked *AeAssetGatepassBuyerRevoked
	AeAssetGatepassCreated *AeAssetGatepassCreated
	AeAssetGatepassDelivered *AeAssetGatepassDelivered
	AeAssetGatepassSendEmail *AeAssetGatepassSendEmail
	AeAssetGatepassVoided *AeAssetGatepassVoided
	AeAssetLabelFailed *AeAssetLabelFailed
	AeAssetLabelGenerated *AeAssetLabelGenerated
	AeAssetLabelRequested *AeAssetLabelRequested
	AeAssetNegotiationNoteAdded *AeAssetNegotiationNoteAdded
	AeAssetNegotiationOfferAccepted *AeAssetNegotiationOfferAccepted
	AeAssetNegotiationOfferCountered *AeAssetNegotiationOfferCountered
	AeAssetNegotiationOfferRejected *AeAssetNegotiationOfferRejected
	AeAssetNegotiationUpserted *AeAssetNegotiationUpserted
	AeAssetNotSold *AeAssetNotSold
	AeAssetPaidStatusUpdated *AeAssetPaidStatusUpdated
	AeAssetSaleListingRemovedAms *AeAssetSaleListingRemovedAms
	AeAssetSaleListingUpsertedAms *AeAssetSaleListingUpsertedAms
	AeAssetSellerChargeAddRequestFailed *AeAssetSellerChargeAddRequestFailed
	AeAssetSellerChargeAddRequested *AeAssetSellerChargeAddRequested
	AeAssetSellerChargeAddRequestedV2 *AeAssetSellerChargeAddRequestedV2
	AeAssetSellerChargeRemoveFailed *AeAssetSellerChargeRemoveFailed
	AeAssetSellerChargeRemoveRequested *AeAssetSellerChargeRemoveRequested
	AeAssetSellerChargeRemoved *AeAssetSellerChargeRemoved
	AeAssetSellerChargeUpsert *AeAssetSellerChargeUpsert
	AeAssetSellerChargeUpsertV2 *AeAssetSellerChargeUpsertV2
	AeAssetSoldStatusUpdated *AeAssetSoldStatusUpdated
	AeAssetUpdatedAms *AeAssetUpdatedAms
	AeDealUpserted *AeDealUpserted
	AeDocumentAssetAdded *AeDocumentAssetAdded
	AeDocumentAssetRemoved *AeDocumentAssetRemoved
	AeNotificationRequestDelivery *AeNotificationRequestDelivery
	AeServiceCancelled *AeServiceCancelled
	AeServiceCompleted *AeServiceCompleted
	AeServiceOrderPlaced *AeServiceOrderPlaced
	AeServiceOrderRejected *AeServiceOrderRejected
	AeServiceOrderUpdated *AeServiceOrderUpdated
	AeServiceOrdered *AeServiceOrdered
	AeServiceRequest *AeServiceRequest
	AeServiceWaived *AeServiceWaived
	AeUserInfoAdvisoryDataSourceUpdated *AeUserInfoAdvisoryDataSourceUpdated
}

// AeAccountPaymentSourceRemovedAmsAsEdgeEvent is a convenience function that returns AeAccountPaymentSourceRemovedAms wrapped in EdgeEvent
func AeAccountPaymentSourceRemovedAmsAsEdgeEvent(v *AeAccountPaymentSourceRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountPaymentSourceRemovedAms: v,
	}
}

// AeAccountPaymentSourceUpsertAmsAsEdgeEvent is a convenience function that returns AeAccountPaymentSourceUpsertAms wrapped in EdgeEvent
func AeAccountPaymentSourceUpsertAmsAsEdgeEvent(v *AeAccountPaymentSourceUpsertAms) EdgeEvent {
	return EdgeEvent{
		AeAccountPaymentSourceUpsertAms: v,
	}
}

// AeAccountRemovedAmsAsEdgeEvent is a convenience function that returns AeAccountRemovedAms wrapped in EdgeEvent
func AeAccountRemovedAmsAsEdgeEvent(v *AeAccountRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountRemovedAms: v,
	}
}

// AeAccountRepresentativePayerAuthorizedAsEdgeEvent is a convenience function that returns AeAccountRepresentativePayerAuthorized wrapped in EdgeEvent
func AeAccountRepresentativePayerAuthorizedAsEdgeEvent(v *AeAccountRepresentativePayerAuthorized) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativePayerAuthorized: v,
	}
}

// AeAccountRepresentativePayerDeauthorizedAsEdgeEvent is a convenience function that returns AeAccountRepresentativePayerDeauthorized wrapped in EdgeEvent
func AeAccountRepresentativePayerDeauthorizedAsEdgeEvent(v *AeAccountRepresentativePayerDeauthorized) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativePayerDeauthorized: v,
	}
}

// AeAccountRepresentativeRemovedAmsAsEdgeEvent is a convenience function that returns AeAccountRepresentativeRemovedAms wrapped in EdgeEvent
func AeAccountRepresentativeRemovedAmsAsEdgeEvent(v *AeAccountRepresentativeRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativeRemovedAms: v,
	}
}

// AeAccountRepresentativeUpsertedAmsAsEdgeEvent is a convenience function that returns AeAccountRepresentativeUpsertedAms wrapped in EdgeEvent
func AeAccountRepresentativeUpsertedAmsAsEdgeEvent(v *AeAccountRepresentativeUpsertedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountRepresentativeUpsertedAms: v,
	}
}

// AeAccountUpsertedAmsAsEdgeEvent is a convenience function that returns AeAccountUpsertedAms wrapped in EdgeEvent
func AeAccountUpsertedAmsAsEdgeEvent(v *AeAccountUpsertedAms) EdgeEvent {
	return EdgeEvent{
		AeAccountUpsertedAms: v,
	}
}

// AeAccountingPaymentSourceUpdatedAsEdgeEvent is a convenience function that returns AeAccountingPaymentSourceUpdated wrapped in EdgeEvent
func AeAccountingPaymentSourceUpdatedAsEdgeEvent(v *AeAccountingPaymentSourceUpdated) EdgeEvent {
	return EdgeEvent{
		AeAccountingPaymentSourceUpdated: v,
	}
}

// AeAdvisoryAccountAmsAsEdgeEvent is a convenience function that returns AeAdvisoryAccountAms wrapped in EdgeEvent
func AeAdvisoryAccountAmsAsEdgeEvent(v *AeAdvisoryAccountAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryAccountAms: v,
	}
}

// AeAdvisoryAccountRepresentativesAmsAsEdgeEvent is a convenience function that returns AeAdvisoryAccountRepresentativesAms wrapped in EdgeEvent
func AeAdvisoryAccountRepresentativesAmsAsEdgeEvent(v *AeAdvisoryAccountRepresentativesAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryAccountRepresentativesAms: v,
	}
}

// AeAdvisoryAssetAmsAsEdgeEvent is a convenience function that returns AeAdvisoryAssetAms wrapped in EdgeEvent
func AeAdvisoryAssetAmsAsEdgeEvent(v *AeAdvisoryAssetAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryAssetAms: v,
	}
}

// AeAdvisoryRequestAccountAmsAsEdgeEvent is a convenience function that returns AeAdvisoryRequestAccountAms wrapped in EdgeEvent
func AeAdvisoryRequestAccountAmsAsEdgeEvent(v *AeAdvisoryRequestAccountAms) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryRequestAccountAms: v,
	}
}

// AeAdvisoryRequestAssetAsEdgeEvent is a convenience function that returns AeAdvisoryRequestAsset wrapped in EdgeEvent
func AeAdvisoryRequestAssetAsEdgeEvent(v *AeAdvisoryRequestAsset) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryRequestAsset: v,
	}
}

// AeAdvisoryRequestAssetSoldAsEdgeEvent is a convenience function that returns AeAdvisoryRequestAssetSold wrapped in EdgeEvent
func AeAdvisoryRequestAssetSoldAsEdgeEvent(v *AeAdvisoryRequestAssetSold) EdgeEvent {
	return EdgeEvent{
		AeAdvisoryRequestAssetSold: v,
	}
}

// AeAmsPaymentVendorUpsertAsEdgeEvent is a convenience function that returns AeAmsPaymentVendorUpsert wrapped in EdgeEvent
func AeAmsPaymentVendorUpsertAsEdgeEvent(v *AeAmsPaymentVendorUpsert) EdgeEvent {
	return EdgeEvent{
		AeAmsPaymentVendorUpsert: v,
	}
}

// AeAssetCheckedInAmsAsEdgeEvent is a convenience function that returns AeAssetCheckedInAms wrapped in EdgeEvent
func AeAssetCheckedInAmsAsEdgeEvent(v *AeAssetCheckedInAms) EdgeEvent {
	return EdgeEvent{
		AeAssetCheckedInAms: v,
	}
}

// AeAssetCheckedOutAmsAsEdgeEvent is a convenience function that returns AeAssetCheckedOutAms wrapped in EdgeEvent
func AeAssetCheckedOutAmsAsEdgeEvent(v *AeAssetCheckedOutAms) EdgeEvent {
	return EdgeEvent{
		AeAssetCheckedOutAms: v,
	}
}

// AeAssetDealChargeRemovedAsEdgeEvent is a convenience function that returns AeAssetDealChargeRemoved wrapped in EdgeEvent
func AeAssetDealChargeRemovedAsEdgeEvent(v *AeAssetDealChargeRemoved) EdgeEvent {
	return EdgeEvent{
		AeAssetDealChargeRemoved: v,
	}
}

// AeAssetDealChargeUpsertAsEdgeEvent is a convenience function that returns AeAssetDealChargeUpsert wrapped in EdgeEvent
func AeAssetDealChargeUpsertAsEdgeEvent(v *AeAssetDealChargeUpsert) EdgeEvent {
	return EdgeEvent{
		AeAssetDealChargeUpsert: v,
	}
}

// AeAssetDealOfferAcceptedAsEdgeEvent is a convenience function that returns AeAssetDealOfferAccepted wrapped in EdgeEvent
func AeAssetDealOfferAcceptedAsEdgeEvent(v *AeAssetDealOfferAccepted) EdgeEvent {
	return EdgeEvent{
		AeAssetDealOfferAccepted: v,
	}
}

// AeAssetDealOfferMadeAsEdgeEvent is a convenience function that returns AeAssetDealOfferMade wrapped in EdgeEvent
func AeAssetDealOfferMadeAsEdgeEvent(v *AeAssetDealOfferMade) EdgeEvent {
	return EdgeEvent{
		AeAssetDealOfferMade: v,
	}
}

// AeAssetDealOfferRejectedAsEdgeEvent is a convenience function that returns AeAssetDealOfferRejected wrapped in EdgeEvent
func AeAssetDealOfferRejectedAsEdgeEvent(v *AeAssetDealOfferRejected) EdgeEvent {
	return EdgeEvent{
		AeAssetDealOfferRejected: v,
	}
}

// AeAssetDealPaymentApplySourceAsEdgeEvent is a convenience function that returns AeAssetDealPaymentApplySource wrapped in EdgeEvent
func AeAssetDealPaymentApplySourceAsEdgeEvent(v *AeAssetDealPaymentApplySource) EdgeEvent {
	return EdgeEvent{
		AeAssetDealPaymentApplySource: v,
	}
}

// AeAssetDealPaymentStatusChangedAsEdgeEvent is a convenience function that returns AeAssetDealPaymentStatusChanged wrapped in EdgeEvent
func AeAssetDealPaymentStatusChangedAsEdgeEvent(v *AeAssetDealPaymentStatusChanged) EdgeEvent {
	return EdgeEvent{
		AeAssetDealPaymentStatusChanged: v,
	}
}

// AeAssetDealSoldAsEdgeEvent is a convenience function that returns AeAssetDealSold wrapped in EdgeEvent
func AeAssetDealSoldAsEdgeEvent(v *AeAssetDealSold) EdgeEvent {
	return EdgeEvent{
		AeAssetDealSold: v,
	}
}

// AeAssetDealUnsoldAsEdgeEvent is a convenience function that returns AeAssetDealUnsold wrapped in EdgeEvent
func AeAssetDealUnsoldAsEdgeEvent(v *AeAssetDealUnsold) EdgeEvent {
	return EdgeEvent{
		AeAssetDealUnsold: v,
	}
}

// AeAssetGatepassBuyerReleasableAsEdgeEvent is a convenience function that returns AeAssetGatepassBuyerReleasable wrapped in EdgeEvent
func AeAssetGatepassBuyerReleasableAsEdgeEvent(v *AeAssetGatepassBuyerReleasable) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassBuyerReleasable: v,
	}
}

// AeAssetGatepassBuyerRevokedAsEdgeEvent is a convenience function that returns AeAssetGatepassBuyerRevoked wrapped in EdgeEvent
func AeAssetGatepassBuyerRevokedAsEdgeEvent(v *AeAssetGatepassBuyerRevoked) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassBuyerRevoked: v,
	}
}

// AeAssetGatepassCreatedAsEdgeEvent is a convenience function that returns AeAssetGatepassCreated wrapped in EdgeEvent
func AeAssetGatepassCreatedAsEdgeEvent(v *AeAssetGatepassCreated) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassCreated: v,
	}
}

// AeAssetGatepassDeliveredAsEdgeEvent is a convenience function that returns AeAssetGatepassDelivered wrapped in EdgeEvent
func AeAssetGatepassDeliveredAsEdgeEvent(v *AeAssetGatepassDelivered) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassDelivered: v,
	}
}

// AeAssetGatepassSendEmailAsEdgeEvent is a convenience function that returns AeAssetGatepassSendEmail wrapped in EdgeEvent
func AeAssetGatepassSendEmailAsEdgeEvent(v *AeAssetGatepassSendEmail) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassSendEmail: v,
	}
}

// AeAssetGatepassVoidedAsEdgeEvent is a convenience function that returns AeAssetGatepassVoided wrapped in EdgeEvent
func AeAssetGatepassVoidedAsEdgeEvent(v *AeAssetGatepassVoided) EdgeEvent {
	return EdgeEvent{
		AeAssetGatepassVoided: v,
	}
}

// AeAssetLabelFailedAsEdgeEvent is a convenience function that returns AeAssetLabelFailed wrapped in EdgeEvent
func AeAssetLabelFailedAsEdgeEvent(v *AeAssetLabelFailed) EdgeEvent {
	return EdgeEvent{
		AeAssetLabelFailed: v,
	}
}

// AeAssetLabelGeneratedAsEdgeEvent is a convenience function that returns AeAssetLabelGenerated wrapped in EdgeEvent
func AeAssetLabelGeneratedAsEdgeEvent(v *AeAssetLabelGenerated) EdgeEvent {
	return EdgeEvent{
		AeAssetLabelGenerated: v,
	}
}

// AeAssetLabelRequestedAsEdgeEvent is a convenience function that returns AeAssetLabelRequested wrapped in EdgeEvent
func AeAssetLabelRequestedAsEdgeEvent(v *AeAssetLabelRequested) EdgeEvent {
	return EdgeEvent{
		AeAssetLabelRequested: v,
	}
}

// AeAssetNegotiationNoteAddedAsEdgeEvent is a convenience function that returns AeAssetNegotiationNoteAdded wrapped in EdgeEvent
func AeAssetNegotiationNoteAddedAsEdgeEvent(v *AeAssetNegotiationNoteAdded) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationNoteAdded: v,
	}
}

// AeAssetNegotiationOfferAcceptedAsEdgeEvent is a convenience function that returns AeAssetNegotiationOfferAccepted wrapped in EdgeEvent
func AeAssetNegotiationOfferAcceptedAsEdgeEvent(v *AeAssetNegotiationOfferAccepted) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationOfferAccepted: v,
	}
}

// AeAssetNegotiationOfferCounteredAsEdgeEvent is a convenience function that returns AeAssetNegotiationOfferCountered wrapped in EdgeEvent
func AeAssetNegotiationOfferCounteredAsEdgeEvent(v *AeAssetNegotiationOfferCountered) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationOfferCountered: v,
	}
}

// AeAssetNegotiationOfferRejectedAsEdgeEvent is a convenience function that returns AeAssetNegotiationOfferRejected wrapped in EdgeEvent
func AeAssetNegotiationOfferRejectedAsEdgeEvent(v *AeAssetNegotiationOfferRejected) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationOfferRejected: v,
	}
}

// AeAssetNegotiationUpsertedAsEdgeEvent is a convenience function that returns AeAssetNegotiationUpserted wrapped in EdgeEvent
func AeAssetNegotiationUpsertedAsEdgeEvent(v *AeAssetNegotiationUpserted) EdgeEvent {
	return EdgeEvent{
		AeAssetNegotiationUpserted: v,
	}
}

// AeAssetNotSoldAsEdgeEvent is a convenience function that returns AeAssetNotSold wrapped in EdgeEvent
func AeAssetNotSoldAsEdgeEvent(v *AeAssetNotSold) EdgeEvent {
	return EdgeEvent{
		AeAssetNotSold: v,
	}
}

// AeAssetPaidStatusUpdatedAsEdgeEvent is a convenience function that returns AeAssetPaidStatusUpdated wrapped in EdgeEvent
func AeAssetPaidStatusUpdatedAsEdgeEvent(v *AeAssetPaidStatusUpdated) EdgeEvent {
	return EdgeEvent{
		AeAssetPaidStatusUpdated: v,
	}
}

// AeAssetSaleListingRemovedAmsAsEdgeEvent is a convenience function that returns AeAssetSaleListingRemovedAms wrapped in EdgeEvent
func AeAssetSaleListingRemovedAmsAsEdgeEvent(v *AeAssetSaleListingRemovedAms) EdgeEvent {
	return EdgeEvent{
		AeAssetSaleListingRemovedAms: v,
	}
}

// AeAssetSaleListingUpsertedAmsAsEdgeEvent is a convenience function that returns AeAssetSaleListingUpsertedAms wrapped in EdgeEvent
func AeAssetSaleListingUpsertedAmsAsEdgeEvent(v *AeAssetSaleListingUpsertedAms) EdgeEvent {
	return EdgeEvent{
		AeAssetSaleListingUpsertedAms: v,
	}
}

// AeAssetSellerChargeAddRequestFailedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeAddRequestFailed wrapped in EdgeEvent
func AeAssetSellerChargeAddRequestFailedAsEdgeEvent(v *AeAssetSellerChargeAddRequestFailed) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeAddRequestFailed: v,
	}
}

// AeAssetSellerChargeAddRequestedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeAddRequested wrapped in EdgeEvent
func AeAssetSellerChargeAddRequestedAsEdgeEvent(v *AeAssetSellerChargeAddRequested) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeAddRequested: v,
	}
}

// AeAssetSellerChargeAddRequestedV2AsEdgeEvent is a convenience function that returns AeAssetSellerChargeAddRequestedV2 wrapped in EdgeEvent
func AeAssetSellerChargeAddRequestedV2AsEdgeEvent(v *AeAssetSellerChargeAddRequestedV2) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeAddRequestedV2: v,
	}
}

// AeAssetSellerChargeRemoveFailedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeRemoveFailed wrapped in EdgeEvent
func AeAssetSellerChargeRemoveFailedAsEdgeEvent(v *AeAssetSellerChargeRemoveFailed) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeRemoveFailed: v,
	}
}

// AeAssetSellerChargeRemoveRequestedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeRemoveRequested wrapped in EdgeEvent
func AeAssetSellerChargeRemoveRequestedAsEdgeEvent(v *AeAssetSellerChargeRemoveRequested) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeRemoveRequested: v,
	}
}

// AeAssetSellerChargeRemovedAsEdgeEvent is a convenience function that returns AeAssetSellerChargeRemoved wrapped in EdgeEvent
func AeAssetSellerChargeRemovedAsEdgeEvent(v *AeAssetSellerChargeRemoved) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeRemoved: v,
	}
}

// AeAssetSellerChargeUpsertAsEdgeEvent is a convenience function that returns AeAssetSellerChargeUpsert wrapped in EdgeEvent
func AeAssetSellerChargeUpsertAsEdgeEvent(v *AeAssetSellerChargeUpsert) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeUpsert: v,
	}
}

// AeAssetSellerChargeUpsertV2AsEdgeEvent is a convenience function that returns AeAssetSellerChargeUpsertV2 wrapped in EdgeEvent
func AeAssetSellerChargeUpsertV2AsEdgeEvent(v *AeAssetSellerChargeUpsertV2) EdgeEvent {
	return EdgeEvent{
		AeAssetSellerChargeUpsertV2: v,
	}
}

// AeAssetSoldStatusUpdatedAsEdgeEvent is a convenience function that returns AeAssetSoldStatusUpdated wrapped in EdgeEvent
func AeAssetSoldStatusUpdatedAsEdgeEvent(v *AeAssetSoldStatusUpdated) EdgeEvent {
	return EdgeEvent{
		AeAssetSoldStatusUpdated: v,
	}
}

// AeAssetUpdatedAmsAsEdgeEvent is a convenience function that returns AeAssetUpdatedAms wrapped in EdgeEvent
func AeAssetUpdatedAmsAsEdgeEvent(v *AeAssetUpdatedAms) EdgeEvent {
	return EdgeEvent{
		AeAssetUpdatedAms: v,
	}
}

// AeDealUpsertedAsEdgeEvent is a convenience function that returns AeDealUpserted wrapped in EdgeEvent
func AeDealUpsertedAsEdgeEvent(v *AeDealUpserted) EdgeEvent {
	return EdgeEvent{
		AeDealUpserted: v,
	}
}

// AeDocumentAssetAddedAsEdgeEvent is a convenience function that returns AeDocumentAssetAdded wrapped in EdgeEvent
func AeDocumentAssetAddedAsEdgeEvent(v *AeDocumentAssetAdded) EdgeEvent {
	return EdgeEvent{
		AeDocumentAssetAdded: v,
	}
}

// AeDocumentAssetRemovedAsEdgeEvent is a convenience function that returns AeDocumentAssetRemoved wrapped in EdgeEvent
func AeDocumentAssetRemovedAsEdgeEvent(v *AeDocumentAssetRemoved) EdgeEvent {
	return EdgeEvent{
		AeDocumentAssetRemoved: v,
	}
}

// AeNotificationRequestDeliveryAsEdgeEvent is a convenience function that returns AeNotificationRequestDelivery wrapped in EdgeEvent
func AeNotificationRequestDeliveryAsEdgeEvent(v *AeNotificationRequestDelivery) EdgeEvent {
	return EdgeEvent{
		AeNotificationRequestDelivery: v,
	}
}

// AeServiceCancelledAsEdgeEvent is a convenience function that returns AeServiceCancelled wrapped in EdgeEvent
func AeServiceCancelledAsEdgeEvent(v *AeServiceCancelled) EdgeEvent {
	return EdgeEvent{
		AeServiceCancelled: v,
	}
}

// AeServiceCompletedAsEdgeEvent is a convenience function that returns AeServiceCompleted wrapped in EdgeEvent
func AeServiceCompletedAsEdgeEvent(v *AeServiceCompleted) EdgeEvent {
	return EdgeEvent{
		AeServiceCompleted: v,
	}
}

// AeServiceOrderPlacedAsEdgeEvent is a convenience function that returns AeServiceOrderPlaced wrapped in EdgeEvent
func AeServiceOrderPlacedAsEdgeEvent(v *AeServiceOrderPlaced) EdgeEvent {
	return EdgeEvent{
		AeServiceOrderPlaced: v,
	}
}

// AeServiceOrderRejectedAsEdgeEvent is a convenience function that returns AeServiceOrderRejected wrapped in EdgeEvent
func AeServiceOrderRejectedAsEdgeEvent(v *AeServiceOrderRejected) EdgeEvent {
	return EdgeEvent{
		AeServiceOrderRejected: v,
	}
}

// AeServiceOrderUpdatedAsEdgeEvent is a convenience function that returns AeServiceOrderUpdated wrapped in EdgeEvent
func AeServiceOrderUpdatedAsEdgeEvent(v *AeServiceOrderUpdated) EdgeEvent {
	return EdgeEvent{
		AeServiceOrderUpdated: v,
	}
}

// AeServiceOrderedAsEdgeEvent is a convenience function that returns AeServiceOrdered wrapped in EdgeEvent
func AeServiceOrderedAsEdgeEvent(v *AeServiceOrdered) EdgeEvent {
	return EdgeEvent{
		AeServiceOrdered: v,
	}
}

// AeServiceRequestAsEdgeEvent is a convenience function that returns AeServiceRequest wrapped in EdgeEvent
func AeServiceRequestAsEdgeEvent(v *AeServiceRequest) EdgeEvent {
	return EdgeEvent{
		AeServiceRequest: v,
	}
}

// AeServiceWaivedAsEdgeEvent is a convenience function that returns AeServiceWaived wrapped in EdgeEvent
func AeServiceWaivedAsEdgeEvent(v *AeServiceWaived) EdgeEvent {
	return EdgeEvent{
		AeServiceWaived: v,
	}
}

// AeUserInfoAdvisoryDataSourceUpdatedAsEdgeEvent is a convenience function that returns AeUserInfoAdvisoryDataSourceUpdated wrapped in EdgeEvent
func AeUserInfoAdvisoryDataSourceUpdatedAsEdgeEvent(v *AeUserInfoAdvisoryDataSourceUpdated) EdgeEvent {
	return EdgeEvent{
		AeUserInfoAdvisoryDataSourceUpdated: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EdgeEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AeAccountPaymentSourceRemovedAms
	err = newStrictDecoder(data).Decode(&dst.AeAccountPaymentSourceRemovedAms)
	if err == nil {
		jsonAeAccountPaymentSourceRemovedAms, _ := json.Marshal(dst.AeAccountPaymentSourceRemovedAms)
		if string(jsonAeAccountPaymentSourceRemovedAms) == "{}" { // empty struct
			dst.AeAccountPaymentSourceRemovedAms = nil
		} else {
			if err = validator.Validate(dst.AeAccountPaymentSourceRemovedAms); err != nil {
				dst.AeAccountPaymentSourceRemovedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountPaymentSourceRemovedAms = nil
	}

	// try to unmarshal data into AeAccountPaymentSourceUpsertAms
	err = newStrictDecoder(data).Decode(&dst.AeAccountPaymentSourceUpsertAms)
	if err == nil {
		jsonAeAccountPaymentSourceUpsertAms, _ := json.Marshal(dst.AeAccountPaymentSourceUpsertAms)
		if string(jsonAeAccountPaymentSourceUpsertAms) == "{}" { // empty struct
			dst.AeAccountPaymentSourceUpsertAms = nil
		} else {
			if err = validator.Validate(dst.AeAccountPaymentSourceUpsertAms); err != nil {
				dst.AeAccountPaymentSourceUpsertAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountPaymentSourceUpsertAms = nil
	}

	// try to unmarshal data into AeAccountRemovedAms
	err = newStrictDecoder(data).Decode(&dst.AeAccountRemovedAms)
	if err == nil {
		jsonAeAccountRemovedAms, _ := json.Marshal(dst.AeAccountRemovedAms)
		if string(jsonAeAccountRemovedAms) == "{}" { // empty struct
			dst.AeAccountRemovedAms = nil
		} else {
			if err = validator.Validate(dst.AeAccountRemovedAms); err != nil {
				dst.AeAccountRemovedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountRemovedAms = nil
	}

	// try to unmarshal data into AeAccountRepresentativePayerAuthorized
	err = newStrictDecoder(data).Decode(&dst.AeAccountRepresentativePayerAuthorized)
	if err == nil {
		jsonAeAccountRepresentativePayerAuthorized, _ := json.Marshal(dst.AeAccountRepresentativePayerAuthorized)
		if string(jsonAeAccountRepresentativePayerAuthorized) == "{}" { // empty struct
			dst.AeAccountRepresentativePayerAuthorized = nil
		} else {
			if err = validator.Validate(dst.AeAccountRepresentativePayerAuthorized); err != nil {
				dst.AeAccountRepresentativePayerAuthorized = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountRepresentativePayerAuthorized = nil
	}

	// try to unmarshal data into AeAccountRepresentativePayerDeauthorized
	err = newStrictDecoder(data).Decode(&dst.AeAccountRepresentativePayerDeauthorized)
	if err == nil {
		jsonAeAccountRepresentativePayerDeauthorized, _ := json.Marshal(dst.AeAccountRepresentativePayerDeauthorized)
		if string(jsonAeAccountRepresentativePayerDeauthorized) == "{}" { // empty struct
			dst.AeAccountRepresentativePayerDeauthorized = nil
		} else {
			if err = validator.Validate(dst.AeAccountRepresentativePayerDeauthorized); err != nil {
				dst.AeAccountRepresentativePayerDeauthorized = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountRepresentativePayerDeauthorized = nil
	}

	// try to unmarshal data into AeAccountRepresentativeRemovedAms
	err = newStrictDecoder(data).Decode(&dst.AeAccountRepresentativeRemovedAms)
	if err == nil {
		jsonAeAccountRepresentativeRemovedAms, _ := json.Marshal(dst.AeAccountRepresentativeRemovedAms)
		if string(jsonAeAccountRepresentativeRemovedAms) == "{}" { // empty struct
			dst.AeAccountRepresentativeRemovedAms = nil
		} else {
			if err = validator.Validate(dst.AeAccountRepresentativeRemovedAms); err != nil {
				dst.AeAccountRepresentativeRemovedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountRepresentativeRemovedAms = nil
	}

	// try to unmarshal data into AeAccountRepresentativeUpsertedAms
	err = newStrictDecoder(data).Decode(&dst.AeAccountRepresentativeUpsertedAms)
	if err == nil {
		jsonAeAccountRepresentativeUpsertedAms, _ := json.Marshal(dst.AeAccountRepresentativeUpsertedAms)
		if string(jsonAeAccountRepresentativeUpsertedAms) == "{}" { // empty struct
			dst.AeAccountRepresentativeUpsertedAms = nil
		} else {
			if err = validator.Validate(dst.AeAccountRepresentativeUpsertedAms); err != nil {
				dst.AeAccountRepresentativeUpsertedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountRepresentativeUpsertedAms = nil
	}

	// try to unmarshal data into AeAccountUpsertedAms
	err = newStrictDecoder(data).Decode(&dst.AeAccountUpsertedAms)
	if err == nil {
		jsonAeAccountUpsertedAms, _ := json.Marshal(dst.AeAccountUpsertedAms)
		if string(jsonAeAccountUpsertedAms) == "{}" { // empty struct
			dst.AeAccountUpsertedAms = nil
		} else {
			if err = validator.Validate(dst.AeAccountUpsertedAms); err != nil {
				dst.AeAccountUpsertedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountUpsertedAms = nil
	}

	// try to unmarshal data into AeAccountingPaymentSourceUpdated
	err = newStrictDecoder(data).Decode(&dst.AeAccountingPaymentSourceUpdated)
	if err == nil {
		jsonAeAccountingPaymentSourceUpdated, _ := json.Marshal(dst.AeAccountingPaymentSourceUpdated)
		if string(jsonAeAccountingPaymentSourceUpdated) == "{}" { // empty struct
			dst.AeAccountingPaymentSourceUpdated = nil
		} else {
			if err = validator.Validate(dst.AeAccountingPaymentSourceUpdated); err != nil {
				dst.AeAccountingPaymentSourceUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAccountingPaymentSourceUpdated = nil
	}

	// try to unmarshal data into AeAdvisoryAccountAms
	err = newStrictDecoder(data).Decode(&dst.AeAdvisoryAccountAms)
	if err == nil {
		jsonAeAdvisoryAccountAms, _ := json.Marshal(dst.AeAdvisoryAccountAms)
		if string(jsonAeAdvisoryAccountAms) == "{}" { // empty struct
			dst.AeAdvisoryAccountAms = nil
		} else {
			if err = validator.Validate(dst.AeAdvisoryAccountAms); err != nil {
				dst.AeAdvisoryAccountAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAdvisoryAccountAms = nil
	}

	// try to unmarshal data into AeAdvisoryAccountRepresentativesAms
	err = newStrictDecoder(data).Decode(&dst.AeAdvisoryAccountRepresentativesAms)
	if err == nil {
		jsonAeAdvisoryAccountRepresentativesAms, _ := json.Marshal(dst.AeAdvisoryAccountRepresentativesAms)
		if string(jsonAeAdvisoryAccountRepresentativesAms) == "{}" { // empty struct
			dst.AeAdvisoryAccountRepresentativesAms = nil
		} else {
			if err = validator.Validate(dst.AeAdvisoryAccountRepresentativesAms); err != nil {
				dst.AeAdvisoryAccountRepresentativesAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAdvisoryAccountRepresentativesAms = nil
	}

	// try to unmarshal data into AeAdvisoryAssetAms
	err = newStrictDecoder(data).Decode(&dst.AeAdvisoryAssetAms)
	if err == nil {
		jsonAeAdvisoryAssetAms, _ := json.Marshal(dst.AeAdvisoryAssetAms)
		if string(jsonAeAdvisoryAssetAms) == "{}" { // empty struct
			dst.AeAdvisoryAssetAms = nil
		} else {
			if err = validator.Validate(dst.AeAdvisoryAssetAms); err != nil {
				dst.AeAdvisoryAssetAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAdvisoryAssetAms = nil
	}

	// try to unmarshal data into AeAdvisoryRequestAccountAms
	err = newStrictDecoder(data).Decode(&dst.AeAdvisoryRequestAccountAms)
	if err == nil {
		jsonAeAdvisoryRequestAccountAms, _ := json.Marshal(dst.AeAdvisoryRequestAccountAms)
		if string(jsonAeAdvisoryRequestAccountAms) == "{}" { // empty struct
			dst.AeAdvisoryRequestAccountAms = nil
		} else {
			if err = validator.Validate(dst.AeAdvisoryRequestAccountAms); err != nil {
				dst.AeAdvisoryRequestAccountAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAdvisoryRequestAccountAms = nil
	}

	// try to unmarshal data into AeAdvisoryRequestAsset
	err = newStrictDecoder(data).Decode(&dst.AeAdvisoryRequestAsset)
	if err == nil {
		jsonAeAdvisoryRequestAsset, _ := json.Marshal(dst.AeAdvisoryRequestAsset)
		if string(jsonAeAdvisoryRequestAsset) == "{}" { // empty struct
			dst.AeAdvisoryRequestAsset = nil
		} else {
			if err = validator.Validate(dst.AeAdvisoryRequestAsset); err != nil {
				dst.AeAdvisoryRequestAsset = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAdvisoryRequestAsset = nil
	}

	// try to unmarshal data into AeAdvisoryRequestAssetSold
	err = newStrictDecoder(data).Decode(&dst.AeAdvisoryRequestAssetSold)
	if err == nil {
		jsonAeAdvisoryRequestAssetSold, _ := json.Marshal(dst.AeAdvisoryRequestAssetSold)
		if string(jsonAeAdvisoryRequestAssetSold) == "{}" { // empty struct
			dst.AeAdvisoryRequestAssetSold = nil
		} else {
			if err = validator.Validate(dst.AeAdvisoryRequestAssetSold); err != nil {
				dst.AeAdvisoryRequestAssetSold = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAdvisoryRequestAssetSold = nil
	}

	// try to unmarshal data into AeAmsPaymentVendorUpsert
	err = newStrictDecoder(data).Decode(&dst.AeAmsPaymentVendorUpsert)
	if err == nil {
		jsonAeAmsPaymentVendorUpsert, _ := json.Marshal(dst.AeAmsPaymentVendorUpsert)
		if string(jsonAeAmsPaymentVendorUpsert) == "{}" { // empty struct
			dst.AeAmsPaymentVendorUpsert = nil
		} else {
			if err = validator.Validate(dst.AeAmsPaymentVendorUpsert); err != nil {
				dst.AeAmsPaymentVendorUpsert = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAmsPaymentVendorUpsert = nil
	}

	// try to unmarshal data into AeAssetCheckedInAms
	err = newStrictDecoder(data).Decode(&dst.AeAssetCheckedInAms)
	if err == nil {
		jsonAeAssetCheckedInAms, _ := json.Marshal(dst.AeAssetCheckedInAms)
		if string(jsonAeAssetCheckedInAms) == "{}" { // empty struct
			dst.AeAssetCheckedInAms = nil
		} else {
			if err = validator.Validate(dst.AeAssetCheckedInAms); err != nil {
				dst.AeAssetCheckedInAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetCheckedInAms = nil
	}

	// try to unmarshal data into AeAssetCheckedOutAms
	err = newStrictDecoder(data).Decode(&dst.AeAssetCheckedOutAms)
	if err == nil {
		jsonAeAssetCheckedOutAms, _ := json.Marshal(dst.AeAssetCheckedOutAms)
		if string(jsonAeAssetCheckedOutAms) == "{}" { // empty struct
			dst.AeAssetCheckedOutAms = nil
		} else {
			if err = validator.Validate(dst.AeAssetCheckedOutAms); err != nil {
				dst.AeAssetCheckedOutAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetCheckedOutAms = nil
	}

	// try to unmarshal data into AeAssetDealChargeRemoved
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealChargeRemoved)
	if err == nil {
		jsonAeAssetDealChargeRemoved, _ := json.Marshal(dst.AeAssetDealChargeRemoved)
		if string(jsonAeAssetDealChargeRemoved) == "{}" { // empty struct
			dst.AeAssetDealChargeRemoved = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealChargeRemoved); err != nil {
				dst.AeAssetDealChargeRemoved = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealChargeRemoved = nil
	}

	// try to unmarshal data into AeAssetDealChargeUpsert
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealChargeUpsert)
	if err == nil {
		jsonAeAssetDealChargeUpsert, _ := json.Marshal(dst.AeAssetDealChargeUpsert)
		if string(jsonAeAssetDealChargeUpsert) == "{}" { // empty struct
			dst.AeAssetDealChargeUpsert = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealChargeUpsert); err != nil {
				dst.AeAssetDealChargeUpsert = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealChargeUpsert = nil
	}

	// try to unmarshal data into AeAssetDealOfferAccepted
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealOfferAccepted)
	if err == nil {
		jsonAeAssetDealOfferAccepted, _ := json.Marshal(dst.AeAssetDealOfferAccepted)
		if string(jsonAeAssetDealOfferAccepted) == "{}" { // empty struct
			dst.AeAssetDealOfferAccepted = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealOfferAccepted); err != nil {
				dst.AeAssetDealOfferAccepted = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealOfferAccepted = nil
	}

	// try to unmarshal data into AeAssetDealOfferMade
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealOfferMade)
	if err == nil {
		jsonAeAssetDealOfferMade, _ := json.Marshal(dst.AeAssetDealOfferMade)
		if string(jsonAeAssetDealOfferMade) == "{}" { // empty struct
			dst.AeAssetDealOfferMade = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealOfferMade); err != nil {
				dst.AeAssetDealOfferMade = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealOfferMade = nil
	}

	// try to unmarshal data into AeAssetDealOfferRejected
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealOfferRejected)
	if err == nil {
		jsonAeAssetDealOfferRejected, _ := json.Marshal(dst.AeAssetDealOfferRejected)
		if string(jsonAeAssetDealOfferRejected) == "{}" { // empty struct
			dst.AeAssetDealOfferRejected = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealOfferRejected); err != nil {
				dst.AeAssetDealOfferRejected = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealOfferRejected = nil
	}

	// try to unmarshal data into AeAssetDealPaymentApplySource
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealPaymentApplySource)
	if err == nil {
		jsonAeAssetDealPaymentApplySource, _ := json.Marshal(dst.AeAssetDealPaymentApplySource)
		if string(jsonAeAssetDealPaymentApplySource) == "{}" { // empty struct
			dst.AeAssetDealPaymentApplySource = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealPaymentApplySource); err != nil {
				dst.AeAssetDealPaymentApplySource = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealPaymentApplySource = nil
	}

	// try to unmarshal data into AeAssetDealPaymentStatusChanged
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealPaymentStatusChanged)
	if err == nil {
		jsonAeAssetDealPaymentStatusChanged, _ := json.Marshal(dst.AeAssetDealPaymentStatusChanged)
		if string(jsonAeAssetDealPaymentStatusChanged) == "{}" { // empty struct
			dst.AeAssetDealPaymentStatusChanged = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealPaymentStatusChanged); err != nil {
				dst.AeAssetDealPaymentStatusChanged = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealPaymentStatusChanged = nil
	}

	// try to unmarshal data into AeAssetDealSold
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealSold)
	if err == nil {
		jsonAeAssetDealSold, _ := json.Marshal(dst.AeAssetDealSold)
		if string(jsonAeAssetDealSold) == "{}" { // empty struct
			dst.AeAssetDealSold = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealSold); err != nil {
				dst.AeAssetDealSold = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealSold = nil
	}

	// try to unmarshal data into AeAssetDealUnsold
	err = newStrictDecoder(data).Decode(&dst.AeAssetDealUnsold)
	if err == nil {
		jsonAeAssetDealUnsold, _ := json.Marshal(dst.AeAssetDealUnsold)
		if string(jsonAeAssetDealUnsold) == "{}" { // empty struct
			dst.AeAssetDealUnsold = nil
		} else {
			if err = validator.Validate(dst.AeAssetDealUnsold); err != nil {
				dst.AeAssetDealUnsold = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetDealUnsold = nil
	}

	// try to unmarshal data into AeAssetGatepassBuyerReleasable
	err = newStrictDecoder(data).Decode(&dst.AeAssetGatepassBuyerReleasable)
	if err == nil {
		jsonAeAssetGatepassBuyerReleasable, _ := json.Marshal(dst.AeAssetGatepassBuyerReleasable)
		if string(jsonAeAssetGatepassBuyerReleasable) == "{}" { // empty struct
			dst.AeAssetGatepassBuyerReleasable = nil
		} else {
			if err = validator.Validate(dst.AeAssetGatepassBuyerReleasable); err != nil {
				dst.AeAssetGatepassBuyerReleasable = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetGatepassBuyerReleasable = nil
	}

	// try to unmarshal data into AeAssetGatepassBuyerRevoked
	err = newStrictDecoder(data).Decode(&dst.AeAssetGatepassBuyerRevoked)
	if err == nil {
		jsonAeAssetGatepassBuyerRevoked, _ := json.Marshal(dst.AeAssetGatepassBuyerRevoked)
		if string(jsonAeAssetGatepassBuyerRevoked) == "{}" { // empty struct
			dst.AeAssetGatepassBuyerRevoked = nil
		} else {
			if err = validator.Validate(dst.AeAssetGatepassBuyerRevoked); err != nil {
				dst.AeAssetGatepassBuyerRevoked = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetGatepassBuyerRevoked = nil
	}

	// try to unmarshal data into AeAssetGatepassCreated
	err = newStrictDecoder(data).Decode(&dst.AeAssetGatepassCreated)
	if err == nil {
		jsonAeAssetGatepassCreated, _ := json.Marshal(dst.AeAssetGatepassCreated)
		if string(jsonAeAssetGatepassCreated) == "{}" { // empty struct
			dst.AeAssetGatepassCreated = nil
		} else {
			if err = validator.Validate(dst.AeAssetGatepassCreated); err != nil {
				dst.AeAssetGatepassCreated = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetGatepassCreated = nil
	}

	// try to unmarshal data into AeAssetGatepassDelivered
	err = newStrictDecoder(data).Decode(&dst.AeAssetGatepassDelivered)
	if err == nil {
		jsonAeAssetGatepassDelivered, _ := json.Marshal(dst.AeAssetGatepassDelivered)
		if string(jsonAeAssetGatepassDelivered) == "{}" { // empty struct
			dst.AeAssetGatepassDelivered = nil
		} else {
			if err = validator.Validate(dst.AeAssetGatepassDelivered); err != nil {
				dst.AeAssetGatepassDelivered = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetGatepassDelivered = nil
	}

	// try to unmarshal data into AeAssetGatepassSendEmail
	err = newStrictDecoder(data).Decode(&dst.AeAssetGatepassSendEmail)
	if err == nil {
		jsonAeAssetGatepassSendEmail, _ := json.Marshal(dst.AeAssetGatepassSendEmail)
		if string(jsonAeAssetGatepassSendEmail) == "{}" { // empty struct
			dst.AeAssetGatepassSendEmail = nil
		} else {
			if err = validator.Validate(dst.AeAssetGatepassSendEmail); err != nil {
				dst.AeAssetGatepassSendEmail = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetGatepassSendEmail = nil
	}

	// try to unmarshal data into AeAssetGatepassVoided
	err = newStrictDecoder(data).Decode(&dst.AeAssetGatepassVoided)
	if err == nil {
		jsonAeAssetGatepassVoided, _ := json.Marshal(dst.AeAssetGatepassVoided)
		if string(jsonAeAssetGatepassVoided) == "{}" { // empty struct
			dst.AeAssetGatepassVoided = nil
		} else {
			if err = validator.Validate(dst.AeAssetGatepassVoided); err != nil {
				dst.AeAssetGatepassVoided = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetGatepassVoided = nil
	}

	// try to unmarshal data into AeAssetLabelFailed
	err = newStrictDecoder(data).Decode(&dst.AeAssetLabelFailed)
	if err == nil {
		jsonAeAssetLabelFailed, _ := json.Marshal(dst.AeAssetLabelFailed)
		if string(jsonAeAssetLabelFailed) == "{}" { // empty struct
			dst.AeAssetLabelFailed = nil
		} else {
			if err = validator.Validate(dst.AeAssetLabelFailed); err != nil {
				dst.AeAssetLabelFailed = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetLabelFailed = nil
	}

	// try to unmarshal data into AeAssetLabelGenerated
	err = newStrictDecoder(data).Decode(&dst.AeAssetLabelGenerated)
	if err == nil {
		jsonAeAssetLabelGenerated, _ := json.Marshal(dst.AeAssetLabelGenerated)
		if string(jsonAeAssetLabelGenerated) == "{}" { // empty struct
			dst.AeAssetLabelGenerated = nil
		} else {
			if err = validator.Validate(dst.AeAssetLabelGenerated); err != nil {
				dst.AeAssetLabelGenerated = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetLabelGenerated = nil
	}

	// try to unmarshal data into AeAssetLabelRequested
	err = newStrictDecoder(data).Decode(&dst.AeAssetLabelRequested)
	if err == nil {
		jsonAeAssetLabelRequested, _ := json.Marshal(dst.AeAssetLabelRequested)
		if string(jsonAeAssetLabelRequested) == "{}" { // empty struct
			dst.AeAssetLabelRequested = nil
		} else {
			if err = validator.Validate(dst.AeAssetLabelRequested); err != nil {
				dst.AeAssetLabelRequested = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetLabelRequested = nil
	}

	// try to unmarshal data into AeAssetNegotiationNoteAdded
	err = newStrictDecoder(data).Decode(&dst.AeAssetNegotiationNoteAdded)
	if err == nil {
		jsonAeAssetNegotiationNoteAdded, _ := json.Marshal(dst.AeAssetNegotiationNoteAdded)
		if string(jsonAeAssetNegotiationNoteAdded) == "{}" { // empty struct
			dst.AeAssetNegotiationNoteAdded = nil
		} else {
			if err = validator.Validate(dst.AeAssetNegotiationNoteAdded); err != nil {
				dst.AeAssetNegotiationNoteAdded = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetNegotiationNoteAdded = nil
	}

	// try to unmarshal data into AeAssetNegotiationOfferAccepted
	err = newStrictDecoder(data).Decode(&dst.AeAssetNegotiationOfferAccepted)
	if err == nil {
		jsonAeAssetNegotiationOfferAccepted, _ := json.Marshal(dst.AeAssetNegotiationOfferAccepted)
		if string(jsonAeAssetNegotiationOfferAccepted) == "{}" { // empty struct
			dst.AeAssetNegotiationOfferAccepted = nil
		} else {
			if err = validator.Validate(dst.AeAssetNegotiationOfferAccepted); err != nil {
				dst.AeAssetNegotiationOfferAccepted = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetNegotiationOfferAccepted = nil
	}

	// try to unmarshal data into AeAssetNegotiationOfferCountered
	err = newStrictDecoder(data).Decode(&dst.AeAssetNegotiationOfferCountered)
	if err == nil {
		jsonAeAssetNegotiationOfferCountered, _ := json.Marshal(dst.AeAssetNegotiationOfferCountered)
		if string(jsonAeAssetNegotiationOfferCountered) == "{}" { // empty struct
			dst.AeAssetNegotiationOfferCountered = nil
		} else {
			if err = validator.Validate(dst.AeAssetNegotiationOfferCountered); err != nil {
				dst.AeAssetNegotiationOfferCountered = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetNegotiationOfferCountered = nil
	}

	// try to unmarshal data into AeAssetNegotiationOfferRejected
	err = newStrictDecoder(data).Decode(&dst.AeAssetNegotiationOfferRejected)
	if err == nil {
		jsonAeAssetNegotiationOfferRejected, _ := json.Marshal(dst.AeAssetNegotiationOfferRejected)
		if string(jsonAeAssetNegotiationOfferRejected) == "{}" { // empty struct
			dst.AeAssetNegotiationOfferRejected = nil
		} else {
			if err = validator.Validate(dst.AeAssetNegotiationOfferRejected); err != nil {
				dst.AeAssetNegotiationOfferRejected = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetNegotiationOfferRejected = nil
	}

	// try to unmarshal data into AeAssetNegotiationUpserted
	err = newStrictDecoder(data).Decode(&dst.AeAssetNegotiationUpserted)
	if err == nil {
		jsonAeAssetNegotiationUpserted, _ := json.Marshal(dst.AeAssetNegotiationUpserted)
		if string(jsonAeAssetNegotiationUpserted) == "{}" { // empty struct
			dst.AeAssetNegotiationUpserted = nil
		} else {
			if err = validator.Validate(dst.AeAssetNegotiationUpserted); err != nil {
				dst.AeAssetNegotiationUpserted = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetNegotiationUpserted = nil
	}

	// try to unmarshal data into AeAssetNotSold
	err = newStrictDecoder(data).Decode(&dst.AeAssetNotSold)
	if err == nil {
		jsonAeAssetNotSold, _ := json.Marshal(dst.AeAssetNotSold)
		if string(jsonAeAssetNotSold) == "{}" { // empty struct
			dst.AeAssetNotSold = nil
		} else {
			if err = validator.Validate(dst.AeAssetNotSold); err != nil {
				dst.AeAssetNotSold = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetNotSold = nil
	}

	// try to unmarshal data into AeAssetPaidStatusUpdated
	err = newStrictDecoder(data).Decode(&dst.AeAssetPaidStatusUpdated)
	if err == nil {
		jsonAeAssetPaidStatusUpdated, _ := json.Marshal(dst.AeAssetPaidStatusUpdated)
		if string(jsonAeAssetPaidStatusUpdated) == "{}" { // empty struct
			dst.AeAssetPaidStatusUpdated = nil
		} else {
			if err = validator.Validate(dst.AeAssetPaidStatusUpdated); err != nil {
				dst.AeAssetPaidStatusUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetPaidStatusUpdated = nil
	}

	// try to unmarshal data into AeAssetSaleListingRemovedAms
	err = newStrictDecoder(data).Decode(&dst.AeAssetSaleListingRemovedAms)
	if err == nil {
		jsonAeAssetSaleListingRemovedAms, _ := json.Marshal(dst.AeAssetSaleListingRemovedAms)
		if string(jsonAeAssetSaleListingRemovedAms) == "{}" { // empty struct
			dst.AeAssetSaleListingRemovedAms = nil
		} else {
			if err = validator.Validate(dst.AeAssetSaleListingRemovedAms); err != nil {
				dst.AeAssetSaleListingRemovedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSaleListingRemovedAms = nil
	}

	// try to unmarshal data into AeAssetSaleListingUpsertedAms
	err = newStrictDecoder(data).Decode(&dst.AeAssetSaleListingUpsertedAms)
	if err == nil {
		jsonAeAssetSaleListingUpsertedAms, _ := json.Marshal(dst.AeAssetSaleListingUpsertedAms)
		if string(jsonAeAssetSaleListingUpsertedAms) == "{}" { // empty struct
			dst.AeAssetSaleListingUpsertedAms = nil
		} else {
			if err = validator.Validate(dst.AeAssetSaleListingUpsertedAms); err != nil {
				dst.AeAssetSaleListingUpsertedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSaleListingUpsertedAms = nil
	}

	// try to unmarshal data into AeAssetSellerChargeAddRequestFailed
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeAddRequestFailed)
	if err == nil {
		jsonAeAssetSellerChargeAddRequestFailed, _ := json.Marshal(dst.AeAssetSellerChargeAddRequestFailed)
		if string(jsonAeAssetSellerChargeAddRequestFailed) == "{}" { // empty struct
			dst.AeAssetSellerChargeAddRequestFailed = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeAddRequestFailed); err != nil {
				dst.AeAssetSellerChargeAddRequestFailed = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeAddRequestFailed = nil
	}

	// try to unmarshal data into AeAssetSellerChargeAddRequested
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeAddRequested)
	if err == nil {
		jsonAeAssetSellerChargeAddRequested, _ := json.Marshal(dst.AeAssetSellerChargeAddRequested)
		if string(jsonAeAssetSellerChargeAddRequested) == "{}" { // empty struct
			dst.AeAssetSellerChargeAddRequested = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeAddRequested); err != nil {
				dst.AeAssetSellerChargeAddRequested = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeAddRequested = nil
	}

	// try to unmarshal data into AeAssetSellerChargeAddRequestedV2
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeAddRequestedV2)
	if err == nil {
		jsonAeAssetSellerChargeAddRequestedV2, _ := json.Marshal(dst.AeAssetSellerChargeAddRequestedV2)
		if string(jsonAeAssetSellerChargeAddRequestedV2) == "{}" { // empty struct
			dst.AeAssetSellerChargeAddRequestedV2 = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeAddRequestedV2); err != nil {
				dst.AeAssetSellerChargeAddRequestedV2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeAddRequestedV2 = nil
	}

	// try to unmarshal data into AeAssetSellerChargeRemoveFailed
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeRemoveFailed)
	if err == nil {
		jsonAeAssetSellerChargeRemoveFailed, _ := json.Marshal(dst.AeAssetSellerChargeRemoveFailed)
		if string(jsonAeAssetSellerChargeRemoveFailed) == "{}" { // empty struct
			dst.AeAssetSellerChargeRemoveFailed = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeRemoveFailed); err != nil {
				dst.AeAssetSellerChargeRemoveFailed = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeRemoveFailed = nil
	}

	// try to unmarshal data into AeAssetSellerChargeRemoveRequested
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeRemoveRequested)
	if err == nil {
		jsonAeAssetSellerChargeRemoveRequested, _ := json.Marshal(dst.AeAssetSellerChargeRemoveRequested)
		if string(jsonAeAssetSellerChargeRemoveRequested) == "{}" { // empty struct
			dst.AeAssetSellerChargeRemoveRequested = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeRemoveRequested); err != nil {
				dst.AeAssetSellerChargeRemoveRequested = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeRemoveRequested = nil
	}

	// try to unmarshal data into AeAssetSellerChargeRemoved
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeRemoved)
	if err == nil {
		jsonAeAssetSellerChargeRemoved, _ := json.Marshal(dst.AeAssetSellerChargeRemoved)
		if string(jsonAeAssetSellerChargeRemoved) == "{}" { // empty struct
			dst.AeAssetSellerChargeRemoved = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeRemoved); err != nil {
				dst.AeAssetSellerChargeRemoved = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeRemoved = nil
	}

	// try to unmarshal data into AeAssetSellerChargeUpsert
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeUpsert)
	if err == nil {
		jsonAeAssetSellerChargeUpsert, _ := json.Marshal(dst.AeAssetSellerChargeUpsert)
		if string(jsonAeAssetSellerChargeUpsert) == "{}" { // empty struct
			dst.AeAssetSellerChargeUpsert = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeUpsert); err != nil {
				dst.AeAssetSellerChargeUpsert = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeUpsert = nil
	}

	// try to unmarshal data into AeAssetSellerChargeUpsertV2
	err = newStrictDecoder(data).Decode(&dst.AeAssetSellerChargeUpsertV2)
	if err == nil {
		jsonAeAssetSellerChargeUpsertV2, _ := json.Marshal(dst.AeAssetSellerChargeUpsertV2)
		if string(jsonAeAssetSellerChargeUpsertV2) == "{}" { // empty struct
			dst.AeAssetSellerChargeUpsertV2 = nil
		} else {
			if err = validator.Validate(dst.AeAssetSellerChargeUpsertV2); err != nil {
				dst.AeAssetSellerChargeUpsertV2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSellerChargeUpsertV2 = nil
	}

	// try to unmarshal data into AeAssetSoldStatusUpdated
	err = newStrictDecoder(data).Decode(&dst.AeAssetSoldStatusUpdated)
	if err == nil {
		jsonAeAssetSoldStatusUpdated, _ := json.Marshal(dst.AeAssetSoldStatusUpdated)
		if string(jsonAeAssetSoldStatusUpdated) == "{}" { // empty struct
			dst.AeAssetSoldStatusUpdated = nil
		} else {
			if err = validator.Validate(dst.AeAssetSoldStatusUpdated); err != nil {
				dst.AeAssetSoldStatusUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetSoldStatusUpdated = nil
	}

	// try to unmarshal data into AeAssetUpdatedAms
	err = newStrictDecoder(data).Decode(&dst.AeAssetUpdatedAms)
	if err == nil {
		jsonAeAssetUpdatedAms, _ := json.Marshal(dst.AeAssetUpdatedAms)
		if string(jsonAeAssetUpdatedAms) == "{}" { // empty struct
			dst.AeAssetUpdatedAms = nil
		} else {
			if err = validator.Validate(dst.AeAssetUpdatedAms); err != nil {
				dst.AeAssetUpdatedAms = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeAssetUpdatedAms = nil
	}

	// try to unmarshal data into AeDealUpserted
	err = newStrictDecoder(data).Decode(&dst.AeDealUpserted)
	if err == nil {
		jsonAeDealUpserted, _ := json.Marshal(dst.AeDealUpserted)
		if string(jsonAeDealUpserted) == "{}" { // empty struct
			dst.AeDealUpserted = nil
		} else {
			if err = validator.Validate(dst.AeDealUpserted); err != nil {
				dst.AeDealUpserted = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeDealUpserted = nil
	}

	// try to unmarshal data into AeDocumentAssetAdded
	err = newStrictDecoder(data).Decode(&dst.AeDocumentAssetAdded)
	if err == nil {
		jsonAeDocumentAssetAdded, _ := json.Marshal(dst.AeDocumentAssetAdded)
		if string(jsonAeDocumentAssetAdded) == "{}" { // empty struct
			dst.AeDocumentAssetAdded = nil
		} else {
			if err = validator.Validate(dst.AeDocumentAssetAdded); err != nil {
				dst.AeDocumentAssetAdded = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeDocumentAssetAdded = nil
	}

	// try to unmarshal data into AeDocumentAssetRemoved
	err = newStrictDecoder(data).Decode(&dst.AeDocumentAssetRemoved)
	if err == nil {
		jsonAeDocumentAssetRemoved, _ := json.Marshal(dst.AeDocumentAssetRemoved)
		if string(jsonAeDocumentAssetRemoved) == "{}" { // empty struct
			dst.AeDocumentAssetRemoved = nil
		} else {
			if err = validator.Validate(dst.AeDocumentAssetRemoved); err != nil {
				dst.AeDocumentAssetRemoved = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeDocumentAssetRemoved = nil
	}

	// try to unmarshal data into AeNotificationRequestDelivery
	err = newStrictDecoder(data).Decode(&dst.AeNotificationRequestDelivery)
	if err == nil {
		jsonAeNotificationRequestDelivery, _ := json.Marshal(dst.AeNotificationRequestDelivery)
		if string(jsonAeNotificationRequestDelivery) == "{}" { // empty struct
			dst.AeNotificationRequestDelivery = nil
		} else {
			if err = validator.Validate(dst.AeNotificationRequestDelivery); err != nil {
				dst.AeNotificationRequestDelivery = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeNotificationRequestDelivery = nil
	}

	// try to unmarshal data into AeServiceCancelled
	err = newStrictDecoder(data).Decode(&dst.AeServiceCancelled)
	if err == nil {
		jsonAeServiceCancelled, _ := json.Marshal(dst.AeServiceCancelled)
		if string(jsonAeServiceCancelled) == "{}" { // empty struct
			dst.AeServiceCancelled = nil
		} else {
			if err = validator.Validate(dst.AeServiceCancelled); err != nil {
				dst.AeServiceCancelled = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceCancelled = nil
	}

	// try to unmarshal data into AeServiceCompleted
	err = newStrictDecoder(data).Decode(&dst.AeServiceCompleted)
	if err == nil {
		jsonAeServiceCompleted, _ := json.Marshal(dst.AeServiceCompleted)
		if string(jsonAeServiceCompleted) == "{}" { // empty struct
			dst.AeServiceCompleted = nil
		} else {
			if err = validator.Validate(dst.AeServiceCompleted); err != nil {
				dst.AeServiceCompleted = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceCompleted = nil
	}

	// try to unmarshal data into AeServiceOrderPlaced
	err = newStrictDecoder(data).Decode(&dst.AeServiceOrderPlaced)
	if err == nil {
		jsonAeServiceOrderPlaced, _ := json.Marshal(dst.AeServiceOrderPlaced)
		if string(jsonAeServiceOrderPlaced) == "{}" { // empty struct
			dst.AeServiceOrderPlaced = nil
		} else {
			if err = validator.Validate(dst.AeServiceOrderPlaced); err != nil {
				dst.AeServiceOrderPlaced = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceOrderPlaced = nil
	}

	// try to unmarshal data into AeServiceOrderRejected
	err = newStrictDecoder(data).Decode(&dst.AeServiceOrderRejected)
	if err == nil {
		jsonAeServiceOrderRejected, _ := json.Marshal(dst.AeServiceOrderRejected)
		if string(jsonAeServiceOrderRejected) == "{}" { // empty struct
			dst.AeServiceOrderRejected = nil
		} else {
			if err = validator.Validate(dst.AeServiceOrderRejected); err != nil {
				dst.AeServiceOrderRejected = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceOrderRejected = nil
	}

	// try to unmarshal data into AeServiceOrderUpdated
	err = newStrictDecoder(data).Decode(&dst.AeServiceOrderUpdated)
	if err == nil {
		jsonAeServiceOrderUpdated, _ := json.Marshal(dst.AeServiceOrderUpdated)
		if string(jsonAeServiceOrderUpdated) == "{}" { // empty struct
			dst.AeServiceOrderUpdated = nil
		} else {
			if err = validator.Validate(dst.AeServiceOrderUpdated); err != nil {
				dst.AeServiceOrderUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceOrderUpdated = nil
	}

	// try to unmarshal data into AeServiceOrdered
	err = newStrictDecoder(data).Decode(&dst.AeServiceOrdered)
	if err == nil {
		jsonAeServiceOrdered, _ := json.Marshal(dst.AeServiceOrdered)
		if string(jsonAeServiceOrdered) == "{}" { // empty struct
			dst.AeServiceOrdered = nil
		} else {
			if err = validator.Validate(dst.AeServiceOrdered); err != nil {
				dst.AeServiceOrdered = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceOrdered = nil
	}

	// try to unmarshal data into AeServiceRequest
	err = newStrictDecoder(data).Decode(&dst.AeServiceRequest)
	if err == nil {
		jsonAeServiceRequest, _ := json.Marshal(dst.AeServiceRequest)
		if string(jsonAeServiceRequest) == "{}" { // empty struct
			dst.AeServiceRequest = nil
		} else {
			if err = validator.Validate(dst.AeServiceRequest); err != nil {
				dst.AeServiceRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceRequest = nil
	}

	// try to unmarshal data into AeServiceWaived
	err = newStrictDecoder(data).Decode(&dst.AeServiceWaived)
	if err == nil {
		jsonAeServiceWaived, _ := json.Marshal(dst.AeServiceWaived)
		if string(jsonAeServiceWaived) == "{}" { // empty struct
			dst.AeServiceWaived = nil
		} else {
			if err = validator.Validate(dst.AeServiceWaived); err != nil {
				dst.AeServiceWaived = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeServiceWaived = nil
	}

	// try to unmarshal data into AeUserInfoAdvisoryDataSourceUpdated
	err = newStrictDecoder(data).Decode(&dst.AeUserInfoAdvisoryDataSourceUpdated)
	if err == nil {
		jsonAeUserInfoAdvisoryDataSourceUpdated, _ := json.Marshal(dst.AeUserInfoAdvisoryDataSourceUpdated)
		if string(jsonAeUserInfoAdvisoryDataSourceUpdated) == "{}" { // empty struct
			dst.AeUserInfoAdvisoryDataSourceUpdated = nil
		} else {
			if err = validator.Validate(dst.AeUserInfoAdvisoryDataSourceUpdated); err != nil {
				dst.AeUserInfoAdvisoryDataSourceUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.AeUserInfoAdvisoryDataSourceUpdated = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AeAccountPaymentSourceRemovedAms = nil
		dst.AeAccountPaymentSourceUpsertAms = nil
		dst.AeAccountRemovedAms = nil
		dst.AeAccountRepresentativePayerAuthorized = nil
		dst.AeAccountRepresentativePayerDeauthorized = nil
		dst.AeAccountRepresentativeRemovedAms = nil
		dst.AeAccountRepresentativeUpsertedAms = nil
		dst.AeAccountUpsertedAms = nil
		dst.AeAccountingPaymentSourceUpdated = nil
		dst.AeAdvisoryAccountAms = nil
		dst.AeAdvisoryAccountRepresentativesAms = nil
		dst.AeAdvisoryAssetAms = nil
		dst.AeAdvisoryRequestAccountAms = nil
		dst.AeAdvisoryRequestAsset = nil
		dst.AeAdvisoryRequestAssetSold = nil
		dst.AeAmsPaymentVendorUpsert = nil
		dst.AeAssetCheckedInAms = nil
		dst.AeAssetCheckedOutAms = nil
		dst.AeAssetDealChargeRemoved = nil
		dst.AeAssetDealChargeUpsert = nil
		dst.AeAssetDealOfferAccepted = nil
		dst.AeAssetDealOfferMade = nil
		dst.AeAssetDealOfferRejected = nil
		dst.AeAssetDealPaymentApplySource = nil
		dst.AeAssetDealPaymentStatusChanged = nil
		dst.AeAssetDealSold = nil
		dst.AeAssetDealUnsold = nil
		dst.AeAssetGatepassBuyerReleasable = nil
		dst.AeAssetGatepassBuyerRevoked = nil
		dst.AeAssetGatepassCreated = nil
		dst.AeAssetGatepassDelivered = nil
		dst.AeAssetGatepassSendEmail = nil
		dst.AeAssetGatepassVoided = nil
		dst.AeAssetLabelFailed = nil
		dst.AeAssetLabelGenerated = nil
		dst.AeAssetLabelRequested = nil
		dst.AeAssetNegotiationNoteAdded = nil
		dst.AeAssetNegotiationOfferAccepted = nil
		dst.AeAssetNegotiationOfferCountered = nil
		dst.AeAssetNegotiationOfferRejected = nil
		dst.AeAssetNegotiationUpserted = nil
		dst.AeAssetNotSold = nil
		dst.AeAssetPaidStatusUpdated = nil
		dst.AeAssetSaleListingRemovedAms = nil
		dst.AeAssetSaleListingUpsertedAms = nil
		dst.AeAssetSellerChargeAddRequestFailed = nil
		dst.AeAssetSellerChargeAddRequested = nil
		dst.AeAssetSellerChargeAddRequestedV2 = nil
		dst.AeAssetSellerChargeRemoveFailed = nil
		dst.AeAssetSellerChargeRemoveRequested = nil
		dst.AeAssetSellerChargeRemoved = nil
		dst.AeAssetSellerChargeUpsert = nil
		dst.AeAssetSellerChargeUpsertV2 = nil
		dst.AeAssetSoldStatusUpdated = nil
		dst.AeAssetUpdatedAms = nil
		dst.AeDealUpserted = nil
		dst.AeDocumentAssetAdded = nil
		dst.AeDocumentAssetRemoved = nil
		dst.AeNotificationRequestDelivery = nil
		dst.AeServiceCancelled = nil
		dst.AeServiceCompleted = nil
		dst.AeServiceOrderPlaced = nil
		dst.AeServiceOrderRejected = nil
		dst.AeServiceOrderUpdated = nil
		dst.AeServiceOrdered = nil
		dst.AeServiceRequest = nil
		dst.AeServiceWaived = nil
		dst.AeUserInfoAdvisoryDataSourceUpdated = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EdgeEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EdgeEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EdgeEvent) MarshalJSON() ([]byte, error) {
	if src.AeAccountPaymentSourceRemovedAms != nil {
		return json.Marshal(&src.AeAccountPaymentSourceRemovedAms)
	}

	if src.AeAccountPaymentSourceUpsertAms != nil {
		return json.Marshal(&src.AeAccountPaymentSourceUpsertAms)
	}

	if src.AeAccountRemovedAms != nil {
		return json.Marshal(&src.AeAccountRemovedAms)
	}

	if src.AeAccountRepresentativePayerAuthorized != nil {
		return json.Marshal(&src.AeAccountRepresentativePayerAuthorized)
	}

	if src.AeAccountRepresentativePayerDeauthorized != nil {
		return json.Marshal(&src.AeAccountRepresentativePayerDeauthorized)
	}

	if src.AeAccountRepresentativeRemovedAms != nil {
		return json.Marshal(&src.AeAccountRepresentativeRemovedAms)
	}

	if src.AeAccountRepresentativeUpsertedAms != nil {
		return json.Marshal(&src.AeAccountRepresentativeUpsertedAms)
	}

	if src.AeAccountUpsertedAms != nil {
		return json.Marshal(&src.AeAccountUpsertedAms)
	}

	if src.AeAccountingPaymentSourceUpdated != nil {
		return json.Marshal(&src.AeAccountingPaymentSourceUpdated)
	}

	if src.AeAdvisoryAccountAms != nil {
		return json.Marshal(&src.AeAdvisoryAccountAms)
	}

	if src.AeAdvisoryAccountRepresentativesAms != nil {
		return json.Marshal(&src.AeAdvisoryAccountRepresentativesAms)
	}

	if src.AeAdvisoryAssetAms != nil {
		return json.Marshal(&src.AeAdvisoryAssetAms)
	}

	if src.AeAdvisoryRequestAccountAms != nil {
		return json.Marshal(&src.AeAdvisoryRequestAccountAms)
	}

	if src.AeAdvisoryRequestAsset != nil {
		return json.Marshal(&src.AeAdvisoryRequestAsset)
	}

	if src.AeAdvisoryRequestAssetSold != nil {
		return json.Marshal(&src.AeAdvisoryRequestAssetSold)
	}

	if src.AeAmsPaymentVendorUpsert != nil {
		return json.Marshal(&src.AeAmsPaymentVendorUpsert)
	}

	if src.AeAssetCheckedInAms != nil {
		return json.Marshal(&src.AeAssetCheckedInAms)
	}

	if src.AeAssetCheckedOutAms != nil {
		return json.Marshal(&src.AeAssetCheckedOutAms)
	}

	if src.AeAssetDealChargeRemoved != nil {
		return json.Marshal(&src.AeAssetDealChargeRemoved)
	}

	if src.AeAssetDealChargeUpsert != nil {
		return json.Marshal(&src.AeAssetDealChargeUpsert)
	}

	if src.AeAssetDealOfferAccepted != nil {
		return json.Marshal(&src.AeAssetDealOfferAccepted)
	}

	if src.AeAssetDealOfferMade != nil {
		return json.Marshal(&src.AeAssetDealOfferMade)
	}

	if src.AeAssetDealOfferRejected != nil {
		return json.Marshal(&src.AeAssetDealOfferRejected)
	}

	if src.AeAssetDealPaymentApplySource != nil {
		return json.Marshal(&src.AeAssetDealPaymentApplySource)
	}

	if src.AeAssetDealPaymentStatusChanged != nil {
		return json.Marshal(&src.AeAssetDealPaymentStatusChanged)
	}

	if src.AeAssetDealSold != nil {
		return json.Marshal(&src.AeAssetDealSold)
	}

	if src.AeAssetDealUnsold != nil {
		return json.Marshal(&src.AeAssetDealUnsold)
	}

	if src.AeAssetGatepassBuyerReleasable != nil {
		return json.Marshal(&src.AeAssetGatepassBuyerReleasable)
	}

	if src.AeAssetGatepassBuyerRevoked != nil {
		return json.Marshal(&src.AeAssetGatepassBuyerRevoked)
	}

	if src.AeAssetGatepassCreated != nil {
		return json.Marshal(&src.AeAssetGatepassCreated)
	}

	if src.AeAssetGatepassDelivered != nil {
		return json.Marshal(&src.AeAssetGatepassDelivered)
	}

	if src.AeAssetGatepassSendEmail != nil {
		return json.Marshal(&src.AeAssetGatepassSendEmail)
	}

	if src.AeAssetGatepassVoided != nil {
		return json.Marshal(&src.AeAssetGatepassVoided)
	}

	if src.AeAssetLabelFailed != nil {
		return json.Marshal(&src.AeAssetLabelFailed)
	}

	if src.AeAssetLabelGenerated != nil {
		return json.Marshal(&src.AeAssetLabelGenerated)
	}

	if src.AeAssetLabelRequested != nil {
		return json.Marshal(&src.AeAssetLabelRequested)
	}

	if src.AeAssetNegotiationNoteAdded != nil {
		return json.Marshal(&src.AeAssetNegotiationNoteAdded)
	}

	if src.AeAssetNegotiationOfferAccepted != nil {
		return json.Marshal(&src.AeAssetNegotiationOfferAccepted)
	}

	if src.AeAssetNegotiationOfferCountered != nil {
		return json.Marshal(&src.AeAssetNegotiationOfferCountered)
	}

	if src.AeAssetNegotiationOfferRejected != nil {
		return json.Marshal(&src.AeAssetNegotiationOfferRejected)
	}

	if src.AeAssetNegotiationUpserted != nil {
		return json.Marshal(&src.AeAssetNegotiationUpserted)
	}

	if src.AeAssetNotSold != nil {
		return json.Marshal(&src.AeAssetNotSold)
	}

	if src.AeAssetPaidStatusUpdated != nil {
		return json.Marshal(&src.AeAssetPaidStatusUpdated)
	}

	if src.AeAssetSaleListingRemovedAms != nil {
		return json.Marshal(&src.AeAssetSaleListingRemovedAms)
	}

	if src.AeAssetSaleListingUpsertedAms != nil {
		return json.Marshal(&src.AeAssetSaleListingUpsertedAms)
	}

	if src.AeAssetSellerChargeAddRequestFailed != nil {
		return json.Marshal(&src.AeAssetSellerChargeAddRequestFailed)
	}

	if src.AeAssetSellerChargeAddRequested != nil {
		return json.Marshal(&src.AeAssetSellerChargeAddRequested)
	}

	if src.AeAssetSellerChargeAddRequestedV2 != nil {
		return json.Marshal(&src.AeAssetSellerChargeAddRequestedV2)
	}

	if src.AeAssetSellerChargeRemoveFailed != nil {
		return json.Marshal(&src.AeAssetSellerChargeRemoveFailed)
	}

	if src.AeAssetSellerChargeRemoveRequested != nil {
		return json.Marshal(&src.AeAssetSellerChargeRemoveRequested)
	}

	if src.AeAssetSellerChargeRemoved != nil {
		return json.Marshal(&src.AeAssetSellerChargeRemoved)
	}

	if src.AeAssetSellerChargeUpsert != nil {
		return json.Marshal(&src.AeAssetSellerChargeUpsert)
	}

	if src.AeAssetSellerChargeUpsertV2 != nil {
		return json.Marshal(&src.AeAssetSellerChargeUpsertV2)
	}

	if src.AeAssetSoldStatusUpdated != nil {
		return json.Marshal(&src.AeAssetSoldStatusUpdated)
	}

	if src.AeAssetUpdatedAms != nil {
		return json.Marshal(&src.AeAssetUpdatedAms)
	}

	if src.AeDealUpserted != nil {
		return json.Marshal(&src.AeDealUpserted)
	}

	if src.AeDocumentAssetAdded != nil {
		return json.Marshal(&src.AeDocumentAssetAdded)
	}

	if src.AeDocumentAssetRemoved != nil {
		return json.Marshal(&src.AeDocumentAssetRemoved)
	}

	if src.AeNotificationRequestDelivery != nil {
		return json.Marshal(&src.AeNotificationRequestDelivery)
	}

	if src.AeServiceCancelled != nil {
		return json.Marshal(&src.AeServiceCancelled)
	}

	if src.AeServiceCompleted != nil {
		return json.Marshal(&src.AeServiceCompleted)
	}

	if src.AeServiceOrderPlaced != nil {
		return json.Marshal(&src.AeServiceOrderPlaced)
	}

	if src.AeServiceOrderRejected != nil {
		return json.Marshal(&src.AeServiceOrderRejected)
	}

	if src.AeServiceOrderUpdated != nil {
		return json.Marshal(&src.AeServiceOrderUpdated)
	}

	if src.AeServiceOrdered != nil {
		return json.Marshal(&src.AeServiceOrdered)
	}

	if src.AeServiceRequest != nil {
		return json.Marshal(&src.AeServiceRequest)
	}

	if src.AeServiceWaived != nil {
		return json.Marshal(&src.AeServiceWaived)
	}

	if src.AeUserInfoAdvisoryDataSourceUpdated != nil {
		return json.Marshal(&src.AeUserInfoAdvisoryDataSourceUpdated)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EdgeEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AeAccountPaymentSourceRemovedAms != nil {
		return obj.AeAccountPaymentSourceRemovedAms
	}

	if obj.AeAccountPaymentSourceUpsertAms != nil {
		return obj.AeAccountPaymentSourceUpsertAms
	}

	if obj.AeAccountRemovedAms != nil {
		return obj.AeAccountRemovedAms
	}

	if obj.AeAccountRepresentativePayerAuthorized != nil {
		return obj.AeAccountRepresentativePayerAuthorized
	}

	if obj.AeAccountRepresentativePayerDeauthorized != nil {
		return obj.AeAccountRepresentativePayerDeauthorized
	}

	if obj.AeAccountRepresentativeRemovedAms != nil {
		return obj.AeAccountRepresentativeRemovedAms
	}

	if obj.AeAccountRepresentativeUpsertedAms != nil {
		return obj.AeAccountRepresentativeUpsertedAms
	}

	if obj.AeAccountUpsertedAms != nil {
		return obj.AeAccountUpsertedAms
	}

	if obj.AeAccountingPaymentSourceUpdated != nil {
		return obj.AeAccountingPaymentSourceUpdated
	}

	if obj.AeAdvisoryAccountAms != nil {
		return obj.AeAdvisoryAccountAms
	}

	if obj.AeAdvisoryAccountRepresentativesAms != nil {
		return obj.AeAdvisoryAccountRepresentativesAms
	}

	if obj.AeAdvisoryAssetAms != nil {
		return obj.AeAdvisoryAssetAms
	}

	if obj.AeAdvisoryRequestAccountAms != nil {
		return obj.AeAdvisoryRequestAccountAms
	}

	if obj.AeAdvisoryRequestAsset != nil {
		return obj.AeAdvisoryRequestAsset
	}

	if obj.AeAdvisoryRequestAssetSold != nil {
		return obj.AeAdvisoryRequestAssetSold
	}

	if obj.AeAmsPaymentVendorUpsert != nil {
		return obj.AeAmsPaymentVendorUpsert
	}

	if obj.AeAssetCheckedInAms != nil {
		return obj.AeAssetCheckedInAms
	}

	if obj.AeAssetCheckedOutAms != nil {
		return obj.AeAssetCheckedOutAms
	}

	if obj.AeAssetDealChargeRemoved != nil {
		return obj.AeAssetDealChargeRemoved
	}

	if obj.AeAssetDealChargeUpsert != nil {
		return obj.AeAssetDealChargeUpsert
	}

	if obj.AeAssetDealOfferAccepted != nil {
		return obj.AeAssetDealOfferAccepted
	}

	if obj.AeAssetDealOfferMade != nil {
		return obj.AeAssetDealOfferMade
	}

	if obj.AeAssetDealOfferRejected != nil {
		return obj.AeAssetDealOfferRejected
	}

	if obj.AeAssetDealPaymentApplySource != nil {
		return obj.AeAssetDealPaymentApplySource
	}

	if obj.AeAssetDealPaymentStatusChanged != nil {
		return obj.AeAssetDealPaymentStatusChanged
	}

	if obj.AeAssetDealSold != nil {
		return obj.AeAssetDealSold
	}

	if obj.AeAssetDealUnsold != nil {
		return obj.AeAssetDealUnsold
	}

	if obj.AeAssetGatepassBuyerReleasable != nil {
		return obj.AeAssetGatepassBuyerReleasable
	}

	if obj.AeAssetGatepassBuyerRevoked != nil {
		return obj.AeAssetGatepassBuyerRevoked
	}

	if obj.AeAssetGatepassCreated != nil {
		return obj.AeAssetGatepassCreated
	}

	if obj.AeAssetGatepassDelivered != nil {
		return obj.AeAssetGatepassDelivered
	}

	if obj.AeAssetGatepassSendEmail != nil {
		return obj.AeAssetGatepassSendEmail
	}

	if obj.AeAssetGatepassVoided != nil {
		return obj.AeAssetGatepassVoided
	}

	if obj.AeAssetLabelFailed != nil {
		return obj.AeAssetLabelFailed
	}

	if obj.AeAssetLabelGenerated != nil {
		return obj.AeAssetLabelGenerated
	}

	if obj.AeAssetLabelRequested != nil {
		return obj.AeAssetLabelRequested
	}

	if obj.AeAssetNegotiationNoteAdded != nil {
		return obj.AeAssetNegotiationNoteAdded
	}

	if obj.AeAssetNegotiationOfferAccepted != nil {
		return obj.AeAssetNegotiationOfferAccepted
	}

	if obj.AeAssetNegotiationOfferCountered != nil {
		return obj.AeAssetNegotiationOfferCountered
	}

	if obj.AeAssetNegotiationOfferRejected != nil {
		return obj.AeAssetNegotiationOfferRejected
	}

	if obj.AeAssetNegotiationUpserted != nil {
		return obj.AeAssetNegotiationUpserted
	}

	if obj.AeAssetNotSold != nil {
		return obj.AeAssetNotSold
	}

	if obj.AeAssetPaidStatusUpdated != nil {
		return obj.AeAssetPaidStatusUpdated
	}

	if obj.AeAssetSaleListingRemovedAms != nil {
		return obj.AeAssetSaleListingRemovedAms
	}

	if obj.AeAssetSaleListingUpsertedAms != nil {
		return obj.AeAssetSaleListingUpsertedAms
	}

	if obj.AeAssetSellerChargeAddRequestFailed != nil {
		return obj.AeAssetSellerChargeAddRequestFailed
	}

	if obj.AeAssetSellerChargeAddRequested != nil {
		return obj.AeAssetSellerChargeAddRequested
	}

	if obj.AeAssetSellerChargeAddRequestedV2 != nil {
		return obj.AeAssetSellerChargeAddRequestedV2
	}

	if obj.AeAssetSellerChargeRemoveFailed != nil {
		return obj.AeAssetSellerChargeRemoveFailed
	}

	if obj.AeAssetSellerChargeRemoveRequested != nil {
		return obj.AeAssetSellerChargeRemoveRequested
	}

	if obj.AeAssetSellerChargeRemoved != nil {
		return obj.AeAssetSellerChargeRemoved
	}

	if obj.AeAssetSellerChargeUpsert != nil {
		return obj.AeAssetSellerChargeUpsert
	}

	if obj.AeAssetSellerChargeUpsertV2 != nil {
		return obj.AeAssetSellerChargeUpsertV2
	}

	if obj.AeAssetSoldStatusUpdated != nil {
		return obj.AeAssetSoldStatusUpdated
	}

	if obj.AeAssetUpdatedAms != nil {
		return obj.AeAssetUpdatedAms
	}

	if obj.AeDealUpserted != nil {
		return obj.AeDealUpserted
	}

	if obj.AeDocumentAssetAdded != nil {
		return obj.AeDocumentAssetAdded
	}

	if obj.AeDocumentAssetRemoved != nil {
		return obj.AeDocumentAssetRemoved
	}

	if obj.AeNotificationRequestDelivery != nil {
		return obj.AeNotificationRequestDelivery
	}

	if obj.AeServiceCancelled != nil {
		return obj.AeServiceCancelled
	}

	if obj.AeServiceCompleted != nil {
		return obj.AeServiceCompleted
	}

	if obj.AeServiceOrderPlaced != nil {
		return obj.AeServiceOrderPlaced
	}

	if obj.AeServiceOrderRejected != nil {
		return obj.AeServiceOrderRejected
	}

	if obj.AeServiceOrderUpdated != nil {
		return obj.AeServiceOrderUpdated
	}

	if obj.AeServiceOrdered != nil {
		return obj.AeServiceOrdered
	}

	if obj.AeServiceRequest != nil {
		return obj.AeServiceRequest
	}

	if obj.AeServiceWaived != nil {
		return obj.AeServiceWaived
	}

	if obj.AeUserInfoAdvisoryDataSourceUpdated != nil {
		return obj.AeUserInfoAdvisoryDataSourceUpdated
	}

	// all schemas are nil
	return nil
}

type NullableEdgeEvent struct {
	value *EdgeEvent
	isSet bool
}

func (v NullableEdgeEvent) Get() *EdgeEvent {
	return v.value
}

func (v *NullableEdgeEvent) Set(val *EdgeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeEvent(val *EdgeEvent) *NullableEdgeEvent {
	return &NullableEdgeEvent{value: val, isSet: true}
}

func (v NullableEdgeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


