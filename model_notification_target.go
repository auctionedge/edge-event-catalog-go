/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"fmt"
)

// checks if the NotificationTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationTarget{}

// NotificationTarget The target to deliver the notification to
type NotificationTarget struct {
	// The method to deliver the notification
	DeliveryMethod string `json:"delivery-method"`
	// The address to deliver the notification to
	DeliveryAddress string `json:"delivery-address"`
	AdditionalProperties map[string]interface{}
}

type _NotificationTarget NotificationTarget

// NewNotificationTarget instantiates a new NotificationTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationTarget(deliveryMethod string, deliveryAddress string) *NotificationTarget {
	this := NotificationTarget{}
	this.DeliveryMethod = deliveryMethod
	this.DeliveryAddress = deliveryAddress
	return &this
}

// NewNotificationTargetWithDefaults instantiates a new NotificationTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationTargetWithDefaults() *NotificationTarget {
	this := NotificationTarget{}
	return &this
}

// GetDeliveryMethod returns the DeliveryMethod field value
func (o *NotificationTarget) GetDeliveryMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeliveryMethod
}

// GetDeliveryMethodOk returns a tuple with the DeliveryMethod field value
// and a boolean to check if the value has been set.
func (o *NotificationTarget) GetDeliveryMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryMethod, true
}

// SetDeliveryMethod sets field value
func (o *NotificationTarget) SetDeliveryMethod(v string) {
	o.DeliveryMethod = v
}

// GetDeliveryAddress returns the DeliveryAddress field value
func (o *NotificationTarget) GetDeliveryAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeliveryAddress
}

// GetDeliveryAddressOk returns a tuple with the DeliveryAddress field value
// and a boolean to check if the value has been set.
func (o *NotificationTarget) GetDeliveryAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryAddress, true
}

// SetDeliveryAddress sets field value
func (o *NotificationTarget) SetDeliveryAddress(v string) {
	o.DeliveryAddress = v
}

func (o NotificationTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delivery-method"] = o.DeliveryMethod
	toSerialize["delivery-address"] = o.DeliveryAddress

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotificationTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delivery-method",
		"delivery-address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationTarget := _NotificationTarget{}

	err = json.Unmarshal(data, &varNotificationTarget)

	if err != nil {
		return err
	}

	*o = NotificationTarget(varNotificationTarget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "delivery-method")
		delete(additionalProperties, "delivery-address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationTarget struct {
	value *NotificationTarget
	isSet bool
}

func (v NullableNotificationTarget) Get() *NotificationTarget {
	return v.value
}

func (v *NullableNotificationTarget) Set(val *NotificationTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationTarget(val *NotificationTarget) *NullableNotificationTarget {
	return &NullableNotificationTarget{value: val, isSet: true}
}

func (v NullableNotificationTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


