/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
)

// checks if the CommonVehicleInterior type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonVehicleInterior{}

// CommonVehicleInterior Attributes defining the interior of the asset
type CommonVehicleInterior struct {
	// The primary color of the interior of the asset
	Color *string `json:"color,omitempty"`
	// The type of material used inside of the asset.
	SeatTrim *string `json:"seat-trim,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonVehicleInterior CommonVehicleInterior

// NewCommonVehicleInterior instantiates a new CommonVehicleInterior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonVehicleInterior() *CommonVehicleInterior {
	this := CommonVehicleInterior{}
	return &this
}

// NewCommonVehicleInteriorWithDefaults instantiates a new CommonVehicleInterior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonVehicleInteriorWithDefaults() *CommonVehicleInterior {
	this := CommonVehicleInterior{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CommonVehicleInterior) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleInterior) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CommonVehicleInterior) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CommonVehicleInterior) SetColor(v string) {
	o.Color = &v
}

// GetSeatTrim returns the SeatTrim field value if set, zero value otherwise.
func (o *CommonVehicleInterior) GetSeatTrim() string {
	if o == nil || IsNil(o.SeatTrim) {
		var ret string
		return ret
	}
	return *o.SeatTrim
}

// GetSeatTrimOk returns a tuple with the SeatTrim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVehicleInterior) GetSeatTrimOk() (*string, bool) {
	if o == nil || IsNil(o.SeatTrim) {
		return nil, false
	}
	return o.SeatTrim, true
}

// HasSeatTrim returns a boolean if a field has been set.
func (o *CommonVehicleInterior) HasSeatTrim() bool {
	if o != nil && !IsNil(o.SeatTrim) {
		return true
	}

	return false
}

// SetSeatTrim gets a reference to the given string and assigns it to the SeatTrim field.
func (o *CommonVehicleInterior) SetSeatTrim(v string) {
	o.SeatTrim = &v
}

func (o CommonVehicleInterior) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonVehicleInterior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.SeatTrim) {
		toSerialize["seat-trim"] = o.SeatTrim
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonVehicleInterior) UnmarshalJSON(data []byte) (err error) {
	varCommonVehicleInterior := _CommonVehicleInterior{}

	err = json.Unmarshal(data, &varCommonVehicleInterior)

	if err != nil {
		return err
	}

	*o = CommonVehicleInterior(varCommonVehicleInterior)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "color")
		delete(additionalProperties, "seat-trim")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonVehicleInterior struct {
	value *CommonVehicleInterior
	isSet bool
}

func (v NullableCommonVehicleInterior) Get() *CommonVehicleInterior {
	return v.value
}

func (v *NullableCommonVehicleInterior) Set(val *CommonVehicleInterior) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonVehicleInterior) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonVehicleInterior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonVehicleInterior(val *CommonVehicleInterior) *NullableCommonVehicleInterior {
	return &NullableCommonVehicleInterior{value: val, isSet: true}
}

func (v NullableCommonVehicleInterior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonVehicleInterior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


