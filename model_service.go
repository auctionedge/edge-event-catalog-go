/*
Edge Event Schemas

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Service type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Service{}

// Service Service option
type Service struct {
	// Source's unique identifier for service
	Id string `json:"id"`
	ServiceClass ServiceClassEnum `json:"service-class"`
	// The name of the inspection option.
	Name string `json:"name"`
	// Description of service being performed for information to be presented
	Description string `json:"description"`
	SpecificDetails *ServiceSpecificDetails `json:"specific-details,omitempty"`
	// Reason why this service option is not eligible
	RejectReason *string `json:"reject-reason,omitempty"`
	Parameters []CommonServiceParameter `json:"parameters,omitempty"`
}

type _Service Service

// NewService instantiates a new Service object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewService(id string, serviceClass ServiceClassEnum, name string, description string) *Service {
	this := Service{}
	this.Id = id
	this.ServiceClass = serviceClass
	this.Name = name
	this.Description = description
	return &this
}

// NewServiceWithDefaults instantiates a new Service object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceWithDefaults() *Service {
	this := Service{}
	return &this
}

// GetId returns the Id field value
func (o *Service) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Service) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Service) SetId(v string) {
	o.Id = v
}

// GetServiceClass returns the ServiceClass field value
func (o *Service) GetServiceClass() ServiceClassEnum {
	if o == nil {
		var ret ServiceClassEnum
		return ret
	}

	return o.ServiceClass
}

// GetServiceClassOk returns a tuple with the ServiceClass field value
// and a boolean to check if the value has been set.
func (o *Service) GetServiceClassOk() (*ServiceClassEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceClass, true
}

// SetServiceClass sets field value
func (o *Service) SetServiceClass(v ServiceClassEnum) {
	o.ServiceClass = v
}

// GetName returns the Name field value
func (o *Service) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Service) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Service) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *Service) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Service) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Service) SetDescription(v string) {
	o.Description = v
}

// GetSpecificDetails returns the SpecificDetails field value if set, zero value otherwise.
func (o *Service) GetSpecificDetails() ServiceSpecificDetails {
	if o == nil || IsNil(o.SpecificDetails) {
		var ret ServiceSpecificDetails
		return ret
	}
	return *o.SpecificDetails
}

// GetSpecificDetailsOk returns a tuple with the SpecificDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetSpecificDetailsOk() (*ServiceSpecificDetails, bool) {
	if o == nil || IsNil(o.SpecificDetails) {
		return nil, false
	}
	return o.SpecificDetails, true
}

// HasSpecificDetails returns a boolean if a field has been set.
func (o *Service) HasSpecificDetails() bool {
	if o != nil && !IsNil(o.SpecificDetails) {
		return true
	}

	return false
}

// SetSpecificDetails gets a reference to the given ServiceSpecificDetails and assigns it to the SpecificDetails field.
func (o *Service) SetSpecificDetails(v ServiceSpecificDetails) {
	o.SpecificDetails = &v
}

// GetRejectReason returns the RejectReason field value if set, zero value otherwise.
func (o *Service) GetRejectReason() string {
	if o == nil || IsNil(o.RejectReason) {
		var ret string
		return ret
	}
	return *o.RejectReason
}

// GetRejectReasonOk returns a tuple with the RejectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetRejectReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RejectReason) {
		return nil, false
	}
	return o.RejectReason, true
}

// HasRejectReason returns a boolean if a field has been set.
func (o *Service) HasRejectReason() bool {
	if o != nil && !IsNil(o.RejectReason) {
		return true
	}

	return false
}

// SetRejectReason gets a reference to the given string and assigns it to the RejectReason field.
func (o *Service) SetRejectReason(v string) {
	o.RejectReason = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Service) GetParameters() []CommonServiceParameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []CommonServiceParameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetParametersOk() ([]CommonServiceParameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Service) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []CommonServiceParameter and assigns it to the Parameters field.
func (o *Service) SetParameters(v []CommonServiceParameter) {
	o.Parameters = v
}

func (o Service) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Service) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["service-class"] = o.ServiceClass
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.SpecificDetails) {
		toSerialize["specific-details"] = o.SpecificDetails
	}
	if !IsNil(o.RejectReason) {
		toSerialize["reject-reason"] = o.RejectReason
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *Service) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"service-class",
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varService := _Service{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varService)

	if err != nil {
		return err
	}

	*o = Service(varService)

	return err
}

type NullableService struct {
	value *Service
	isSet bool
}

func (v NullableService) Get() *Service {
	return v.value
}

func (v *NullableService) Set(val *Service) {
	v.value = val
	v.isSet = true
}

func (v NullableService) IsSet() bool {
	return v.isSet
}

func (v *NullableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableService(val *Service) *NullableService {
	return &NullableService{value: val, isSet: true}
}

func (v NullableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


